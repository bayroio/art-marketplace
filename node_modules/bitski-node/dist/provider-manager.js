"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const credential_token_provider_1 = require("./auth/credential-token-provider");
const provider_1 = require("./provider");
/**
 * A wrapper around Bitski providers for convenient use with Truffle.
 *
 * Background:
 * This is very useful because when you pass a custom provider to Truffle via a
 * function in the config, it executes that function many times during execution,
 * which will cause you to create a brand new provider for every request.
 * This caches a single provider for every network, which reduces the memory
 * footprint, and vastly speeds up execution. It also shares an access token provider
 * amongst all providers, which means that if you switch networks, it should also be
 * very quick.
 */
class ProviderManager {
    constructor(credential, secret) {
        this.cachedProviders = new Map();
        this.credential = credential;
        this.tokenProvider = new credential_token_provider_1.default({ id: credential, secret }, {});
    }
    getProvider(networkName = 'mainnet', additionalHeaders) {
        // Check for existing provider
        const existingProvider = this.cachedProviders.get(networkName);
        if (existingProvider) {
            // Return existing provider
            return existingProvider;
        }
        // ** No existing provider, create one **
        const newProvider = new provider_1.default(this.credential, this.tokenProvider, networkName, { additionalHeaders });
        // Start the provider
        newProvider.start();
        // Cache
        this.cachedProviders.set(networkName, newProvider);
        // Return newly created provider
        return newProvider;
    }
}
exports.ProviderManager = ProviderManager;
//# sourceMappingURL=provider-manager.js.map