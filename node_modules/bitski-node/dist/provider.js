"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bitski_provider_1 = require("bitski-provider");
const fetch_1 = require("./subproviders/fetch");
/**
 * A Bitski powered web3 provider that is designed for use in Node
 */
class BitskiNodeProvider extends bitski_provider_1.BitskiEngine {
    /**
     * Creates a new BitskiNodeProvider
     * @param clientId Client id
     * @param tokenProvider An AccessTokenProvider instance for getting access tokens
     * @param networkName Ethereum network to use. Default: mainnet
     * @param options Additional options
     */
    constructor(clientId, tokenProvider, networkName, options) {
        super(options);
        this.clientId = clientId;
        this.rpcUrl = `https://api.bitski.com/v1/web3/${networkName || 'mainnet'}`;
        this.tokenProvider = tokenProvider;
        // Assign defaults
        this.headers = {
            'X-API-KEY': this.clientId,
            'X-CLIENT-ID': this.clientId,
        };
        // Allow for adding additional headers without overriding defaults
        if (options && options.additionalHeaders) {
            this.headers = Object.assign({}, options.additionalHeaders, this.headers);
        }
        this.addSubproviders();
    }
    addSubproviders() {
        const fetchSubprovider = new fetch_1.NodeFetchSubprovider(this.rpcUrl, false, this.tokenProvider, this.headers);
        this.addProvider(fetchSubprovider);
    }
}
exports.default = BitskiNodeProvider;
//# sourceMappingURL=provider.js.map