"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bitski_provider_1 = require("bitski-provider");
const simple_oauth2_1 = require("simple-oauth2");
const authentication_error_1 = require("../errors/authentication-error");
const DEFAULT_TOKEN_OPTIONS = { scope: 'eth_sign' };
const DEFAULT_AUTH_OPTIONS = {
    auth: {
        tokenHost: 'https://account.bitski.com',
        tokenPath: '/oauth2/token',
    },
};
/**
 * An AccessTokenProvider that uses OAuth2 client credentials to get Bitski access tokens.
 */
class CredentialTokenProvider {
    constructor(credentials, options) {
        this.options = Object.assign({}, DEFAULT_TOKEN_OPTIONS, options);
        const oauthSettings = Object.assign({ client: credentials }, DEFAULT_AUTH_OPTIONS);
        try {
            this.oauthClient = simple_oauth2_1.create(oauthSettings);
        }
        catch (e) {
            throw authentication_error_1.AuthenticationError.InvalidCredentials(e);
        }
    }
    getAccessToken() {
        if (this.accessToken && !this.accessToken.expired) {
            return Promise.resolve(this.accessToken.token);
        }
        return this.requestNewAccessToken().then((accessToken) => {
            return accessToken.token;
        });
    }
    invalidateToken() {
        this.accessToken = undefined;
        return Promise.resolve();
    }
    requestNewAccessToken() {
        return this.oauthClient.clientCredentials.getToken(this.options).then((result) => {
            const token = new bitski_provider_1.AccessToken(result.access_token, result.expires_in);
            this.accessToken = token;
            return token;
        }).catch((error) => {
            throw authentication_error_1.AuthenticationError.AuthenticationFailed(error);
        });
    }
}
exports.default = CredentialTokenProvider;
//# sourceMappingURL=credential-token-provider.js.map