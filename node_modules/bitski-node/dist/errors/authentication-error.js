"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AuthenticationErrorCode;
(function (AuthenticationErrorCode) {
    // Attempted to take an action that requires an access token, when none was available.
    AuthenticationErrorCode[AuthenticationErrorCode["NoAccessToken"] = 1000] = "NoAccessToken";
    // The credentials provided are invalid.
    AuthenticationErrorCode[AuthenticationErrorCode["InvalidCredentials"] = 1001] = "InvalidCredentials";
    // Authentication using the credentials provided failed.
    AuthenticationErrorCode[AuthenticationErrorCode["AuthenticationFailed"] = 1002] = "AuthenticationFailed";
})(AuthenticationErrorCode = exports.AuthenticationErrorCode || (exports.AuthenticationErrorCode = {}));
class AuthenticationError extends Error {
    constructor(message, code) {
        super(message);
        this.name = 'AuthenticationError';
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, AuthenticationError);
        }
        this.code = code;
    }
    static NoAccessToken() {
        return new AuthenticationError('This request requires an app wallet.', AuthenticationErrorCode.NoAccessToken);
    }
    static InvalidCredentials(underlyingError) {
        const err = new AuthenticationError('The credentials provided are not valid.', AuthenticationErrorCode.InvalidCredentials);
        err.underlyingError = underlyingError;
        return err;
    }
    static AuthenticationFailed(underlyingError) {
        const err = new AuthenticationError('Authentication failed. Please verify your credentials and try again.', AuthenticationErrorCode.AuthenticationFailed);
        err.underlyingError = underlyingError;
        return err;
    }
}
exports.AuthenticationError = AuthenticationError;
//# sourceMappingURL=authentication-error.js.map