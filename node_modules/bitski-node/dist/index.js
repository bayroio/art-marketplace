"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const anonymous_token_provider_1 = require("./auth/anonymous-token-provider");
const credential_token_provider_1 = require("./auth/credential-token-provider");
const provider_1 = require("./provider");
/**
 * Get a Bitski web3 provider for Node
 * @param clientId Your Bitski client id
 * @param options Additional options to configure your provider
 */
function getProvider(clientId, options) {
    const opts = options || {};
    let tokenProvider;
    if (opts.credentials) {
        // Create a credential token provider if using app wallet.
        tokenProvider = new credential_token_provider_1.default(opts.credentials, opts.oauth);
    }
    else {
        // Create a logged out token provider if not using app wallet.
        tokenProvider = new anonymous_token_provider_1.AnonymousTokenProvider();
    }
    // Check opts.network as well for backwards compatibility
    const network = opts.networkName || opts.network;
    // Create the provider
    const provider = new provider_1.default(clientId, tokenProvider, network, opts);
    provider.start();
    return provider;
}
exports.getProvider = getProvider;
var provider_manager_1 = require("./provider-manager");
exports.ProviderManager = provider_manager_1.ProviderManager;
//# sourceMappingURL=index.js.map