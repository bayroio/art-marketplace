import { ACCESS_TOKEN_KEY, REFRESH_TOKEN_KEY } from '../constants';
import { LocalStorageStore } from '../utils/localstorage-store';
import { AccessToken } from './access-token';
export class TokenStore {
    constructor(clientId, store) {
        this.clientId = clientId;
        this.store = store || new LocalStorageStore();
        const accessTokenString = this.store.getItem(this.accessTokenKey);
        if (accessTokenString) {
            let parsedToken;
            try {
                parsedToken = AccessToken.fromString(accessTokenString);
            }
            finally {
                this.accessToken = parsedToken;
            }
        }
    }
    get currentToken() {
        if (this.accessToken && !this.accessToken.expired) {
            return this.accessToken.token;
        }
    }
    get refreshToken() {
        const token = this.store.getItem(this.refreshTokenKey);
        if (token) {
            return token;
        }
    }
    get accessTokenKey() {
        return `${ACCESS_TOKEN_KEY}.${this.clientId}`;
    }
    get refreshTokenKey() {
        return `${REFRESH_TOKEN_KEY}.${this.clientId}`;
    }
    persistTokenResponse(response) {
        if (response.refreshToken) {
            this.store.setItem(this.refreshTokenKey, response.refreshToken);
        }
        const parsedToken = AccessToken.fromTokenResponse(response);
        this.store.setItem(this.accessTokenKey, parsedToken.toStorageString());
        this.accessToken = parsedToken;
    }
    invalidateCurrentToken() {
        this.accessToken = undefined;
        this.store.clearItem(this.accessTokenKey);
    }
    clear() {
        this.accessToken = undefined;
        this.store.clearItem(this.refreshTokenKey);
        this.store.clearItem(this.accessTokenKey);
    }
}
