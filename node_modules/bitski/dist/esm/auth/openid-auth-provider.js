import { AuthenticationStatus, OAuthSignInMethod } from '../bitski';
import { AuthenticationError } from '../errors/authentication-error';
import { OAuthManager } from './oauth-manager';
import { TokenStore } from './token-store';
import { User } from './user';
import { UserStore } from './user-store';
export class OpenidAuthProvider {
    constructor(clientId, redirectUri, additionalScopes, opts) {
        opts = opts || {};
        const settings = {
            additionalScopes,
            clientId,
            redirectUri,
        };
        Object.assign(settings, opts);
        this.oauthManager = new OAuthManager(settings);
        this.tokenStore = new TokenStore(clientId, opts.store);
        this.userStore = new UserStore(clientId, opts.store);
    }
    get authStatus() {
        if (this.tokenStore.currentToken) {
            return AuthenticationStatus.Connected;
        }
        else if (this.tokenStore.refreshToken) {
            return AuthenticationStatus.Expired;
        }
        else {
            return AuthenticationStatus.NotConnected;
        }
    }
    getAccessToken() {
        if (this.tokenStore.currentToken) {
            return Promise.resolve(this.tokenStore.currentToken);
        }
        if (this.tokenStore.refreshToken) {
            return this.refreshAccessToken();
        }
        return Promise.reject(AuthenticationError.NotSignedIn());
    }
    getRefreshToken() {
        if (this.tokenStore.refreshToken) {
            return Promise.resolve(this.tokenStore.refreshToken);
        }
        // Error: the user did not approve this app for offline access
        if (this.tokenStore.currentToken) {
            return Promise.reject(AuthenticationError.NoRefreshToken());
        }
        // Error: the user is not signed in.
        return Promise.reject(AuthenticationError.NotSignedIn());
    }
    invalidateToken() {
        if (this.tokenStore.currentToken) {
            this.tokenStore.invalidateCurrentToken();
        }
        if (this.signOutCallback) {
            this.signOutCallback();
        }
        return Promise.resolve();
    }
    refreshAccessToken() {
        if (this.tokenStore.refreshToken) {
            return this.oauthManager.refreshAccessToken(this.tokenStore.refreshToken).then((tokenResponse) => {
                this.tokenStore.persistTokenResponse(tokenResponse);
                return tokenResponse.accessToken;
            }).catch((error) => {
                // If we can't renew, we likely have bad data
                this.tokenStore.clear();
                this.userStore.clear();
                throw error;
            });
        }
        return Promise.reject(AuthenticationError.NoRefreshToken());
    }
    signIn(method, opts) {
        let promise;
        switch (method) {
            case OAuthSignInMethod.Redirect:
                promise = this.oauthManager.signInRedirect(opts);
                break;
            case OAuthSignInMethod.Silent:
                return Promise.reject(AuthenticationError.UnsupportedAuthenticationMethod());
            default:
                promise = this.oauthManager.signInPopup(opts);
                break;
        }
        return promise.then((tokenResponse) => {
            this.tokenStore.persistTokenResponse(tokenResponse);
            return this.loadUser();
        });
    }
    connect() {
        return this.refreshAccessToken().then(() => {
            return this.loadUser();
        });
    }
    getUser() {
        return this.getOrFetchUser();
    }
    signInOrConnect(signInMethod = OAuthSignInMethod.Popup, opts) {
        switch (this.authStatus) {
            case AuthenticationStatus.Connected:
                return this.loadUser();
            case AuthenticationStatus.Expired:
                return this.connect();
            case AuthenticationStatus.NotConnected:
                return this.signIn(signInMethod, opts);
        }
    }
    redirectCallback() {
        return this.oauthManager.redirectCallback().then((tokenResponse) => {
            this.tokenStore.persistTokenResponse(tokenResponse);
            return this.loadUser();
        });
    }
    signOut() {
        this.tokenStore.clear();
        this.userStore.clear();
        // Call the sign out callback if one has been provided
        if (this.signOutCallback) {
            this.signOutCallback();
        }
        // We don't currently have the ability to invalidate access tokens, so for now simply resolve.
        // Down the road this may perform a network request to invalidate.
        return Promise.resolve();
    }
    getOrFetchUser() {
        const currentUser = this.userStore.currentUser;
        if (currentUser) {
            return Promise.resolve(currentUser);
        }
        return this.loadUser();
    }
    loadUser() {
        return this.getAccessToken().then((accessToken) => {
            return this.oauthManager.requestUserInfo(accessToken);
        }).then((json) => {
            return User.fromJson(json);
        }).then((user) => {
            this.userStore.set(user);
            return user;
        });
    }
}
