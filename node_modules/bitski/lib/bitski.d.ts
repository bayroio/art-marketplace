import { AuthorizationServiceConfiguration } from '@openid/appauth';
import { BitskiEngine, BitskiEngineOptions, Kovan, Mainnet, Network, Rinkeby } from 'bitski-provider';
import { LOGIN_HINT_SIGNUP, SignInOptions } from './auth/oauth-manager';
import { User } from './auth/user';
import { ConnectButton, ConnectButtonOptions, ConnectButtonSize } from './components/connect-button';
import { LocalStorageStore } from './utils/localstorage-store';
import { Store } from './utils/store';
export declare enum OAuthSignInMethod {
    Redirect = "REDIRECT",
    Popup = "POPUP",
    Silent = "SILENT"
}
export declare enum AuthenticationStatus {
    Connected = "CONNECTED",
    Expired = "EXPIRED",
    NotConnected = "NOT_CONNECTED"
}
export { Store, LocalStorageStore };
export { SignInOptions, LOGIN_HINT_SIGNUP };
export { Network, Mainnet, Rinkeby, Kovan };
export { ConnectButtonSize, ConnectButtonOptions };
export { AuthenticationError, AuthenticationErrorCode } from './errors/authentication-error';
export { ParseError, ParseErrorCode } from './errors/parse-error';
export { SignerError, SignerErrorCode } from './errors/signer-error';
export interface BitskiSDKOptions {
    configuration?: AuthorizationServiceConfiguration;
    store?: Store;
}
export interface ProviderOptions extends BitskiEngineOptions {
    networkName?: string;
    network?: Network;
    pollingInterval?: number;
    disableCaching?: boolean;
    disableValidation?: boolean;
    disableBlockTracking?: boolean;
    additionalHeaders?: object;
    webBaseUrl?: string;
    apiBaseUrl?: string;
    minGasPrice?: number;
    callbackURL?: string;
}
/**
 * Bitski SDK
 */
export declare class Bitski {
    /**
     * Alternative to using our static callback.html file. Call this from your own redirect page.
     */
    static callback(): void;
    private engines;
    private clientId;
    private authProvider;
    private signoutHandlers;
    private sdkVersion;
    /**
     * @param clientId OAuth Client ID
     * @param redirectUri Redirect uri, defaults to the current url. This should be the location of your callback html file.
     * @param additionalScopes To use custom scopes, add them here. The default value is ['offline'].
     * Note: Make sure your app is approved for the scopes you are requesting first.
     * @param options Other OAuth settings. Don't change these unless you know what you are doing.
     */
    constructor(clientId: string, redirectUri?: string, additionalScopes?: string[], options?: BitskiSDKOptions);
    /**
     * Returns a new web3 provider for a given network.
     * @param options options for the provider, or a network name
     */
    getProvider(options?: ProviderOptions | string): BitskiEngine;
    /**
     * Creates a sign in with bitski button to add to your app. If an HTML element is passed in as the
     * first parameter, it will automatically add it to the DOM inside that element. Make sure to add
     * a callback to get notified of login events.
     * @param options {ConnectButtonOptions} Optional configuration for the button
     * @param callback Post-login callback. Called when sign in is complete. Not applicable for redirect login method.
     */
    getConnectButton(options?: ConnectButtonOptions, callback?: (error?: Error, user?: any) => void): ConnectButton;
    /**
     * Signs in or connects to bitski depending on the user's auth state.
     * Since it may open a popup, this method must be called from user interaction handler,
     * such as a click or tap handler.
     * @param options Provide SignInOptions for the sign in request. See signIn() for more info.
     */
    start(options?: SignInOptions): Promise<User>;
    /**
     * Check the logged in state of the user
     */
    readonly authStatus: AuthenticationStatus;
    /**
     * Starts the sign in flow. Will trigger a popup window over your app, so it must be called within a user interaction handler such as a click.
     * @param options Optionally provide additional options for the sign in request.
     *
     * You can use the options parameter to request that we show the sign up form instead of the sign in form:
     * ```javascript
     * import { LOGIN_HINT_SIGNUP } from 'bitski';
     *
     * await bitski.signIn({ login_hint: LOGIN_HINT_SIGNUP });
     * ```
     */
    signIn(options?: SignInOptions): Promise<User>;
    /**
     * Gets the current signed in user. Will reject if we are not signed in.
     */
    getUser(): Promise<User>;
    /**
     * Connects to bitski to get a valid access token if possible.
     */
    connect(): Promise<User>;
    /**
     * Starts redirect sign in flow. This is an alternative flow to the popup that all takes place in the same browser window.
     * @param options Optionally provide additional options for the sign in request. See signIn() for more info.
     */
    signInRedirect(options?: SignInOptions): void;
    /**
     * Call from your oauth redirect page.
     */
    redirectCallback(): Promise<User>;
    /**
     * Retrieves the current access token for the user, if logged in.
     */
    getCurrentAccessToken(): Promise<string>;
    /**
     * Retrieves the current refresh token for the user, if logged in.
     * Requires that the user has approved your application for offline access.
     */
    getCurrentRefreshToken(): Promise<string>;
    /**
     * Register a callback to be called on sign out. This is a good practice,
     * since there may be situations where you are signed out unexpectedly.
     * @param fn Your callback function
     */
    addSignOutHandler(fn: () => void): void;
    /**
     * Remove a registered signout callback
     * @param fn Your callback function
     */
    removeSignOutHandler(fn: () => void): void;
    /**
     * Sign the current user out of your application.
     */
    signOut(): Promise<void>;
    private createProvider;
    private networkFromName;
    private networkFromProviderOptions;
    private onSignOut;
    /**
     * Embeds Bitski's UI styles
     */
    private injectStyles;
}
