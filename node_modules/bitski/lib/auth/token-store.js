"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../constants");
const localstorage_store_1 = require("../utils/localstorage-store");
const access_token_1 = require("./access-token");
class TokenStore {
    constructor(clientId, store) {
        this.clientId = clientId;
        this.store = store || new localstorage_store_1.LocalStorageStore();
        const accessTokenString = this.store.getItem(this.accessTokenKey);
        if (accessTokenString) {
            let parsedToken;
            try {
                parsedToken = access_token_1.AccessToken.fromString(accessTokenString);
            }
            finally {
                this.accessToken = parsedToken;
            }
        }
    }
    get currentToken() {
        if (this.accessToken && !this.accessToken.expired) {
            return this.accessToken.token;
        }
    }
    get refreshToken() {
        const token = this.store.getItem(this.refreshTokenKey);
        if (token) {
            return token;
        }
    }
    get accessTokenKey() {
        return `${constants_1.ACCESS_TOKEN_KEY}.${this.clientId}`;
    }
    get refreshTokenKey() {
        return `${constants_1.REFRESH_TOKEN_KEY}.${this.clientId}`;
    }
    persistTokenResponse(response) {
        if (response.refreshToken) {
            this.store.setItem(this.refreshTokenKey, response.refreshToken);
        }
        const parsedToken = access_token_1.AccessToken.fromTokenResponse(response);
        this.store.setItem(this.accessTokenKey, parsedToken.toStorageString());
        this.accessToken = parsedToken;
    }
    invalidateCurrentToken() {
        this.accessToken = undefined;
        this.store.clearItem(this.accessTokenKey);
    }
    clear() {
        this.accessToken = undefined;
        this.store.clearItem(this.refreshTokenKey);
        this.store.clearItem(this.accessTokenKey);
    }
}
exports.TokenStore = TokenStore;
//# sourceMappingURL=token-store.js.map