{"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/index.ts":{"path":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/index.ts","statementMap":{"0":{"start":{"line":3,"column":4},"end":{"line":3,"column":71}},"1":{"start":{"line":3,"column":21},"end":{"line":3,"column":71}},"2":{"start":{"line":3,"column":53},"end":{"line":3,"column":71}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":37}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":41}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":37}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":35}}},"fnMap":{"0":{"name":"__export","decl":{"start":{"line":2,"column":9},"end":{"line":2,"column":17}},"loc":{"start":{"line":2,"column":21},"end":{"line":4,"column":1}},"line":2}},"branchMap":{"0":{"loc":{"start":{"line":3,"column":21},"end":{"line":3,"column":71}},"type":"if","locations":[{"start":{"line":3,"column":21},"end":{"line":3,"column":71}},{"start":{"line":3,"column":21},"end":{"line":3,"column":71}}],"line":3}},"s":{"0":5,"1":17,"2":17,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1},"f":{"0":5},"b":{"0":[17,0]},"inputSourceMap":{"version":3,"file":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/index.ts","sources":["/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/index.ts"],"names":[],"mappings":";;;;;AACA,qCAAgC;AAChC,yCAAoC;AACpC,qCAAgC;AAChC,oCAA+B;AAE/B,mCAA8B","sourcesContent":["export * from './assets/metadata';\nexport * from './core/provider';\nexport * from './core/asset-ledger';\nexport * from './core/mutation';\nexport * from './core/gateway';\nexport * from './core/value-ledger';\nexport * from './core/issues';\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c216ad677c0b142b4c9e71f55034e17bfe10f9df","contentHash":"98b58fbe769f221361894ee2b29771f40cb999df9a183aa6ce802a83510f540f"},"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/core/provider.ts":{"path":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/core/provider.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":19},"end":{"line":3,"column":40}},"2":{"start":{"line":5,"column":0},"end":{"line":8,"column":74}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":55}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":55}},"5":{"start":{"line":11,"column":8},"end":{"line":11,"column":16}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":36}},"7":{"start":{"line":13,"column":8},"end":{"line":13,"column":27}},"8":{"start":{"line":14,"column":8},"end":{"line":14,"column":33}},"9":{"start":{"line":15,"column":8},"end":{"line":15,"column":94}},"10":{"start":{"line":16,"column":8},"end":{"line":18,"column":9}},"11":{"start":{"line":17,"column":12},"end":{"line":17,"column":60}},"12":{"start":{"line":21,"column":0},"end":{"line":21,"column":38}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":1},"end":{"line":5,"column":2}},"loc":{"start":{"line":5,"column":26},"end":{"line":8,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":33},"end":{"line":19,"column":5}},"line":10}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":19},"end":{"line":8,"column":72}},"type":"binary-expr","locations":[{"start":{"line":8,"column":19},"end":{"line":8,"column":40}},{"start":{"line":8,"column":45},"end":{"line":8,"column":71}}],"line":8},"1":{"loc":{"start":{"line":15,"column":23},"end":{"line":15,"column":93}},"type":"binary-expr","locations":[{"start":{"line":15,"column":23},"end":{"line":15,"column":48}},{"start":{"line":15,"column":52},"end":{"line":15,"column":93}}],"line":15},"2":{"loc":{"start":{"line":16,"column":8},"end":{"line":18,"column":9}},"type":"if","locations":[{"start":{"line":16,"column":8},"end":{"line":18,"column":9}},{"start":{"line":16,"column":8},"end":{"line":18,"column":9}}],"line":16}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1},"f":{"0":1,"1":0},"b":{"0":[1,1],"1":[0,0],"2":[0,0]},"inputSourceMap":{"version":3,"file":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/core/provider.ts","sources":["/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/core/provider.ts"],"names":[],"mappings":";;AACA,yCAAkC;AAYlC,IAAY,aAGX;AAHD,WAAY,aAAa;IACvB,kDAAiC,CAAA;IACjC,kDAAiC,CAAA;AACnC,CAAC,EAHW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAGxB;AAKD,MAAa,aAAc,SAAQ,KAAK;IAiBtC,YAAmB,KAAoB,EAAE,QAAc;QACrD,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,IAAI,GAAG,eAAe,CAAC;QAC5B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,kBAAQ,CAAC,KAAK,CAAC,IAAI,iCAAiC,KAAK,GAAG,CAAC;QAE5E,IAAI,KAAK,CAAC,iBAAiB,EAAE;YAC3B,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;SACjD;IACH,CAAC;CACF;AA7BD,sCA6BC","sourcesContent":["import { ProviderIssue } from './issues';\nimport messages from './messages';\n\n/**\n * A provider is a connection to a blockchain or other database store.\n */\nexport interface ProviderBase {\n  accountId: string;\n}\n\n/**\n * Provider events.\n */\nexport enum ProviderEvent {\n  ACCOUNT_CHANGE = 'accountChanged',\n  NETWORK_CHANGE = 'networkChanged',\n}\n\n/**\n * Handled system error.\n */\nexport class ProviderError extends Error {\n\n  /**\n   * Specific kind of error.\n   */\n  public issue: ProviderIssue;\n\n  /**\n   * Original error report.\n   */\n  public original: any;\n\n  /**\n   * Class constructor.\n   * @param issue Issue identification.\n   * @param details Original error object.\n   */\n  public constructor(issue: ProviderIssue, original?: any) {\n    super();\n\n    this.name = 'ProviderError';\n    this.issue = issue;\n    this.original = original;\n    this.message = messages[issue] || `GenericProvider error [issue: ${issue}]`;\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"fe1f16cc7437174151c3f4a6d0998b7f5fed6d8c","contentHash":"e72fab46bdeb2c5c465ef3226a3c02629a4e4ec850fa1569af040309bb423c5d"},"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/core/messages.ts":{"path":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/core/messages.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":17},"end":{"line":3,"column":36}},"2":{"start":{"line":4,"column":0},"end":{"line":100,"column":2}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1},"f":{},"b":{},"inputSourceMap":{"version":3,"file":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/core/messages.ts","sources":["/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/core/messages.ts"],"names":[],"mappings":"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","sourcesContent":["import { ProviderIssue } from './issues';\n\nexport default {\n  [ProviderIssue.ACTIONS_ORDER_KIND_NOT_SUPPORTED]: 'Actions order kind not supported.',\n  [ProviderIssue.DYNAMIC_ACTIONS_ORDER_SIGNATURES]: 'Amount of signature not consistent with signers for DYNAMIC_ACTIONS_ORDER kind.',\n  [ProviderIssue.FIXED_ACTIONS_ORDER_SIGNATURES]: 'Amount of signature not consistent with signers for FIXED_ACTIONS_ORDER kind.',\n  [ProviderIssue.SIGNED_DYNAMIC_ACTIONS_ORDER_SIGNATURES]: 'Amount of signature not consistent with signers for SIGNED_DYNAMIC_ACTIONS_ORDER kind.',\n  [ProviderIssue.SIGNED_FIXED_ACTIONS_ORDER_SIGNATURES]: 'Amount of signature not consistent with signers for SIGNED_FIXED_ACTIONS_ORDER kind.',\n  [ProviderIssue.NO_RECEIVER_ID]: 'ReceiverId is not set.',\n  [ProviderIssue.PROXY_KIND_NOT_SUPPORTED]: 'Invalid proxy kind.',\n  [ProviderIssue.SENDER_ID_NOT_A_SIGNER]: 'SenderId is not a signer.',\n  [ProviderIssue.SENDER_ID_AND_RECEIVER_ID_MISSING]: 'Both senderId and receiverId are missing.',\n  [ProviderIssue.ACTION_KIND_NOT_SUPPORTED]: 'Not implemented.',\n  [ProviderIssue.ERC20_APPROVAL_RACE_CONDITION]: 'First set approval to 0. ERC-20 token potential attack.',\n  [ProviderIssue.ERC20_NOT_ENOUGH_BALANCE]: 'Sender does not have sufficient balance.',\n  [ProviderIssue.ERC20_NOT_ENOUGH_ALLOWANCE]: 'You do not have sufficient allowance.',\n  [ProviderIssue.ERC721_ZERO_ADDRESS]: 'Provided address cannot be zero address.',\n  [ProviderIssue.ERC721_NOT_VALID_NFT]: 'Asset with this ID does not exist.',\n  [ProviderIssue.ERC721_NOT_OWNER_OR_OPERATOR]: 'Sender is neither asset owner nor operator.',\n  [ProviderIssue.ERC721_NOT_OWNER_APPROWED_OR_OPERATOR]: 'Sender is neither asset owner, approved nor operator.',\n  [ProviderIssue.ERC721_NOT_ABLE_TO_RECEIVE_NFT]: 'Receiver is not able to safely receive the asset.',\n  [ProviderIssue.ERC721_NFT_ALREADY_EXISTS]: 'Asset with provided ID already exists.',\n  [ProviderIssue.ERC721_METADATA_ZERO_ADDRESS]: 'Provided address cannot be zero address.',\n  [ProviderIssue.ERC721_METADATA_NOT_VALID_NFT]: 'Asset with this ID does not exist.',\n  [ProviderIssue.ERC721_METADATA_NOT_OWNER_OR_OPERATOR]: 'Sender is neither asset owner nor operator.',\n  [ProviderIssue.ERC721_METADATA_NOT_OWNER_APPROWED_OR_OPERATOR]: 'Sender is neither asset owner, approved nor operator.',\n  [ProviderIssue.ERC721_METADATA_NOT_ABLE_TO_RECEIVE_NFT]: 'Receiver is not able to safely receive the asset.',\n  [ProviderIssue.ERC721_METADATA_NFT_ALREADY_EXISTS]: 'Asset with provided ID already exists.',\n  [ProviderIssue.ERC721_ENUMERABLE_ZERO_ADDRESS]: 'Provided address cannot be zero address.',\n  [ProviderIssue.ERC721_ENUMERABLE_NOT_VALID_NFT]: 'Asset with this ID does not exist.',\n  [ProviderIssue.ERC721_ENUMERABLE_NOT_OWNER_OR_OPERATOR]: 'Sender is neither asset owner nor operator.',\n  [ProviderIssue.ERC721_ENUMERABLE_NOT_OWNER_APPROWED_OR_OPERATOR]: 'Sender is neither asset owner, approved nor operator.',\n  [ProviderIssue.ERC721_ENUMERABLE_NOT_ABLE_TO_RECEIVE_NFT]: 'Receiver is not able to safely receive the asset.',\n  [ProviderIssue.ERC721_ENUMERABLE_NFT_ALREADY_EXISTS]: 'Asset with provided ID already exists.',\n  [ProviderIssue.ERC721_ENUMERABLE_INVALID_INDEX]: 'There is no asset at provided index.',\n  [ProviderIssue.ERC721_METADATA_ENUMERABLE_ZERO_ADDRESS]: 'Provided address cannot be zero address.',\n  [ProviderIssue.ERC721_METADATA_ENUMERABLE_NOT_VALID_NFT]: 'Asset with this ID does not exist.',\n  [ProviderIssue.ERC721_METADATA_ENUMERABLE_NOT_OWNER_OR_OPERATOR]: 'Sender is neither asset owner nor operator.',\n  [ProviderIssue.ERC721_METADATA_ENUMERABLE_NOT_OWNER_APPROWED_OR_OPERATOR]: 'Sender is neither asset owner, approved nor operator.',\n  [ProviderIssue.ERC721_METADATA_ENUMERABLE_NOT_ABLE_TO_RECEIVE_NFT]: 'Receiver is not able to safely receive the asset.',\n  [ProviderIssue.ERC721_METADATA_ENUMERABLE_NFT_ALREADY_EXISTS]: 'Asset with provided ID already exists.',\n  [ProviderIssue.ERC721_METADATA_ENUMERABLE_INVALID_INDEX]: 'There is no asset at provided index.',\n  [ProviderIssue.XCERT_CAPABILITY_NOT_SUPPORTED]: 'Asset ledger does not have capability for this action.',\n  [ProviderIssue.XCERT_TRANSFERS_DISABLED]: 'Transfers on this asset ledger are currently disabled.',\n  [ProviderIssue.XCERT_NOT_VALID_XCERT]: 'Asset with this ID does not exist.',\n  [ProviderIssue.XCERT_NOT_OWNER_OR_OPERATOR]: 'Sender is neither asset owner nor operator.',\n  [ProviderIssue.XCERT_INVALID_SIGNATURE]: 'Provided signature is invalid.',\n  [ProviderIssue.XCERT_INVALID_SIGNATURE_KIND]: 'Provided signature kind is invalid.',\n  [ProviderIssue.XCERT_CLAIM_PERFORMED]: 'This order was already performed.',\n  [ProviderIssue.XCERT_CLAIM_EXPIRED]: 'This order has expired.',\n  [ProviderIssue.XCERT_CLAIM_CANCELED]: 'This order was canceled.',\n  [ProviderIssue.XCERT_NOT_OWNER]: 'You are not the owner of the order.',\n  [ProviderIssue.SAFE_MATH_OVERFLOW]: 'This action caused a math error: overflow.',\n  [ProviderIssue.SAFE_MATH_SUBTRAHEND_GREATER_THEN_MINUEND]: 'This action caused a math error: subtrahend is greater than minuend.',\n  [ProviderIssue.SAFE_MATH_DIVISION_BY_ZERO]: 'This action caused a math error: division by zero.',\n  [ProviderIssue.XCERT_DEPLOY_GATEWAY_INVALID_SIGNATURE_KIND]: 'Provided signature kind is invalid.',\n  [ProviderIssue.XCERT_DEPLOY_GATEWAY_TAKER_NOT_EQUAL_TO_SENDER]: 'Sender is not allowed to execute this order.',\n  [ProviderIssue.XCERT_DEPLOY_GATEWAY_CLAIM_EXPIRED]: 'This order has expired.',\n  [ProviderIssue.XCERT_DEPLOY_GATEWAY_INVALID_SIGNATURE]: 'Provided signature is invalid.',\n  [ProviderIssue.XCERT_DEPLOY_GATEWAY_DEPLOY_CANCELED]: 'This order was canceled.',\n  [ProviderIssue.XCERT_DEPLOY_GATEWAY_DEPLOY_ALREADY_PERFORMED]: 'This order was already performed.',\n  [ProviderIssue.XCERT_DEPLOY_GATEWAY_MAKER_NOT_EQUAL_TO_SENDER]: 'Sender is not the creator of this order.',\n  [ProviderIssue.DAPP_TOKEN_NOT_ENOUGH_BALANCE]: 'Sender does not have sufficient balance.',\n  [ProviderIssue.DAPP_TOKEN_NOT_ENOUGH_ALLOWANCE]: 'You do not have sufficient allowance.',\n  [ProviderIssue.DAPP_TOKEN_NOT_WHITELISTED_ADDRESS]: 'Tokens cannot be sent to this recipient. Recipients are limited.',\n  [ProviderIssue.DAPP_TOKEN_NOT_MIGRATION_NOT_STARTED]: 'Migration is not in progress.',\n  [ProviderIssue.DAPP_TOKEN_MIGRATION_STARTED]: 'Migration is in progress.',\n  [ProviderIssue.DAPP_TOKEN_NOT_ABLE_TO_MIGRATE]: 'Migration cannot be performed. Please notify token owner.',\n  [ProviderIssue.DAPP_TOKEN_INVALID_SIGNATURE]: 'Provided signature is invalid.',\n  [ProviderIssue.DAPP_TOKEN_CLAIM_PERFORMED]: 'This order was already performed.',\n  [ProviderIssue.DAPP_TOKEN_CLAIM_EXPIRED]: 'This order has expired.',\n  [ProviderIssue.DAPP_TOKEN_INVALID_SIGNATURE_KIND]: 'Provided signature kind is invalid.',\n  [ProviderIssue.DAPP_TOKEN_CLAIM_CANCELED]: 'This order was canceled.',\n  [ProviderIssue.ERC20_DEPLOY_GATEWAY_INVALID_SIGNATURE_KIND]: 'Provided signature kind is invalid.',\n  [ProviderIssue.ERC20_DEPLOY_GATEWAY_TAKER_NOT_EQUAL_TO_SENDER]: 'Sender is not allowed to execute this order.',\n  [ProviderIssue.ERC20_DEPLOY_GATEWAY_CLAIM_EXPIRED]: 'This order has expired.',\n  [ProviderIssue.ERC20_DEPLOY_GATEWAY_INVALID_SIGNATURE]: 'Provided signature is invalid.',\n  [ProviderIssue.ERC20_DEPLOY_GATEWAY_DEPLOY_CANCELED]: 'This order was canceled.',\n  [ProviderIssue.ERC20_DEPLOY_GATEWAY_DEPLOY_ALREADY_PERFORMED]: 'This order was already performed.',\n  [ProviderIssue.ERC20_DEPLOY_GATEWAY_MAKER_NOT_EQUAL_TO_SENDER]: 'Sender is not the creator of this order.',\n  [ProviderIssue.ERC20_TRANSFER_PROXY_TRANSFER_FAILED]: 'Transfer failed.',\n  [ProviderIssue.ACTIONS_GATEWAY_INVALID_SIGNATURE_KIND]: 'Provided signature kind is invalid.',\n  [ProviderIssue.ACTIONS_GATEWAY_INVALID_PROXY]: 'Invalid proxy.',\n  [ProviderIssue.ACTIONS_GATEWAY_SENDER_NOT_A_SIGNER]: 'Sender is not one of the signers.',\n  [ProviderIssue.ACTIONS_GATEWAY_CLAIM_EXPIRED]: 'This order has expired.',\n  [ProviderIssue.ACTIONS_GATEWAY_INVALID_SIGNATURE]: 'Provided signature is invalid.',\n  [ProviderIssue.ACTIONS_GATEWAY_ORDER_CANCELED]: 'This order was canceled.',\n  [ProviderIssue.ACTIONS_GATEWAY_ORDER_ALREADY_PERFORMED]: 'This order was already performed.',\n  [ProviderIssue.ACTIONS_GATEWAY_SIGNERS_DOES_NOT_INCLUDE_SENDER]: 'Sender is not one of the signers.',\n  [ProviderIssue.SIGNER_DOES_NOT_HAVE_ALLOW_CREATE_ASSET_ABILITY]: 'Signer of CREATE_ASSET action does not have ALLOW_CREATE_ASSET ability.',\n  [ProviderIssue.SIGNER_DOES_NOT_HAVE_ALLOW_UPDATE_ASSET_ABILITY]: 'Signer of UPDATE_ASSET action does not have ALLOW_UPDATE_ASSET ability.',\n  [ProviderIssue.SIGNER_DOES_NOT_HAVE_ALLOW_MANAGE_ABILITIES_ABILITY]: 'Signer of SET_ASSET_LEDGER_ABILITY action does not have ALLOW_MANAGE_ABILITIES ability.',\n  [ProviderIssue.SIGNER_IS_NOT_DESTROY_ASSET_OWNER]: 'Signer of DESTROY_ASSET action is not the asset owner.',\n  [ProviderIssue.ABILITABLE_NOT_AUTHORIZED]: 'Sender does not have specified ability.',\n  [ProviderIssue.ABILITABLE_INVALID_INPUT]: 'Ability 0 is not a valid ability.',\n  [ProviderIssue.OWNABLE_NOT_OWNER]: 'Sender is not an owner.',\n  [ProviderIssue.OWNABLE_ZERO_ADDRESS]: 'Provided address cannot be zero address.',\n  [ProviderIssue.CLAIMABLE_NOT_PENDING_OWNER]: 'Sender cannot claim ownership.',\n};\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"17100b9df7d90a4a59447c27779fd368ed294fd8","contentHash":"0b9ac5f81fab1161dafa3e98fec5cd4a83c17542ad862cd9473b3695500e0f5f"},"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/core/issues.ts":{"path":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/core/issues.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":4,"column":0},"end":{"line":102,"column":74}},"2":{"start":{"line":5,"column":4},"end":{"line":5,"column":35}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":42}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":66}},"5":{"start":{"line":8,"column":4},"end":{"line":8,"column":66}},"6":{"start":{"line":9,"column":4},"end":{"line":9,"column":64}},"7":{"start":{"line":10,"column":4},"end":{"line":10,"column":73}},"8":{"start":{"line":11,"column":4},"end":{"line":11,"column":71}},"9":{"start":{"line":12,"column":4},"end":{"line":12,"column":48}},"10":{"start":{"line":13,"column":4},"end":{"line":13,"column":58}},"11":{"start":{"line":14,"column":4},"end":{"line":14,"column":56}},"12":{"start":{"line":15,"column":4},"end":{"line":15,"column":67}},"13":{"start":{"line":16,"column":4},"end":{"line":16,"column":59}},"14":{"start":{"line":17,"column":4},"end":{"line":17,"column":63}},"15":{"start":{"line":18,"column":4},"end":{"line":18,"column":57}},"16":{"start":{"line":19,"column":4},"end":{"line":19,"column":59}},"17":{"start":{"line":20,"column":4},"end":{"line":20,"column":52}},"18":{"start":{"line":21,"column":4},"end":{"line":21,"column":53}},"19":{"start":{"line":22,"column":4},"end":{"line":22,"column":61}},"20":{"start":{"line":23,"column":4},"end":{"line":23,"column":70}},"21":{"start":{"line":24,"column":4},"end":{"line":24,"column":63}},"22":{"start":{"line":25,"column":4},"end":{"line":25,"column":58}},"23":{"start":{"line":26,"column":4},"end":{"line":26,"column":61}},"24":{"start":{"line":27,"column":4},"end":{"line":27,"column":62}},"25":{"start":{"line":28,"column":4},"end":{"line":28,"column":70}},"26":{"start":{"line":29,"column":4},"end":{"line":29,"column":79}},"27":{"start":{"line":30,"column":4},"end":{"line":30,"column":72}},"28":{"start":{"line":31,"column":4},"end":{"line":31,"column":67}},"29":{"start":{"line":32,"column":4},"end":{"line":32,"column":63}},"30":{"start":{"line":33,"column":4},"end":{"line":33,"column":64}},"31":{"start":{"line":34,"column":4},"end":{"line":34,"column":72}},"32":{"start":{"line":35,"column":4},"end":{"line":35,"column":81}},"33":{"start":{"line":36,"column":4},"end":{"line":36,"column":74}},"34":{"start":{"line":37,"column":4},"end":{"line":37,"column":69}},"35":{"start":{"line":38,"column":4},"end":{"line":38,"column":64}},"36":{"start":{"line":39,"column":4},"end":{"line":39,"column":72}},"37":{"start":{"line":40,"column":4},"end":{"line":40,"column":73}},"38":{"start":{"line":41,"column":4},"end":{"line":41,"column":81}},"39":{"start":{"line":42,"column":4},"end":{"line":42,"column":90}},"40":{"start":{"line":43,"column":4},"end":{"line":43,"column":83}},"41":{"start":{"line":44,"column":4},"end":{"line":44,"column":78}},"42":{"start":{"line":45,"column":4},"end":{"line":45,"column":73}},"43":{"start":{"line":46,"column":4},"end":{"line":46,"column":63}},"44":{"start":{"line":47,"column":4},"end":{"line":47,"column":57}},"45":{"start":{"line":48,"column":4},"end":{"line":48,"column":54}},"46":{"start":{"line":49,"column":4},"end":{"line":49,"column":60}},"47":{"start":{"line":50,"column":4},"end":{"line":50,"column":56}},"48":{"start":{"line":51,"column":4},"end":{"line":51,"column":61}},"49":{"start":{"line":52,"column":4},"end":{"line":52,"column":54}},"50":{"start":{"line":53,"column":4},"end":{"line":53,"column":52}},"51":{"start":{"line":54,"column":4},"end":{"line":54,"column":53}},"52":{"start":{"line":55,"column":4},"end":{"line":55,"column":48}},"53":{"start":{"line":56,"column":4},"end":{"line":56,"column":51}},"54":{"start":{"line":57,"column":4},"end":{"line":57,"column":74}},"55":{"start":{"line":58,"column":4},"end":{"line":58,"column":59}},"56":{"start":{"line":59,"column":4},"end":{"line":59,"column":76}},"57":{"start":{"line":60,"column":4},"end":{"line":60,"column":79}},"58":{"start":{"line":61,"column":4},"end":{"line":61,"column":67}},"59":{"start":{"line":62,"column":4},"end":{"line":62,"column":71}},"60":{"start":{"line":63,"column":4},"end":{"line":63,"column":69}},"61":{"start":{"line":64,"column":4},"end":{"line":64,"column":78}},"62":{"start":{"line":65,"column":4},"end":{"line":65,"column":79}},"63":{"start":{"line":66,"column":4},"end":{"line":66,"column":62}},"64":{"start":{"line":67,"column":4},"end":{"line":67,"column":64}},"65":{"start":{"line":68,"column":4},"end":{"line":68,"column":67}},"66":{"start":{"line":69,"column":4},"end":{"line":69,"column":69}},"67":{"start":{"line":70,"column":4},"end":{"line":70,"column":61}},"68":{"start":{"line":71,"column":4},"end":{"line":71,"column":63}},"69":{"start":{"line":72,"column":4},"end":{"line":72,"column":61}},"70":{"start":{"line":73,"column":4},"end":{"line":73,"column":59}},"71":{"start":{"line":74,"column":4},"end":{"line":74,"column":57}},"72":{"start":{"line":75,"column":4},"end":{"line":75,"column":66}},"73":{"start":{"line":76,"column":4},"end":{"line":76,"column":58}},"74":{"start":{"line":77,"column":4},"end":{"line":77,"column":76}},"75":{"start":{"line":78,"column":4},"end":{"line":78,"column":79}},"76":{"start":{"line":79,"column":4},"end":{"line":79,"column":67}},"77":{"start":{"line":80,"column":4},"end":{"line":80,"column":71}},"78":{"start":{"line":81,"column":4},"end":{"line":81,"column":69}},"79":{"start":{"line":82,"column":4},"end":{"line":82,"column":78}},"80":{"start":{"line":83,"column":4},"end":{"line":83,"column":79}},"81":{"start":{"line":84,"column":4},"end":{"line":84,"column":69}},"82":{"start":{"line":85,"column":4},"end":{"line":85,"column":71}},"83":{"start":{"line":86,"column":4},"end":{"line":86,"column":62}},"84":{"start":{"line":87,"column":4},"end":{"line":87,"column":68}},"85":{"start":{"line":88,"column":4},"end":{"line":88,"column":62}},"86":{"start":{"line":89,"column":4},"end":{"line":89,"column":66}},"87":{"start":{"line":90,"column":4},"end":{"line":90,"column":63}},"88":{"start":{"line":91,"column":4},"end":{"line":91,"column":72}},"89":{"start":{"line":92,"column":4},"end":{"line":92,"column":80}},"90":{"start":{"line":93,"column":4},"end":{"line":93,"column":80}},"91":{"start":{"line":94,"column":4},"end":{"line":94,"column":80}},"92":{"start":{"line":95,"column":4},"end":{"line":95,"column":84}},"93":{"start":{"line":96,"column":4},"end":{"line":96,"column":66}},"94":{"start":{"line":97,"column":4},"end":{"line":97,"column":58}},"95":{"start":{"line":98,"column":4},"end":{"line":98,"column":57}},"96":{"start":{"line":99,"column":4},"end":{"line":99,"column":50}},"97":{"start":{"line":100,"column":4},"end":{"line":100,"column":53}},"98":{"start":{"line":101,"column":4},"end":{"line":101,"column":60}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":1},"end":{"line":4,"column":2}},"loc":{"start":{"line":4,"column":26},"end":{"line":102,"column":1}},"line":4}},"branchMap":{"0":{"loc":{"start":{"line":102,"column":19},"end":{"line":102,"column":72}},"type":"binary-expr","locations":[{"start":{"line":102,"column":19},"end":{"line":102,"column":40}},{"start":{"line":102,"column":45},"end":{"line":102,"column":71}}],"line":102}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1,"97":1,"98":1},"f":{"0":1},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/core/issues.ts","sources":["/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/core/issues.ts"],"names":[],"mappings":";;AAGA,IAAY,aAsHX;AAtHD,WAAY,aAAa;IAEvB,8BAAa,CAAA;IACb,qCAAoB,CAAA;IAGpB,6DAA4C,CAAA;IAC5C,6DAA4C,CAAA;IAC5C,2DAA0C,CAAA;IAC1C,oEAAmD,CAAA;IACnD,kEAAiD,CAAA;IACjD,2CAA0B,CAAA;IAC1B,qDAAoC,CAAA;IACpC,mDAAkC,CAAA;IAClC,8DAA6C,CAAA;IAC7C,sDAAqC,CAAA;IACrC,0DAAyC,CAAA;IAIzC,oDAAmC,CAAA;IACnC,sDAAqC,CAAA;IAErC,+CAA8B,CAAA;IAC9B,gDAA+B,CAAA;IAC/B,wDAAuC,CAAA;IACvC,iEAAgD,CAAA;IAChD,0DAAyC,CAAA;IACzC,qDAAoC,CAAA;IAEpC,wDAAuC,CAAA;IACvC,yDAAwC,CAAA;IACxC,iEAAgD,CAAA;IAChD,0EAAyD,CAAA;IACzD,mEAAkD,CAAA;IAClD,8DAA6C,CAAA;IAE7C,0DAAyC,CAAA;IACzC,2DAA0C,CAAA;IAC1C,mEAAkD,CAAA;IAClD,4EAA2D,CAAA;IAC3D,qEAAoD,CAAA;IACpD,gEAA+C,CAAA;IAC/C,2DAA0C,CAAA;IAE1C,mEAAkD,CAAA;IAClD,oEAAmD,CAAA;IACnD,4EAA2D,CAAA;IAC3D,qFAAoE,CAAA;IACpE,8EAA6D,CAAA;IAC7D,yEAAwD,CAAA;IACxD,oEAAmD,CAAA;IAEnD,0DAAyC,CAAA;IACzC,oDAAmC,CAAA;IACnC,iDAAgC,CAAA;IAChC,uDAAsC,CAAA;IACtC,mDAAkC,CAAA;IAClC,wDAAuC,CAAA;IACvC,iDAAgC,CAAA;IAChC,+CAA8B,CAAA;IAC9B,gDAA+B,CAAA;IAC/B,2CAA0B,CAAA;IAE1B,8CAA6B,CAAA;IAC7B,qEAAoD,CAAA;IACpD,sDAAqC,CAAA;IAErC,uEAAsD,CAAA;IACtD,0EAAyD,CAAA;IACzD,8DAA6C,CAAA;IAC7C,kEAAiD,CAAA;IACjD,gEAA+C,CAAA;IAC/C,yEAAwD,CAAA;IACxD,0EAAyD,CAAA;IAEzD,yDAAwC,CAAA;IACxC,2DAA0C,CAAA;IAC1C,8DAA6C,CAAA;IAC7C,gEAA+C,CAAA;IAC/C,wDAAsC,CAAA;IACtC,0DAAyC,CAAA;IACzC,wDAAuC,CAAA;IACvC,sDAAqC,CAAA;IACrC,oDAAmC,CAAA;IACnC,6DAA4C,CAAA;IAC5C,qDAAoC,CAAA;IAEpC,uEAAsD,CAAA;IACtD,0EAAyD,CAAA;IACzD,8DAA6C,CAAA;IAC7C,kEAAiD,CAAA;IACjD,gEAA+C,CAAA;IAC/C,yEAAwD,CAAA;IACxD,0EAAyD,CAAA;IAEzD,gEAA+C,CAAA;IAE/C,kEAAiD,CAAA;IACjD,yDAAwC,CAAA;IACxC,+DAA8C,CAAA;IAC9C,yDAAwC,CAAA;IACxC,6DAA4C,CAAA;IAC5C,0DAAyC,CAAA;IACzC,mEAAkD,CAAA;IAClD,2EAA0D,CAAA;IAC1D,2EAA0D,CAAA;IAC1D,2EAA0D,CAAA;IAC1D,+EAA8D,CAAA;IAC9D,6DAA4C,CAAA;IAE5C,qDAAoC,CAAA;IACpC,oDAAmC,CAAA;IAEnC,6CAA4B,CAAA;IAC5B,gDAA+B,CAAA;IAE/B,uDAAsC,CAAA;AACxC,CAAC,EAtHW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAsHxB","sourcesContent":["/**\n * Error codes.\n */\nexport enum ProviderIssue {\n  // General errors.\n  GENERAL = '0',\n  CONTRACT_ERROR = '1',\n\n  // Framework errors.\n  ACTIONS_ORDER_KIND_NOT_SUPPORTED = '5000001',\n  DYNAMIC_ACTIONS_ORDER_SIGNATURES = '5000002',\n  FIXED_ACTIONS_ORDER_SIGNATURES = '5000003',\n  SIGNED_DYNAMIC_ACTIONS_ORDER_SIGNATURES = '5000004',\n  SIGNED_FIXED_ACTIONS_ORDER_SIGNATURES = '5000005',\n  NO_RECEIVER_ID = '5000006',\n  PROXY_KIND_NOT_SUPPORTED = '5000007',\n  SENDER_ID_NOT_A_SIGNER = '5000008',\n  SENDER_ID_AND_RECEIVER_ID_MISSING = '5000009',\n  ACTION_KIND_NOT_SUPPORTED = '5000010',\n  ERC20_APPROVAL_RACE_CONDITION = '5000011',\n\n  // Smart contract errors.\n  // ERC 20 contract errors.\n  ERC20_NOT_ENOUGH_BALANCE = '001001',\n  ERC20_NOT_ENOUGH_ALLOWANCE = '001002',\n  // ERC721 contract errors.\n  ERC721_ZERO_ADDRESS = '003001',\n  ERC721_NOT_VALID_NFT = '003002',\n  ERC721_NOT_OWNER_OR_OPERATOR = '003003',\n  ERC721_NOT_OWNER_APPROWED_OR_OPERATOR = '003004',\n  ERC721_NOT_ABLE_TO_RECEIVE_NFT = '003005',\n  ERC721_NFT_ALREADY_EXISTS = '003006',\n  // ERC721 metadata contract errors.\n  ERC721_METADATA_ZERO_ADDRESS = '004001',\n  ERC721_METADATA_NOT_VALID_NFT = '004002',\n  ERC721_METADATA_NOT_OWNER_OR_OPERATOR = '004003',\n  ERC721_METADATA_NOT_OWNER_APPROWED_OR_OPERATOR = '004004',\n  ERC721_METADATA_NOT_ABLE_TO_RECEIVE_NFT = '004005',\n  ERC721_METADATA_NFT_ALREADY_EXISTS = '004006',\n  // ERC721 enumerable contract errors.\n  ERC721_ENUMERABLE_ZERO_ADDRESS = '005001',\n  ERC721_ENUMERABLE_NOT_VALID_NFT = '005002',\n  ERC721_ENUMERABLE_NOT_OWNER_OR_OPERATOR = '005003',\n  ERC721_ENUMERABLE_NOT_OWNER_APPROWED_OR_OPERATOR = '005004',\n  ERC721_ENUMERABLE_NOT_ABLE_TO_RECEIVE_NFT = '005005',\n  ERC721_ENUMERABLE_NFT_ALREADY_EXISTS = '005006',\n  ERC721_ENUMERABLE_INVALID_INDEX = '005007',\n  // ERC721 metadata enumerable contract errors.\n  ERC721_METADATA_ENUMERABLE_ZERO_ADDRESS = '006001',\n  ERC721_METADATA_ENUMERABLE_NOT_VALID_NFT = '006002',\n  ERC721_METADATA_ENUMERABLE_NOT_OWNER_OR_OPERATOR = '006003',\n  ERC721_METADATA_ENUMERABLE_NOT_OWNER_APPROWED_OR_OPERATOR = '006004',\n  ERC721_METADATA_ENUMERABLE_NOT_ABLE_TO_RECEIVE_NFT = '006005',\n  ERC721_METADATA_ENUMERABLE_NFT_ALREADY_EXISTS = '006006',\n  ERC721_METADATA_ENUMERABLE_INVALID_INDEX = '006007',\n  // Xcert contract errors.\n  XCERT_CAPABILITY_NOT_SUPPORTED = '007001',\n  XCERT_TRANSFERS_DISABLED = '007002',\n  XCERT_NOT_VALID_XCERT = '007003',\n  XCERT_NOT_OWNER_OR_OPERATOR = '007004',\n  XCERT_INVALID_SIGNATURE = '007005',\n  XCERT_INVALID_SIGNATURE_KIND = '007006',\n  XCERT_CLAIM_PERFORMED = '007007',\n  XCERT_CLAIM_EXPIRED = '007008',\n  XCERT_CLAIM_CANCELED = '007009',\n  XCERT_NOT_OWNER = '007010',\n  // Safe math lib errors.\n  SAFE_MATH_OVERFLOW = '008001',\n  SAFE_MATH_SUBTRAHEND_GREATER_THEN_MINUEND = '008002',\n  SAFE_MATH_DIVISION_BY_ZERO = '008003',\n  // Xcert deploy gateway contract errors.\n  XCERT_DEPLOY_GATEWAY_INVALID_SIGNATURE_KIND = '009001',\n  XCERT_DEPLOY_GATEWAY_TAKER_NOT_EQUAL_TO_SENDER = '009002',\n  XCERT_DEPLOY_GATEWAY_CLAIM_EXPIRED = '009003',\n  XCERT_DEPLOY_GATEWAY_INVALID_SIGNATURE = '009004',\n  XCERT_DEPLOY_GATEWAY_DEPLOY_CANCELED = '009005',\n  XCERT_DEPLOY_GATEWAY_DEPLOY_ALREADY_PERFORMED = '009006',\n  XCERT_DEPLOY_GATEWAY_MAKER_NOT_EQUAL_TO_SENDER = '009007',\n  // Dapp token contract errors.\n  DAPP_TOKEN_NOT_ENOUGH_BALANCE = '010001',\n  DAPP_TOKEN_NOT_ENOUGH_ALLOWANCE = '010002',\n  DAPP_TOKEN_NOT_WHITELISTED_ADDRESS = '010003',\n  DAPP_TOKEN_NOT_MIGRATION_NOT_STARTED = '010004',\n  DAPP_TOKEN_MIGRATION_STARTED= '010005',\n  DAPP_TOKEN_NOT_ABLE_TO_MIGRATE = '010006',\n  DAPP_TOKEN_INVALID_SIGNATURE = '010007',\n  DAPP_TOKEN_CLAIM_PERFORMED = '010008',\n  DAPP_TOKEN_CLAIM_EXPIRED = '010009',\n  DAPP_TOKEN_INVALID_SIGNATURE_KIND = '010010',\n  DAPP_TOKEN_CLAIM_CANCELED = '010011',\n  // ERC20 deploy gateway contract errors.\n  ERC20_DEPLOY_GATEWAY_INVALID_SIGNATURE_KIND = '011001',\n  ERC20_DEPLOY_GATEWAY_TAKER_NOT_EQUAL_TO_SENDER = '011002',\n  ERC20_DEPLOY_GATEWAY_CLAIM_EXPIRED = '011003',\n  ERC20_DEPLOY_GATEWAY_INVALID_SIGNATURE = '011004',\n  ERC20_DEPLOY_GATEWAY_DEPLOY_CANCELED = '011005',\n  ERC20_DEPLOY_GATEWAY_DEPLOY_ALREADY_PERFORMED = '011006',\n  ERC20_DEPLOY_GATEWAY_MAKER_NOT_EQUAL_TO_SENDER = '011007',\n  // Token transfer proxy contract errors.\n  ERC20_TRANSFER_PROXY_TRANSFER_FAILED = '012001',\n  // Actions gateway contract errors.\n  ACTIONS_GATEWAY_INVALID_SIGNATURE_KIND = '015001',\n  ACTIONS_GATEWAY_INVALID_PROXY = '015002',\n  ACTIONS_GATEWAY_SENDER_NOT_A_SIGNER = '015003',\n  ACTIONS_GATEWAY_CLAIM_EXPIRED = '015004',\n  ACTIONS_GATEWAY_INVALID_SIGNATURE = '015005',\n  ACTIONS_GATEWAY_ORDER_CANCELED = '015006',\n  ACTIONS_GATEWAY_ORDER_ALREADY_PERFORMED = '015007',\n  ACTIONS_GATEWAY_SIGNERS_DOES_NOT_INCLUDE_SENDER = '015008',\n  SIGNER_DOES_NOT_HAVE_ALLOW_CREATE_ASSET_ABILITY = '015009',\n  SIGNER_DOES_NOT_HAVE_ALLOW_UPDATE_ASSET_ABILITY = '015010',\n  SIGNER_DOES_NOT_HAVE_ALLOW_MANAGE_ABILITIES_ABILITY = '015011',\n  SIGNER_IS_NOT_DESTROY_ASSET_OWNER = '015012',\n  // Abilitable contract errors.\n  ABILITABLE_NOT_AUTHORIZED = '017001',\n  ABILITABLE_INVALID_INPUT = '017002',\n  // Ownable contract errors.\n  OWNABLE_NOT_OWNER = '018001',\n  OWNABLE_ZERO_ADDRESS = '018002',\n  // Claimable contract errors.\n  CLAIMABLE_NOT_PENDING_OWNER = '019001',\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"42df9b5dbcfeac9d378494301b26a140951377cf","contentHash":"4e68715f4862b94d1bba1da6c559808d5f605c463f48699de577fca64616679a"},"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/core/asset-ledger.ts":{"path":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/core/asset-ledger.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":4,"column":0},"end":{"line":12,"column":110}},"2":{"start":{"line":5,"column":4},"end":{"line":5,"column":95}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":95}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":103}},"5":{"start":{"line":8,"column":4},"end":{"line":8,"column":96}},"6":{"start":{"line":9,"column":4},"end":{"line":9,"column":102}},"7":{"start":{"line":10,"column":4},"end":{"line":10,"column":108}},"8":{"start":{"line":11,"column":4},"end":{"line":11,"column":125}},"9":{"start":{"line":14,"column":0},"end":{"line":17,"column":104}},"10":{"start":{"line":15,"column":4},"end":{"line":15,"column":98}},"11":{"start":{"line":16,"column":4},"end":{"line":16,"column":110}},"12":{"start":{"line":19,"column":0},"end":{"line":24,"column":98}},"13":{"start":{"line":20,"column":4},"end":{"line":20,"column":88}},"14":{"start":{"line":21,"column":4},"end":{"line":21,"column":86}},"15":{"start":{"line":22,"column":4},"end":{"line":22,"column":86}},"16":{"start":{"line":23,"column":4},"end":{"line":23,"column":94}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":1},"end":{"line":4,"column":2}},"loc":{"start":{"line":4,"column":38},"end":{"line":12,"column":1}},"line":4},"1":{"name":"(anonymous_1)","decl":{"start":{"line":14,"column":1},"end":{"line":14,"column":2}},"loc":{"start":{"line":14,"column":36},"end":{"line":17,"column":1}},"line":14},"2":{"name":"(anonymous_2)","decl":{"start":{"line":19,"column":1},"end":{"line":19,"column":2}},"loc":{"start":{"line":19,"column":34},"end":{"line":24,"column":1}},"line":19}},"branchMap":{"0":{"loc":{"start":{"line":12,"column":31},"end":{"line":12,"column":108}},"type":"binary-expr","locations":[{"start":{"line":12,"column":31},"end":{"line":12,"column":64}},{"start":{"line":12,"column":69},"end":{"line":12,"column":107}}],"line":12},"1":{"loc":{"start":{"line":17,"column":29},"end":{"line":17,"column":102}},"type":"binary-expr","locations":[{"start":{"line":17,"column":29},"end":{"line":17,"column":60}},{"start":{"line":17,"column":65},"end":{"line":17,"column":101}}],"line":17},"2":{"loc":{"start":{"line":24,"column":27},"end":{"line":24,"column":96}},"type":"binary-expr","locations":[{"start":{"line":24,"column":27},"end":{"line":24,"column":56}},{"start":{"line":24,"column":61},"end":{"line":24,"column":95}}],"line":24}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1},"f":{"0":1,"1":1,"2":1},"b":{"0":[1,1],"1":[1,1],"2":[1,1]},"inputSourceMap":{"version":3,"file":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/core/asset-ledger.ts","sources":["/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/core/asset-ledger.ts"],"names":[],"mappings":";;AASA,IAAY,yBAQX;AARD,WAAY,yBAAyB;IACnC,0FAAiB,CAAA;IACjB,0FAAiB,CAAA;IACjB,kGAAqB,CAAA;IACrB,2FAAkB,CAAA;IAClB,iGAAqB,CAAA;IACrB,uGAAwB,CAAA;IACxB,wHAAiC,CAAA;AACnC,CAAC,EARW,yBAAyB,GAAzB,iCAAyB,KAAzB,iCAAyB,QAQpC;AAMD,IAAY,uBAGX;AAHD,WAAY,uBAAuB;IACjC,6FAAoB,CAAA;IACpB,yGAA0B,CAAA;AAC5B,CAAC,EAHW,uBAAuB,GAAvB,+BAAuB,KAAvB,+BAAuB,QAGlC;AAKD,IAAY,qBAKX;AALD,WAAY,qBAAqB;IAC/B,mFAAiB,CAAA;IACjB,iFAAgB,CAAA;IAChB,iFAAgB,CAAA;IAChB,yFAAoB,CAAA;AACtB,CAAC,EALW,qBAAqB,GAArB,6BAAqB,KAArB,6BAAqB,QAKhC","sourcesContent":["import { GatewayBase } from './gateway';\nimport { MutationBase } from './mutation';\n\nexport type AssetLedgerAbility = SuperAssetLedgerAbility | GeneralAssetLedgerAbility;\n\n/**\n * List of available general abilities an account can have per asset ledger. General abilities are\n * abilities that can not change other account's abilities.\n */\nexport enum GeneralAssetLedgerAbility {\n  CREATE_ASSET = 16,\n  REVOKE_ASSET = 32,\n  TOGGLE_TRANSFERS = 64,\n  UPDATE_ASSET = 128,\n  UPDATE_URI_BASE = 256,\n  ALLOW_CREATE_ASSET = 512,\n  ALLOW_UPDATE_ASSET_IMPRINT = 1024,\n}\n\n/**\n * List of available super abilities an account can have per asset ledger. Super abilities are\n * abilities that can change other account's abilities.\n */\nexport enum SuperAssetLedgerAbility {\n  MANAGE_ABILITIES = 1,\n  ALLOW_MANAGE_ABILITIES = 2,\n}\n\n/**\n * List of available asset ledger capabilities.\n */\nexport enum AssetLedgerCapability {\n  DESTROY_ASSET = 1,\n  UPDATE_ASSET = 2,\n  REVOKE_ASSET = 4,\n  TOGGLE_TRANSFERS = 3,\n}\n\n/**\n * Asset ledger method definitions.\n */\nexport interface AssetLedgerBase {\n\n  /**\n   * AssetLedger Id. Address pointing at the smartcontract.\n   */\n  readonly id: string;\n\n  /**\n   * Approves another account so it can transfer the specific asset.\n   * @param assetId Id of the asset.\n   * @param accountId Id of the account.\n   */\n  approveAccount(assetId: string, accountId: string | GatewayBase): Promise<MutationBase>;\n\n  /**\n   * Approves an account as an operator (meaning he has full controll of all of your assets).\n   * @param accountId Account id.\n   */\n  approveOperator(accountId: string | GatewayBase): Promise<MutationBase>;\n\n  /**\n   * Grants abilities of an account.\n   * @param accountId Id of the account.\n   * @param abilities List of the abilities.\n   */\n  grantAbilities(accountId: string, abilities: AssetLedgerAbility[]): Promise<MutationBase>;\n\n  /**\n   * Creates a new asset.\n   * @param recipe Data from which the new asset is created.\n   */\n  createAsset(recipe: AssetLedgerItemRecipe): Promise<MutationBase>;\n\n  /**\n   * Destoys an existing asset (only asset owner can do this).\n   * @param assetId Id of the asset.\n   */\n  destroyAsset(assetId: string): Promise<MutationBase>;\n\n  /**\n   * Disapproves approved account for a specific asset.\n   * @param assetId Asset id.\n   */\n  disapproveAccount(assetId: string): Promise<MutationBase>;\n\n  /**\n   * Disapproves an account as an operator.\n   * @param accountId Account id.\n   */\n  disapproveOperator(accountId: string | GatewayBase): Promise<MutationBase>;\n\n  /**\n   * Disables transfers of asset on the asset ledger.\n   */\n  disableTransfers(): Promise<MutationBase>;\n\n  /**\n   * Enables transfers of asset on the asset ledger.\n   */\n  enableTransfers(): Promise<MutationBase>;\n\n  /**\n   * Gets a list of abilities an account has for this asset ledger.\n   * @param accountId Account address for wich we want to get abilities.\n   */\n  getAbilities(accountId: string): Promise<AssetLedgerAbility[]>;\n\n  /**\n   * Gets accountId if anyone is approved for this asset.\n   * @param assetId Id of the asset.\n   */\n  getApprovedAccount(assetId: string): Promise<string>;\n\n  /**\n   * Gets information about the asset(id, uri, imprint).\n   * @param assetId Id of the asset.\n   */\n  getAsset(assetId: string): Promise<AssetLedgerItem>;\n\n  /**\n   * Gets the asset owner account ID.\n   * @param assetId Id of the asset.\n   */\n  getAssetAccount(assetId: string): Promise<string>;\n\n  /**\n   * Gets the count of assets an account owns.\n   * @param accountId Address for which we want asset count.\n   */\n  getBalance(accountId: string): Promise<string>;\n\n  /**\n   * Gets a list of all asset ledger capabilities(options).\n   */\n  getCapabilities(): Promise<AssetLedgerCapability[]>;\n\n  /**\n   * Gets information about the asset ledger (name, symbol, uriPrefix, schemaId, supply).\n   */\n  getInfo(): Promise<AssetLedgerInfo>;\n\n  /**\n   * Checks if a specific account is approved for a specific asset.\n   * @param assetId Id of the asset.\n   * @param accountId Id of the account.\n   */\n  isApprovedAccount(assetId: string, accountId: string | GatewayBase): Promise<boolean>;\n\n  /**\n   * Checks if specific account is the operator for specific account.\n   * @param accountId Account id.\n   * @param operatorId Operator account id.\n   */\n  isApprovedOperator(accountId: string, operatorId: string | GatewayBase): Promise<boolean>;\n\n  /**\n   * Checks if transfers on the asset ledger are enabled.\n   */\n  isTransferable(): Promise<boolean>;\n\n  /**\n   * Removes abilities from account.\n   * @param accountId Id of the account.\n   * @param abilities List of the abilities.\n   */\n  revokeAbilities(accountId: string, abilities: AssetLedgerAbility[]): Promise<MutationBase>;\n\n  /**\n   * Destroys an existing asset (only someone with asset ledger revoke ability can do this).\n   * @param assetId If of the asset.\n   */\n  revokeAsset(assetId: string): Promise<MutationBase>;\n\n  /**\n   * Updates asset ledger data.\n   * @param recipe Data to update asset ledger with.\n   */\n  update(recipe: AssetLedgerUpdateRecipe): Promise<MutationBase>;\n\n  /**\n   * Updates data on an existing asset.\n   * @param assetId Id of the asset.\n   * @param recipe Data to update asset with.\n   */\n  updateAsset(assetId: string, recipe: AssetLedgerObjectUpdateRecipe): Promise<MutationBase>;\n\n  /**\n   * Transfers asset to another account.\n   * @param recipe Data needed for the transfer.\n   */\n  transferAsset(recipe: AssetLedgerTransferRecipe): Promise<MutationBase>;\n\n}\n\n/**\n * Asset ledger deploy data definition.\n */\nexport interface AssetLedgerDeployRecipe {\n\n  /**\n   * Asset Ledger name.\n   */\n  name: string;\n\n  /**\n   * Asset Ledger symbol/ticker.\n   */\n  symbol: string;\n\n  /**\n   * Uri prefix for metadata URI-s. At the end of the prefix the assetId is automatically appended for each asset.\n   * Example: https://example.com/id/\n   * Asset 1 URI will become: https://example.com/id/1 + postfix\n   */\n  uriPrefix: string;\n\n  /**\n   * URI postfix for metadata URIs. After uriPrefix and assetId, postfix is automatically appended for each asset..\n   * Example: .json\n   * Asset 1 URI will become: uriPrefix + 1.json\n   */\n  uriPostfix: string;\n\n  /**\n   * Hashed representation of JSON schema defining this object.\n   */\n  schemaId: string;\n\n  /**\n   * Array representing capabilities.\n   */\n  capabilities?: AssetLedgerCapability[];\n}\n\n/**\n * Asset data definition.\n */\nexport interface AssetLedgerItem {\n\n  /**\n   * Unique asset Id.\n   */\n  id: string;\n\n  /**\n   * Uri poiting to the asset metadata (is automatically generated based on baseUri).\n   */\n  uri: string;\n\n  /**\n   * Merkle tree root of asset proof.\n   */\n  imprint: string;\n\n  /**\n   * Hashed representation of JSON schema defining this object.\n   */\n  schemaId: string;\n}\n\n/**\n * Asset ledger data definition.\n */\nexport interface AssetLedgerInfo {\n\n  /**\n   * Asset Ledger name.\n   */\n  name: string;\n\n  /**\n   * Asset Ledger symbol/ticker.\n   */\n  symbol: string;\n\n  /**\n   * Uri prefix for metadata URI-s. At the end of the prefix the assetId is automatically appended for each asset.\n   * Example: https://example.com/id/\n   * Asset 1 URI will become: https://example.com/id/1 + postfix\n   */\n  uriPrefix: string;\n\n  /**\n   * URI postfix for metadata URIs. After uriPrefix and assetId, postfix is automatically appended for each asset..\n   * Example: .json\n   * Asset 1 URI will become: uriPrefix + 1.json\n   */\n  uriPostfix: string;\n\n  /**\n   * Total supply of all assets in this AssetLedger.\n   */\n  supply: string;\n}\n\n/**\n * Asset creation data definition.\n */\nexport interface AssetLedgerItemRecipe {\n\n  /**\n   * Id(address) of the receiver.\n   */\n  receiverId: string;\n\n  /**\n   * Unique asset Id.\n   */\n  id: string;\n\n  /**\n   * Merkle tree root of asset proof.\n   */\n  imprint: string;\n}\n\n/**\n * Asset transfer data definition.\n */\nexport interface AssetLedgerTransferRecipe {\n\n  /**\n   * Id(address) of the sender.\n   */\n  senderId?: string;\n\n  /**\n   * Id(address) of the receiver.\n   */\n  receiverId: string;\n\n  /**\n   * Unique asset Id.\n   */\n  id: string;\n\n  /**\n   * Additional data that will be sent with mutation to the receiver.\n   */\n  data?: string;\n}\n\n/**\n * Asset update data definition.\n */\nexport interface AssetLedgerObjectUpdateRecipe {\n\n  /**\n   * Merkle tree root of asset proof.\n   */\n  imprint: string;\n}\n\n/**\n * Asset ledger update data definition.\n */\nexport interface AssetLedgerUpdateRecipe {\n\n  /**\n   * Uri prefix for metadata URI-s. At the end of the prefix the assetId is automatically appended for each asset.\n   * Example: https://example.com/id/\n   * Asset 1 URI will become: https://example.com/id/1 + postfix\n   */\n  uriPrefix: string;\n\n  /**\n   * URI postfix for metadata URIs. After uriPrefix and assetId, postfix is automatically appended for each asset..\n   * Example: .json\n   * Asset 1 URI will become: uriPrefix + 1.json\n   */\n  uriPostfix: string;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b78b02c3a7331069afa3e5e02a50175cd014f592","contentHash":"f9052577617cacc75485b190e5ca8c2e8fd3f57d81b342503c8893928335310e"},"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/core/mutation.ts":{"path":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/core/mutation.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":4,"column":0},"end":{"line":8,"column":74}},"2":{"start":{"line":5,"column":4},"end":{"line":5,"column":43}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":41}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":37}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":1},"end":{"line":4,"column":2}},"loc":{"start":{"line":4,"column":26},"end":{"line":8,"column":1}},"line":4}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":19},"end":{"line":8,"column":72}},"type":"binary-expr","locations":[{"start":{"line":8,"column":19},"end":{"line":8,"column":40}},{"start":{"line":8,"column":45},"end":{"line":8,"column":71}}],"line":8}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1},"f":{"0":1},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/core/mutation.ts","sources":["/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/core/mutation.ts"],"names":[],"mappings":";;AAKA,IAAY,aAIX;AAJD,WAAY,aAAa;IACvB,sCAAqB,CAAA;IACrB,oCAAmB,CAAA;IACnB,gCAAe,CAAA;AACjB,CAAC,EAJW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAIxB","sourcesContent":["import { AssetLedgerBase, GatewayBase, ValueLedgerBase } from '..';\n\n/**\n * Mutation event kinds.\n */\nexport enum MutationEvent {\n  COMPLETE = 'complete',\n  CONFIRM = 'confirm',\n  ERROR = 'error',\n}\n\n/**\n * Mutation context base.\n */\nexport type MutationContext = AssetLedgerBase | ValueLedgerBase | GatewayBase;\n\n/**\n * Mutation interface.\n */\nexport interface MutationBase {\n\n  /**\n   * Mutation Id (transaction hash).\n   */\n  id: string;\n\n  /**\n   * Number of confirmations (blocks in blockchain after mutation is accepted) are necessary to mark a mutation complete.\n   */\n  confirmations: number;\n\n  /**\n   * Id(address) of the sender.\n   */\n  senderId: string;\n\n  /**\n   * Id(address) of the receiver.\n   */\n  receiverId: string;\n\n  /**\n   * Mutation logs.\n   */\n  logs: any[];\n\n  /**\n   * Checks if mutation in pending.\n   */\n  isPending(): boolean;\n\n  /**\n   * Checks if mutation has reached the required number of confirmation.\n   */\n  isCompleted(): boolean;\n\n  /**\n   * Event emmiter.\n   */\n  emit(event: MutationEvent.CONFIRM, mutation: MutationBase): this;\n  emit(event: MutationEvent.COMPLETE, mutation: MutationBase): this;\n  emit(event: MutationEvent.ERROR, error: any): this;\n\n  /**\n   * Attaches on mutation events.\n   */\n  on(event: MutationEvent.CONFIRM, handler: (m: MutationBase) => any): this;\n  on(event: MutationEvent.COMPLETE, handler: (m: MutationBase) => any): this;\n  on(event: MutationEvent.ERROR, handler: (e: any, m: MutationBase) => any): this;\n\n  /**\n   * Once handler.\n   */\n  once(event: MutationEvent.CONFIRM, handler: (m: MutationBase) => any): this;\n  once(event: MutationEvent.COMPLETE, handler: (m: MutationBase) => any): this;\n  once(event: MutationEvent.ERROR, handler: (e: any, m: MutationBase) => any): this;\n\n  /**\n   * Detaches from mutation events.\n   */\n  off(event: MutationEvent, handler?: () => any): this;\n\n  /**\n   * Waits until mutation is resolved (mutation reaches the specified number of confirmations).\n   */\n  complete(): Promise<this>;\n\n  /**\n   * Resolves current mutation status.\n   */\n  resolve(): Promise<this>;\n\n  /**\n   * Stops listening for confirmations.\n   */\n  forget(): this;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"af9d6f5e6bc75f3d35bcf4a04ee859df1051f7a2","contentHash":"9c00833f729bd8e9f31bcebf21d15a08e18a06804af843d6222a54646cc8363e"},"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/core/gateway.ts":{"path":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/core/gateway.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":4,"column":0},"end":{"line":11,"column":101}},"2":{"start":{"line":5,"column":4},"end":{"line":5,"column":88}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":92}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":92}},"5":{"start":{"line":8,"column":4},"end":{"line":8,"column":104}},"6":{"start":{"line":9,"column":4},"end":{"line":9,"column":90}},"7":{"start":{"line":10,"column":4},"end":{"line":10,"column":90}},"8":{"start":{"line":13,"column":0},"end":{"line":22,"column":62}},"9":{"start":{"line":14,"column":4},"end":{"line":14,"column":88}},"10":{"start":{"line":15,"column":4},"end":{"line":15,"column":88}},"11":{"start":{"line":16,"column":4},"end":{"line":16,"column":76}},"12":{"start":{"line":17,"column":4},"end":{"line":17,"column":80}},"13":{"start":{"line":18,"column":4},"end":{"line":18,"column":90}},"14":{"start":{"line":19,"column":4},"end":{"line":19,"column":94}},"15":{"start":{"line":20,"column":4},"end":{"line":20,"column":86}},"16":{"start":{"line":21,"column":4},"end":{"line":21,"column":86}},"17":{"start":{"line":25,"column":0},"end":{"line":25,"column":54}},"18":{"start":{"line":28,"column":0},"end":{"line":28,"column":54}},"19":{"start":{"line":31,"column":0},"end":{"line":31,"column":50}},"20":{"start":{"line":34,"column":0},"end":{"line":34,"column":62}},"21":{"start":{"line":37,"column":0},"end":{"line":37,"column":46}},"22":{"start":{"line":40,"column":0},"end":{"line":40,"column":58}},"23":{"start":{"line":43,"column":0},"end":{"line":43,"column":56}},"24":{"start":{"line":46,"column":0},"end":{"line":46,"column":56}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":1},"end":{"line":4,"column":2}},"loc":{"start":{"line":4,"column":35},"end":{"line":11,"column":1}},"line":4},"1":{"name":"(anonymous_1)","decl":{"start":{"line":13,"column":1},"end":{"line":13,"column":2}},"loc":{"start":{"line":13,"column":22},"end":{"line":22,"column":1}},"line":13}},"branchMap":{"0":{"loc":{"start":{"line":11,"column":28},"end":{"line":11,"column":99}},"type":"binary-expr","locations":[{"start":{"line":11,"column":28},"end":{"line":11,"column":58}},{"start":{"line":11,"column":63},"end":{"line":11,"column":98}}],"line":11},"1":{"loc":{"start":{"line":22,"column":15},"end":{"line":22,"column":60}},"type":"binary-expr","locations":[{"start":{"line":22,"column":15},"end":{"line":22,"column":32}},{"start":{"line":22,"column":37},"end":{"line":22,"column":59}}],"line":22}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1},"f":{"0":1,"1":1},"b":{"0":[1,1],"1":[1,1]},"inputSourceMap":{"version":3,"file":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/core/gateway.ts","sources":["/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-scaffold/src/core/gateway.ts"],"names":[],"mappings":";;AAMA,IAAY,sBAOX;AAPD,WAAY,sBAAsB;IAChC,mFAAgB,CAAA;IAChB,uFAAkB,CAAA;IAClB,uFAAkB,CAAA;IAClB,mGAAwB,CAAA;IACxB,qFAAiB,CAAA;IACjB,qFAAiB,CAAA;AACnB,CAAC,EAPW,sBAAsB,GAAtB,8BAAsB,KAAtB,8BAAsB,QAOjC;AAmbD,IAAY,SASX;AATD,WAAY,SAAS;IACnB,mFAA6B,CAAA;IAC7B,mFAA6B,CAAA;IAC7B,uEAAuB,CAAA;IACvB,2EAAyB,CAAA;IACzB,qFAA8B,CAAA;IAC9B,yFAAgC,CAAA;IAChC,iFAA4B,CAAA;IAC5B,iFAA4B,CAAA;AAC9B,CAAC,EATW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QASpB;AAKD,MAAa,qBAAqB;CA8CjC;AA9CD,sDA8CC;AAKD,MAAa,qBAAqB;CAyCjC;AAzCD,sDAyCC;AAKD,MAAa,mBAAmB;CA0B/B;AA1BD,kDA0BC;AAKD,MAAa,yBAAyB;CA0BrC;AA1BD,8DA0BC;AAKD,MAAa,iBAAiB;CA0B7B;AA1BD,8CA0BC;AAKD,MAAa,uBAAuB;CA0BnC;AA1BD,0DA0BC;AAKD,MAAa,sBAAsB;CAoClC;AApCD,wDAoCC;AAKD,MAAa,sBAAsB;CAoClC;AApCD,wDAoCC","sourcesContent":["import { AssetLedgerAbility, AssetLedgerCapability } from './asset-ledger';\nimport { MutationBase } from './mutation';\n\n/**\n * List of available order action kinds.\n */\nexport enum ActionsOrderActionKind {\n  CREATE_ASSET = 1,\n  TRANSFER_ASSET = 2,\n  TRANSFER_VALUE = 3,\n  UPDATE_ASSET_IMPRINT = 4,\n  SET_ABILITIES = 5,\n  DESTROY_ASSET = 6,\n}\n\n/**\n * Order gateway method definition.\n */\nexport interface GatewayBase {\n\n  /**\n   * Gets signed claim for an order.\n   * @param order Order data.\n   */\n  sign(order: Order): Promise<string>;\n\n  /**\n   * Generates hash of an order.\n   * @param order Order data.\n   */\n  hash(order: Order): Promise<string>;\n\n  /**\n   * Performs an order.\n   * @param order Order data.\n   * @param claim Claim data.\n   */\n  perform(order: Order, claim: string | string[]): Promise<MutationBase>;\n\n  /**\n   * Cancels an order.\n   * @param order Order data.\n   */\n  cancel(order: Order): Promise<MutationBase>;\n}\n\n/**\n * Different order actions.\n */\nexport type ActionsOrderAction = DynamicActionsOrderAction | FixedActionsOrderAction;\n\n/**\n * Different dynamic order actions.\n */\nexport type DynamicActionsOrderAction = DynamicActionsOrderActionCreateAsset | DynamicActionsOrderActionTransferAsset\n  | DynamicActionsOrderActionTransferValue | DynamicActionsOrderActionUpdateAssetImprint | DynamicActionsOrderActionSetAbilities\n  | DynamicActionsOrderActionDestroyAsset;\n\n/**\n * Order create asset data definition.\n */\nexport interface DynamicActionsOrderActionSetAbilities {\n\n  /**\n   * Type od order action.\n   */\n  kind: ActionsOrderActionKind.SET_ABILITIES;\n\n  /**\n   * Id (address) of the smart contract that represents the assetLedger.\n   */\n  ledgerId: string;\n\n  /**\n   * Id (address) of the sender - setter of abilitites.\n   */\n  senderId?: string;\n\n  /**\n   * Id (address) of account we are setting abilitites to.\n   */\n  receiverId?: string;\n\n  /**\n   * Abilities we want to set.\n   */\n  abilities: AssetLedgerAbility[];\n}\n\n/**\n * Order create asset data definition.\n */\nexport interface DynamicActionsOrderActionCreateAsset {\n\n  /**\n   * Type od order action.\n   */\n  kind: ActionsOrderActionKind.CREATE_ASSET;\n\n  /**\n   * Id (address) of the smart contract that represents the assetLedger.\n   */\n  ledgerId: string;\n\n  /**\n   * Id (address) of the sender - creator.\n   */\n  senderId?: string;\n\n  /**\n   * Id (address) of the receiver.\n   */\n  receiverId?: string;\n\n  /**\n   * Unique asset Id.\n   */\n  assetId: string;\n\n  /**\n   * Merkle tree root of asset proof.\n   */\n  assetImprint: string;\n}\n\n/**\n * Order destory asset data definition.\n */\nexport interface DynamicActionsOrderActionDestroyAsset {\n\n  /**\n   * Type od order action.\n   */\n  kind: ActionsOrderActionKind.DESTROY_ASSET;\n\n  /**\n   * Id (address) of the smart contract that represents the assetLedger.\n   */\n  ledgerId: string;\n\n  /**\n   * Id (address) of the sender - destroyer.\n   */\n  senderId?: string;\n\n  /**\n   * Unique asset Id.\n   */\n  assetId: string;\n}\n\n/**\n * Order transfer asset data definition.\n */\nexport interface DynamicActionsOrderActionTransferAsset {\n\n  /**\n   * Type od order action.\n   */\n  kind: ActionsOrderActionKind.TRANSFER_ASSET;\n\n  /**\n   * Id (address) of the smart contract that represents the assetLedger.\n   */\n  ledgerId: string;\n\n  /**\n   * Id (address) of the sender.\n   */\n  senderId?: string;\n\n  /**\n   * Id (address) of the receiver.\n   */\n  receiverId?: string;\n\n  /**\n   * Unique asset Id.\n   */\n  assetId: string;\n}\n\n/**\n * Order transfer asset data definition.\n */\nexport interface DynamicActionsOrderActionUpdateAssetImprint {\n\n  /**\n   * Type od order action.\n   */\n  kind: ActionsOrderActionKind.UPDATE_ASSET_IMPRINT;\n\n  /**\n   * Id (address) of the smart contract that represents the assetLedger.\n   */\n  ledgerId: string;\n\n  /**\n   * Id (address) of the sender - updator.\n   */\n  senderId?: string;\n\n  /**\n   * Merkle tree root of asset proof.\n   */\n  assetImprint: string;\n\n  /**\n   * Unique asset Id.\n   */\n  assetId: string;\n}\n\n/**\n * Order transfer value data definition.\n */\nexport interface DynamicActionsOrderActionTransferValue {\n\n  /**\n   * Type od order action.\n   */\n  kind: ActionsOrderActionKind.TRANSFER_VALUE;\n\n  /**\n   * Id (address) of the smart contract that represents the assetLedger.\n   */\n  ledgerId: string;\n\n  /**\n   * Id (address) of the sender.\n   */\n  senderId?: string;\n\n  /**\n   * Id (address) of the receiver.\n   */\n  receiverId?: string;\n\n  /**\n   * The amount of value(erc20 tokens).\n   */\n  value: string; // TODO BN.js\n}\n\n/**\n * Different fixed order actions.\n */\nexport type FixedActionsOrderAction = FixedActionsOrderActionCreateAsset | FixedActionsOrderActionTransferAsset\n  | FixedActionsOrderActionTransferValue | FixedActionsOrderActionUpdateAssetImprint | FixedActionsOrderActionSetAbilities\n  | FixedActionsOrderActionDestroyAsset;\n\n/**\n * Order create asset data definitio.\n */\nexport interface FixedActionsOrderActionSetAbilities {\n\n  /**\n   * Type od order action.\n   */\n  kind: ActionsOrderActionKind.SET_ABILITIES;\n\n  /**\n   * Id (address) of the smart contract that represents the assetLedger.\n   */\n  ledgerId: string;\n\n  /**\n   * Id (address) of the sender - setter of abilitites.\n   */\n  senderId: string;\n\n  /**\n   * Id (address) of account we are setting abilitites to.\n   */\n  receiverId: string;\n\n  /**\n   * Abilities we want to set.\n   */\n  abilities: AssetLedgerAbility[];\n}\n\n/**\n * Order create asset data definitio.\n */\nexport interface FixedActionsOrderActionCreateAsset {\n\n  /**\n   * Type od order action.\n   */\n  kind: ActionsOrderActionKind.CREATE_ASSET;\n\n  /**\n   * Id (address) of the smart contract that represents the assetLedger.\n   */\n  ledgerId: string;\n\n  /**\n   * Id (address) of the sender - creator.\n   */\n  senderId: string;\n\n  /**\n   * Id (address) of the receiver.\n   */\n  receiverId: string;\n\n  /**\n   * Unique asset Id.\n   */\n  assetId: string;\n\n  /**\n   * Merkle tree root of asset proof.\n   */\n  assetImprint: string;\n}\n\n/**\n * Order destory asset data definitio.\n */\nexport interface FixedActionsOrderActionDestroyAsset {\n\n  /**\n   * Type of order action.\n   */\n  kind: ActionsOrderActionKind.DESTROY_ASSET;\n\n  /**\n   * Id (address) of the smart contract that represents the assetLedger.\n   */\n  ledgerId: string;\n\n  /**\n   * Id (address) of the sender - destroyer.\n   */\n  senderId: string;\n\n  /**\n   * Unique asset Id.\n   */\n  assetId: string;\n}\n\n/**\n * Order transfer asset data definition.\n */\nexport interface FixedActionsOrderActionTransferAsset {\n\n  /**\n   * Type of order action.\n   */\n  kind: ActionsOrderActionKind.TRANSFER_ASSET;\n\n  /**\n   * Id (address) of the smart contract that represents the assetLedger.\n   */\n  ledgerId: string;\n\n  /**\n   * Id (address) of the sender.\n   */\n  senderId: string;\n\n  /**\n   * Id (address) of the receiver.\n   */\n  receiverId: string;\n\n  /**\n   * Unique asset Id.\n   */\n  assetId: string;\n}\n\n/**\n * Order transfer asset data definition.\n */\nexport interface FixedActionsOrderActionUpdateAssetImprint {\n\n  /**\n   * Type of order action.\n   */\n  kind: ActionsOrderActionKind.UPDATE_ASSET_IMPRINT;\n\n  /**\n   * Id (address) of the smart contract that represents the assetLedger.\n   */\n  ledgerId: string;\n\n  /**\n   * Id (address) of the sender - updator.\n   */\n  senderId: string;\n\n  /**\n   * Merkle tree root of asset proof.\n   */\n  assetImprint: string;\n\n  /**\n   * Unique asset Id.\n   */\n  assetId: string;\n}\n\n/**\n * Order transfer value data definition.\n */\nexport interface FixedActionsOrderActionTransferValue {\n\n  /**\n   * Type of order action.\n   */\n  kind: ActionsOrderActionKind.TRANSFER_VALUE;\n\n  /**\n   * Id (address) of the smart contract that represents the assetLedger.\n   */\n  ledgerId: string;\n\n  /**\n   * Id (address) of the sender.\n   */\n  senderId: string;\n\n  /**\n   * Id (address) of the receiver.\n   */\n  receiverId: string;\n\n  /**\n   * The amount of value(erc20 tokens).\n   */\n  value: string; // TODO BN.js\n}\n\nexport type ActionsOrder = FixedActionsOrder | SignedFixedActionsOrder |\n  SignedDynamicActionsOrder | DynamicActionsOrder;\n\n/**\n * Different order actions.\n */\nexport type Order = AssetLedgerDeployOrder | ValueLedgerDeployOrder | ActionsOrder | AssetSetOperatorOrder | DappValueApproveOrder;\n\n/**\n * List of available order kinds.\n */\nexport enum OrderKind {\n  ASSET_LEDGER_DEPLOY_ORDER = 1,\n  VALUE_LEDGER_DEPLOY_ORDER = 2,\n  FIXED_ACTIONS_ORDER = 3,\n  DYNAMIC_ACTIONS_ORDER = 4,\n  SIGNED_FIXED_ACTIONS_ORDER = 5,\n  SIGNED_DYNAMIC_ACTIONS_ORDER = 6,\n  ASSET_SET_OPERATOR_ORDER = 7,\n  DAPP_VALUE_APPROVE_ORDER = 8,\n}\n\n/**\n * DappValueApproveOrder definition.\n */\nexport class DappValueApproveOrder {\n\n  /**\n   * Type of order.\n   */\n  public kind: OrderKind.DAPP_VALUE_APPROVE_ORDER;\n\n  /**\n   * Id (address) of the smart contract that represents the dapp token value ledger.\n   */\n  public ledgerId: string;\n\n  /**\n   * Address that is approving value.\n   */\n  public approver: string;\n\n  /**\n   * Address what will get approved.\n   */\n  public spender: string;\n\n  /**\n   * Amount for which approver is approving spender.\n   */\n  public value: string;\n\n  /**\n   * Recipient of the fee for performing this order.\n   */\n  public feeRecipient?: string;\n\n  /**\n   * Amount of fee recipient will receive.\n   */\n  public feeValue: string;\n\n  /**\n   * Nonce for hash generation - usually current timestamp.\n   */\n  public seed: number;\n\n  /**\n   * Timestamp of order expiration.\n   */\n  public expiration: number;\n}\n\n/**\n * AssetSetOperatorOrder definition.\n */\nexport class AssetSetOperatorOrder {\n\n  /**\n   * Type of order.\n   */\n  public kind: OrderKind.ASSET_SET_OPERATOR_ORDER;\n\n  /**\n   * Id (address) of the smart contract that represents the assetLedger.\n   */\n  public ledgerId: string;\n\n  /**\n   * Address of asset owner.\n   */\n  public owner: string;\n\n  /**\n   * Address which we are setting operator status.\n   */\n  public operator: string;\n\n  /**\n   * Operator status.\n   */\n  public isOperator: boolean;\n\n  /**\n   * Data defining a fungible token transfer.\n   */\n  public tokenTransferData: TokenTransferData;\n\n  /**\n   * Nonce for hash generation - usually current timestamp.\n   */\n  public seed: number;\n\n  /**\n   * Timestamp of order expiration.\n   */\n  public expiration: number;\n}\n\n/**\n * Order definition.\n */\nexport class DynamicActionsOrder {\n\n  /**\n   * Type of order.\n   */\n  public kind: OrderKind.DYNAMIC_ACTIONS_ORDER;\n\n  /**\n   * Array of order signers.\n   */\n  public signers: string[];\n\n  /**\n   * Array of actions that will execute in this order.\n   */\n  public actions: DynamicActionsOrderAction[];\n\n  /**\n   * Nonce for hash generation - usually current timestamp.\n   */\n  public seed: number;\n\n  /**\n   * Timestamp of order expiration.\n   */\n  public expiration: number;\n}\n\n/**\n * Order definition.\n */\nexport class SignedDynamicActionsOrder {\n\n  /**\n   * Type of order.\n   */\n  public kind: OrderKind.SIGNED_DYNAMIC_ACTIONS_ORDER;\n\n  /**\n   * Array of order signers.\n   */\n  public signers: string[];\n\n  /**\n   * Array of actions that will execute in this order.\n   */\n  public actions: DynamicActionsOrderAction[];\n\n  /**\n   * Nonce for hash generation - usually current timestamp.\n   */\n  public seed: number;\n\n  /**\n   * Timestamp of order expiration.\n   */\n  public expiration: number;\n}\n\n/**\n * Order definition.\n */\nexport class FixedActionsOrder {\n\n  /**\n   * Type of order.\n   */\n  public kind: OrderKind.FIXED_ACTIONS_ORDER;\n\n  /**\n   * Array of order signers.\n   */\n  public signers: string[];\n\n  /**\n   * Array of actions that will execute in this order.\n   */\n  public actions: FixedActionsOrderAction[];\n\n  /**\n   * Nonce for hash generation - usually current timestamp.\n   */\n  public seed: number;\n\n  /**\n   * Timestamp of order expiration.\n   */\n  public expiration: number;\n}\n\n/**\n * Order definition.\n */\nexport class SignedFixedActionsOrder {\n\n  /**\n   * Type of order.\n   */\n  public kind: OrderKind.SIGNED_FIXED_ACTIONS_ORDER;\n\n  /**\n   * Array of order signers.\n   */\n  public signers: string[];\n\n  /**\n   * Array of actions that will execute in this order.\n   */\n  public actions: FixedActionsOrderAction[];\n\n  /**\n   * Nonce for hash generation - usually current timestamp.\n   */\n  public seed: number;\n\n  /**\n   * Timestamp of order expiration.\n   */\n  public expiration: number;\n}\n\n/**\n * Asset ledger deploy definition.\n */\nexport class AssetLedgerDeployOrder {\n\n  /**\n   * Type of order.\n   */\n  public kind: OrderKind.ASSET_LEDGER_DEPLOY_ORDER;\n\n  /**\n   * Address of the order maker.\n   */\n  public makerId: string;\n\n  /**\n   * Address of the order taker.\n   */\n  public takerId?: string;\n\n  /**\n   * Data from which a new asset ledger will be created.\n   */\n  public assetLedgerData: AssetLedgerData;\n\n  /**\n   * Data defining a fungible token transfer.\n   */\n  public tokenTransferData: TokenTransferData;\n\n  /**\n   * Nonce for hash generation - usually current timestamp.\n   */\n  public seed: number;\n\n  /**\n   * Timestamp of order expiration.\n   */\n  public expiration: number;\n}\n\n/**\n * Asset ledger deploy definition.\n */\nexport class ValueLedgerDeployOrder {\n\n  /**\n   * Type of order.\n   */\n  public kind: OrderKind.VALUE_LEDGER_DEPLOY_ORDER;\n\n  /**\n   * Address of the order maker.\n   */\n  public makerId: string;\n\n  /**\n   * Address of the order taker.\n   */\n  public takerId?: string;\n\n  /**\n   * Data from which a new value ledger will be created.\n   */\n  public valueLedgerData: ValueLedgerData;\n\n  /**\n   * Data defining a fungible token transfer.\n   */\n  public tokenTransferData: TokenTransferData;\n\n  /**\n   * Nonce for hash generation - usually current timestamp.\n   */\n  public seed: number;\n\n  /**\n   * Timestamp of order expiration.\n   */\n  public expiration: number;\n}\n\n/**\n * Asset ledger deploy data definition.\n */\nexport interface AssetLedgerData {\n\n  /**\n   * Asset Ledger name.\n   */\n  name: string;\n\n  /**\n   * Asset Ledger symbol/ticker.\n   */\n  symbol: string;\n\n  /**\n   * Uri prefix for metadata URI-s. At the end of the prefix the assetId is automatically appended for each asset.\n   * Example: https://example.com/id/\n   * Asset 1 URI will become: https://example.com/id/1 + postfix\n   */\n  uriPrefix: string;\n\n  /**\n   * URI postfix for metadata URIs. After uriPrefix and assetId, postfix is automatically appended for each asset..\n   * Example: .json\n   * Asset 1 URI will become: uriPrefix + 1.json\n   */\n  uriPostfix: string;\n\n  /**\n   * Hashed representation of JSON schema defining this object.\n   */\n  schemaId: string;\n\n  /**\n   * Array representing capabilities.\n   */\n  capabilities?: AssetLedgerCapability[];\n\n  /**\n   * Id (address) of the owner of this asset ledger.\n   */\n  ownerId: string;\n}\n\n/**\n * Value ledger deploy data definition.\n */\nexport interface ValueLedgerData {\n\n  /**\n   * Value Ledger name.\n   */\n  name: string;\n\n  /**\n   * Value Ledger symbol/ticker.\n   */\n  symbol: string;\n\n  /**\n   * Value ledger supply\n   */\n  supply: string;\n\n  /**\n   * Value ledger number of decimals.\n   */\n  decimals: string;\n\n  /**\n   * Id (address) of the owner of this value ledger (will own the whole supply at deploy).\n   */\n  ownerId: string;\n}\n\n/**\n * Token transfer data definition.\n */\nexport interface TokenTransferData {\n\n  /**\n   * Id (address) of the smart contract that represents the assetLedger.\n   */\n  ledgerId: string;\n\n  /**\n   * Id (address) of the receiver.\n   */\n  receiverId?: string;\n\n  /**\n   * The amount of value(erc20 tokens).\n   */\n  value: string; // TODO BN.js\n\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"355f3f8adb5f1c98177dcb87be92e6cd32afa121","contentHash":"36a6965387327134efc7a23c89f565e025dcdee0d665b886354a1323cb0b2b17"}}