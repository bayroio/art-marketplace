import { GatewayBase } from './gateway';
import { MutationBase } from './mutation';
export declare type AssetLedgerAbility = SuperAssetLedgerAbility | GeneralAssetLedgerAbility;
export declare enum GeneralAssetLedgerAbility {
    CREATE_ASSET = 16,
    REVOKE_ASSET = 32,
    TOGGLE_TRANSFERS = 64,
    UPDATE_ASSET = 128,
    UPDATE_URI_BASE = 256,
    ALLOW_CREATE_ASSET = 512,
    ALLOW_UPDATE_ASSET_IMPRINT = 1024
}
export declare enum SuperAssetLedgerAbility {
    MANAGE_ABILITIES = 1,
    ALLOW_MANAGE_ABILITIES = 2
}
export declare enum AssetLedgerCapability {
    DESTROY_ASSET = 1,
    UPDATE_ASSET = 2,
    REVOKE_ASSET = 4,
    TOGGLE_TRANSFERS = 3
}
export interface AssetLedgerBase {
    readonly id: string;
    approveAccount(assetId: string, accountId: string | GatewayBase): Promise<MutationBase>;
    approveOperator(accountId: string | GatewayBase): Promise<MutationBase>;
    grantAbilities(accountId: string, abilities: AssetLedgerAbility[]): Promise<MutationBase>;
    createAsset(recipe: AssetLedgerItemRecipe): Promise<MutationBase>;
    destroyAsset(assetId: string): Promise<MutationBase>;
    disapproveAccount(assetId: string): Promise<MutationBase>;
    disapproveOperator(accountId: string | GatewayBase): Promise<MutationBase>;
    disableTransfers(): Promise<MutationBase>;
    enableTransfers(): Promise<MutationBase>;
    getAbilities(accountId: string): Promise<AssetLedgerAbility[]>;
    getApprovedAccount(assetId: string): Promise<string>;
    getAsset(assetId: string): Promise<AssetLedgerItem>;
    getAssetAccount(assetId: string): Promise<string>;
    getBalance(accountId: string): Promise<string>;
    getCapabilities(): Promise<AssetLedgerCapability[]>;
    getInfo(): Promise<AssetLedgerInfo>;
    isApprovedAccount(assetId: string, accountId: string | GatewayBase): Promise<boolean>;
    isApprovedOperator(accountId: string, operatorId: string | GatewayBase): Promise<boolean>;
    isTransferable(): Promise<boolean>;
    revokeAbilities(accountId: string, abilities: AssetLedgerAbility[]): Promise<MutationBase>;
    revokeAsset(assetId: string): Promise<MutationBase>;
    update(recipe: AssetLedgerUpdateRecipe): Promise<MutationBase>;
    updateAsset(assetId: string, recipe: AssetLedgerObjectUpdateRecipe): Promise<MutationBase>;
    transferAsset(recipe: AssetLedgerTransferRecipe): Promise<MutationBase>;
}
export interface AssetLedgerDeployRecipe {
    name: string;
    symbol: string;
    uriPrefix: string;
    uriPostfix: string;
    schemaId: string;
    capabilities?: AssetLedgerCapability[];
}
export interface AssetLedgerItem {
    id: string;
    uri: string;
    imprint: string;
    schemaId: string;
}
export interface AssetLedgerInfo {
    name: string;
    symbol: string;
    uriPrefix: string;
    uriPostfix: string;
    supply: string;
}
export interface AssetLedgerItemRecipe {
    receiverId: string;
    id: string;
    imprint: string;
}
export interface AssetLedgerTransferRecipe {
    senderId?: string;
    receiverId: string;
    id: string;
    data?: string;
}
export interface AssetLedgerObjectUpdateRecipe {
    imprint: string;
}
export interface AssetLedgerUpdateRecipe {
    uriPrefix: string;
    uriPostfix: string;
}
