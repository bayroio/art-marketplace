import { AssetLedgerAbility, AssetLedgerCapability } from './asset-ledger';
import { MutationBase } from './mutation';
export declare enum ActionsOrderActionKind {
    CREATE_ASSET = 1,
    TRANSFER_ASSET = 2,
    TRANSFER_VALUE = 3,
    UPDATE_ASSET_IMPRINT = 4,
    SET_ABILITIES = 5,
    DESTROY_ASSET = 6
}
export interface GatewayBase {
    sign(order: Order): Promise<string>;
    hash(order: Order): Promise<string>;
    perform(order: Order, claim: string | string[]): Promise<MutationBase>;
    cancel(order: Order): Promise<MutationBase>;
}
export declare type ActionsOrderAction = DynamicActionsOrderAction | FixedActionsOrderAction;
export declare type DynamicActionsOrderAction = DynamicActionsOrderActionCreateAsset | DynamicActionsOrderActionTransferAsset | DynamicActionsOrderActionTransferValue | DynamicActionsOrderActionUpdateAssetImprint | DynamicActionsOrderActionSetAbilities | DynamicActionsOrderActionDestroyAsset;
export interface DynamicActionsOrderActionSetAbilities {
    kind: ActionsOrderActionKind.SET_ABILITIES;
    ledgerId: string;
    senderId?: string;
    receiverId?: string;
    abilities: AssetLedgerAbility[];
}
export interface DynamicActionsOrderActionCreateAsset {
    kind: ActionsOrderActionKind.CREATE_ASSET;
    ledgerId: string;
    senderId?: string;
    receiverId?: string;
    assetId: string;
    assetImprint: string;
}
export interface DynamicActionsOrderActionDestroyAsset {
    kind: ActionsOrderActionKind.DESTROY_ASSET;
    ledgerId: string;
    senderId?: string;
    assetId: string;
}
export interface DynamicActionsOrderActionTransferAsset {
    kind: ActionsOrderActionKind.TRANSFER_ASSET;
    ledgerId: string;
    senderId?: string;
    receiverId?: string;
    assetId: string;
}
export interface DynamicActionsOrderActionUpdateAssetImprint {
    kind: ActionsOrderActionKind.UPDATE_ASSET_IMPRINT;
    ledgerId: string;
    senderId?: string;
    assetImprint: string;
    assetId: string;
}
export interface DynamicActionsOrderActionTransferValue {
    kind: ActionsOrderActionKind.TRANSFER_VALUE;
    ledgerId: string;
    senderId?: string;
    receiverId?: string;
    value: string;
}
export declare type FixedActionsOrderAction = FixedActionsOrderActionCreateAsset | FixedActionsOrderActionTransferAsset | FixedActionsOrderActionTransferValue | FixedActionsOrderActionUpdateAssetImprint | FixedActionsOrderActionSetAbilities | FixedActionsOrderActionDestroyAsset;
export interface FixedActionsOrderActionSetAbilities {
    kind: ActionsOrderActionKind.SET_ABILITIES;
    ledgerId: string;
    senderId: string;
    receiverId: string;
    abilities: AssetLedgerAbility[];
}
export interface FixedActionsOrderActionCreateAsset {
    kind: ActionsOrderActionKind.CREATE_ASSET;
    ledgerId: string;
    senderId: string;
    receiverId: string;
    assetId: string;
    assetImprint: string;
}
export interface FixedActionsOrderActionDestroyAsset {
    kind: ActionsOrderActionKind.DESTROY_ASSET;
    ledgerId: string;
    senderId: string;
    assetId: string;
}
export interface FixedActionsOrderActionTransferAsset {
    kind: ActionsOrderActionKind.TRANSFER_ASSET;
    ledgerId: string;
    senderId: string;
    receiverId: string;
    assetId: string;
}
export interface FixedActionsOrderActionUpdateAssetImprint {
    kind: ActionsOrderActionKind.UPDATE_ASSET_IMPRINT;
    ledgerId: string;
    senderId: string;
    assetImprint: string;
    assetId: string;
}
export interface FixedActionsOrderActionTransferValue {
    kind: ActionsOrderActionKind.TRANSFER_VALUE;
    ledgerId: string;
    senderId: string;
    receiverId: string;
    value: string;
}
export declare type ActionsOrder = FixedActionsOrder | SignedFixedActionsOrder | SignedDynamicActionsOrder | DynamicActionsOrder;
export declare type Order = AssetLedgerDeployOrder | ValueLedgerDeployOrder | ActionsOrder | AssetSetOperatorOrder | DappValueApproveOrder;
export declare enum OrderKind {
    ASSET_LEDGER_DEPLOY_ORDER = 1,
    VALUE_LEDGER_DEPLOY_ORDER = 2,
    FIXED_ACTIONS_ORDER = 3,
    DYNAMIC_ACTIONS_ORDER = 4,
    SIGNED_FIXED_ACTIONS_ORDER = 5,
    SIGNED_DYNAMIC_ACTIONS_ORDER = 6,
    ASSET_SET_OPERATOR_ORDER = 7,
    DAPP_VALUE_APPROVE_ORDER = 8
}
export declare class DappValueApproveOrder {
    kind: OrderKind.DAPP_VALUE_APPROVE_ORDER;
    ledgerId: string;
    approver: string;
    spender: string;
    value: string;
    feeRecipient?: string;
    feeValue: string;
    seed: number;
    expiration: number;
}
export declare class AssetSetOperatorOrder {
    kind: OrderKind.ASSET_SET_OPERATOR_ORDER;
    ledgerId: string;
    owner: string;
    operator: string;
    isOperator: boolean;
    tokenTransferData: TokenTransferData;
    seed: number;
    expiration: number;
}
export declare class DynamicActionsOrder {
    kind: OrderKind.DYNAMIC_ACTIONS_ORDER;
    signers: string[];
    actions: DynamicActionsOrderAction[];
    seed: number;
    expiration: number;
}
export declare class SignedDynamicActionsOrder {
    kind: OrderKind.SIGNED_DYNAMIC_ACTIONS_ORDER;
    signers: string[];
    actions: DynamicActionsOrderAction[];
    seed: number;
    expiration: number;
}
export declare class FixedActionsOrder {
    kind: OrderKind.FIXED_ACTIONS_ORDER;
    signers: string[];
    actions: FixedActionsOrderAction[];
    seed: number;
    expiration: number;
}
export declare class SignedFixedActionsOrder {
    kind: OrderKind.SIGNED_FIXED_ACTIONS_ORDER;
    signers: string[];
    actions: FixedActionsOrderAction[];
    seed: number;
    expiration: number;
}
export declare class AssetLedgerDeployOrder {
    kind: OrderKind.ASSET_LEDGER_DEPLOY_ORDER;
    makerId: string;
    takerId?: string;
    assetLedgerData: AssetLedgerData;
    tokenTransferData: TokenTransferData;
    seed: number;
    expiration: number;
}
export declare class ValueLedgerDeployOrder {
    kind: OrderKind.VALUE_LEDGER_DEPLOY_ORDER;
    makerId: string;
    takerId?: string;
    valueLedgerData: ValueLedgerData;
    tokenTransferData: TokenTransferData;
    seed: number;
    expiration: number;
}
export interface AssetLedgerData {
    name: string;
    symbol: string;
    uriPrefix: string;
    uriPostfix: string;
    schemaId: string;
    capabilities?: AssetLedgerCapability[];
    ownerId: string;
}
export interface ValueLedgerData {
    name: string;
    symbol: string;
    supply: string;
    decimals: string;
    ownerId: string;
}
export interface TokenTransferData {
    ledgerId: string;
    receiverId?: string;
    value: string;
}
