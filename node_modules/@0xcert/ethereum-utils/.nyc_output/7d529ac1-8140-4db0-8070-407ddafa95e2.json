{"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-utils/src/lib/abi.ts":{"path":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-utils/src/lib/abi.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":20},"end":{"line":3,"column":53}},"2":{"start":{"line":4,"column":14},"end":{"line":4,"column":40}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":39}},"4":{"start":{"line":8,"column":0},"end":{"line":8,"column":44}},"5":{"start":{"line":10,"column":4},"end":{"line":10,"column":37}},"6":{"start":{"line":12,"column":0},"end":{"line":12,"column":44}}},"fnMap":{"0":{"name":"encodeParameters","decl":{"start":{"line":5,"column":9},"end":{"line":5,"column":25}},"loc":{"start":{"line":5,"column":41},"end":{"line":7,"column":1}},"line":5},"1":{"name":"decodeParameters","decl":{"start":{"line":9,"column":9},"end":{"line":9,"column":25}},"loc":{"start":{"line":9,"column":39},"end":{"line":11,"column":1}},"line":9}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1},"f":{"0":1,"1":1},"b":{},"inputSourceMap":{"version":3,"file":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-utils/src/lib/abi.ts","sources":["/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-utils/src/lib/abi.ts"],"names":[],"mappings":";;AAAA,sDAAkD;AAElD,MAAM,KAAK,GAAG,IAAI,oBAAQ,EAAE,CAAC;AAO7B,SAAgB,gBAAgB,CAAC,KAAU,EAAE,MAAkB;IAC7D,OAAO,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AACrC,CAAC;AAFD,4CAEC;AAOD,SAAgB,gBAAgB,CAAC,KAAU,EAAE,IAAS;IACpD,OAAO,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AACnC,CAAC;AAFD,4CAEC","sourcesContent":["import { AbiCoder } from 'ethers/utils/abi-coder';\n\nconst coder = new AbiCoder();\n\n/**\n * Encodes parameters for smart contract call.\n * @param types Input types.\n * @param values Input values.\n */\nexport function encodeParameters(types: any, values: Array<any>): string {\n  return coder.encode(types, values);\n}\n\n/**\n * Decodes parameters from smart contract return.\n * @param types Output types.\n * @param data Output data.\n */\nexport function decodeParameters(types: any, data: any): any {\n  return coder.decode(types, data);\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"969c00f9ba28c538390a6c2525bf32bb923d0b76","contentHash":"c842eaf70e9e30167f7d0c95869456e70b14b231f22b6cd74a40eda576c68505"},"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-utils/src/lib/big-number.ts":{"path":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-utils/src/lib/big-number.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":20},"end":{"line":3,"column":53}},"2":{"start":{"line":4,"column":18},"end":{"line":4,"column":51}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":42}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":43}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":36}}},"fnMap":{"0":{"name":"bigNumberify","decl":{"start":{"line":6,"column":9},"end":{"line":6,"column":21}},"loc":{"start":{"line":6,"column":29},"end":{"line":8,"column":1}},"line":6}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":2,"5":1},"f":{"0":2},"b":{},"inputSourceMap":{"version":3,"file":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-utils/src/lib/big-number.ts","sources":["/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-utils/src/lib/big-number.ts"],"names":[],"mappings":";;AAAA,sDAA8D;AAC9D,oDAAmD;AAA1C,gCAAA,SAAS,CAAA;AAMlB,SAAgB,YAAY,CAAC,KAAU;IACrC,OAAO,wBAAI,CAAC,KAAK,CAAC,CAAC;AACrB,CAAC;AAFD,oCAEC","sourcesContent":["import { bigNumberify as toBN } from 'ethers/utils/bignumber';\nexport { BigNumber } from 'ethers/utils/bignumber';\n\n/**\n * Converts arbitrary number to a BigNumber format.\n * @param value Arbitrary number.\n */\nexport function bigNumberify(value: any) {\n  return toBN(value);\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"edfcca7a70ad00b5e7fed177fe2f83e34c651bc7","contentHash":"eb39f6232107eb0b8a1960ddf73b6ea66ecf431daebd53a1285f8b28daba7dea"},"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-utils/src/lib/normalize-address.ts":{"path":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-utils/src/lib/normalize-address.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":18},"end":{"line":3,"column":49}},"2":{"start":{"line":5,"column":4},"end":{"line":5,"column":72}},"3":{"start":{"line":7,"column":0},"end":{"line":7,"column":44}}},"fnMap":{"0":{"name":"normalizeAddress","decl":{"start":{"line":4,"column":9},"end":{"line":4,"column":25}},"loc":{"start":{"line":4,"column":35},"end":{"line":6,"column":1}},"line":4}},"branchMap":{"0":{"loc":{"start":{"line":5,"column":11},"end":{"line":5,"column":71}},"type":"cond-expr","locations":[{"start":{"line":5,"column":21},"end":{"line":5,"column":64}},{"start":{"line":5,"column":67},"end":{"line":5,"column":71}}],"line":5}},"s":{"0":1,"1":1,"2":7,"3":1},"f":{"0":7},"b":{"0":[6,1]},"inputSourceMap":{"version":3,"file":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-utils/src/lib/normalize-address.ts","sources":["/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-utils/src/lib/normalize-address.ts"],"names":[],"mappings":";;AAAA,kDAAkD;AAMlD,SAAgB,gBAAgB,CAAC,OAAe;IAC9C,OAAO,OAAO,CAAC,CAAC,CAAC,oBAAU,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AAC5D,CAAC;AAFD,4CAEC","sourcesContent":["import { getAddress } from 'ethers/utils/address';\n\n/**\n * Converts ethereum address to checksum format.\n * @see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md\n */\nexport function normalizeAddress(address: string): string {\n  return address ? getAddress(address.toLowerCase()) : null;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"8dac0d672f63a30f9c100cccb0ca9e54378f2d77","contentHash":"649a63f81979d2d1521407f74638e0465cd1b916a30ace8c0677eb2f1afefe4a"}}