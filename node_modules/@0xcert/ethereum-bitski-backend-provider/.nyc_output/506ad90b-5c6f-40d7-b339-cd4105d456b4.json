{"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-bitski-backend-provider/src/index.ts":{"path":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-bitski-backend-provider/src/index.ts","statementMap":{"0":{"start":{"line":3,"column":4},"end":{"line":3,"column":71}},"1":{"start":{"line":3,"column":21},"end":{"line":3,"column":71}},"2":{"start":{"line":3,"column":53},"end":{"line":3,"column":71}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":55}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":37}}},"fnMap":{"0":{"name":"__export","decl":{"start":{"line":2,"column":9},"end":{"line":2,"column":17}},"loc":{"start":{"line":2,"column":21},"end":{"line":4,"column":1}},"line":2}},"branchMap":{"0":{"loc":{"start":{"line":3,"column":21},"end":{"line":3,"column":71}},"type":"if","locations":[{"start":{"line":3,"column":21},"end":{"line":3,"column":71}},{"start":{"line":3,"column":21},"end":{"line":3,"column":71}}],"line":3}},"s":{"0":2,"1":12,"2":12,"3":1,"4":1,"5":1},"f":{"0":2},"b":{"0":[12,0]},"inputSourceMap":{"version":3,"file":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-bitski-backend-provider/src/index.ts","sources":["/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-bitski-backend-provider/src/index.ts"],"names":[],"mappings":";;;;;AAAA,uDAAkD;AAClD,qCAAgC","sourcesContent":["export * from '@0xcert/ethereum-generic-provider';\nexport * from './core/provider';\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"2fe0dc352a4083d06956a32d81248b58cb5b0001","contentHash":"5b67ef504955125d4c101894d36d923636ae2efcb0ef6c4eea9da317d768bd2f"},"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-bitski-backend-provider/src/core/provider.ts":{"path":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-bitski-backend-provider/src/core/provider.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":36},"end":{"line":3,"column":80}},"2":{"start":{"line":4,"column":15},"end":{"line":4,"column":37}},"3":{"start":{"line":7,"column":8},"end":{"line":7,"column":23}},"4":{"start":{"line":8,"column":8},"end":{"line":8,"column":32}},"5":{"start":{"line":9,"column":8},"end":{"line":9,"column":28}},"6":{"start":{"line":10,"column":8},"end":{"line":16,"column":11}},"7":{"start":{"line":19,"column":8},"end":{"line":19,"column":33}},"8":{"start":{"line":22,"column":8},"end":{"line":22,"column":32}},"9":{"start":{"line":25,"column":8},"end":{"line":25,"column":49}},"10":{"start":{"line":28,"column":0},"end":{"line":28,"column":40}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":4},"end":{"line":6,"column":5}},"loc":{"start":{"line":6,"column":25},"end":{"line":17,"column":5}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":32},"end":{"line":20,"column":5}},"line":18},"2":{"name":"(anonymous_2)","decl":{"start":{"line":21,"column":4},"end":{"line":21,"column":5}},"loc":{"start":{"line":21,"column":18},"end":{"line":23,"column":5}},"line":21},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":25},"end":{"line":26,"column":5}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":11,"column":21},"end":{"line":11,"column":89}},"type":"cond-expr","locations":[{"start":{"line":11,"column":62},"end":{"line":11,"column":71}},{"start":{"line":11,"column":74},"end":{"line":11,"column":89}}],"line":11}},"s":{"0":1,"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1},"f":{"0":0,"1":0,"2":0,"3":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"file":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-bitski-backend-provider/src/core/provider.ts","sources":["/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-bitski-backend-provider/src/core/provider.ts"],"names":[],"mappings":";;AAAA,iFAA+F;AAC/F,sCAAsC;AA4FtC,MAAa,cAAe,SAAQ,2CAAe;IAwCjD,YAAmB,OAA8B;QAC/C,KAAK,CAAC,OAAO,CAAC,CAAC;QAEf,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,EAAE;YACpD,OAAO,EAAE,OAAO,OAAO,CAAC,OAAO,KAAK,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO;YAC7E,WAAW,EAAE;gBACX,EAAE,EAAE,OAAO,CAAC,aAAa;gBACzB,MAAM,EAAE,OAAO,CAAC,iBAAiB;aAClC;SACF,CAAC,CAAC;IACL,CAAC;IApCM,MAAM,CAAC,WAAW,CAAC,OAA8B;QACtD,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;IAC3B,CAAC;IAuCM,WAAW;QAChB,OAAO,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAOM,IAAI,CAAC,IAAS,EAAE,QAA4B;QACjD,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC3C,CAAC;CACF;AArED,wCAqEC","sourcesContent":["import { GatewayConfig, GenericProvider, SignMethod } from '@0xcert/ethereum-generic-provider';\nimport * as Bitski from 'bitski-node';\n\n/**\n * Configuration interface for generic provider.\n */\nexport interface BitskiProviderOptions {\n\n  /**\n   * Default account from which all mutations are made.\n   */\n  accountId?: string;\n\n  /**\n   * Type of signature that will be used in making claims etc.\n   */\n  signMethod?: SignMethod;\n\n  /**\n   * List of addresses where normal transfer not safeTransfer smart contract methods will be used.\n   */\n  unsafeRecipientIds?: string[];\n\n  /**\n   * Source where assetLedger compiled smart contract is located.\n   */\n  assetLedgerSource?: string;\n\n  /**\n   * Source where valueLedger compiled smart contract is located.\n   */\n  valueLedgerSource?: string;\n\n  /**\n   * Number of confirmations (blocks in blockchain after mutation is accepted) that are necessary to mark\n   * a mutation complete.\n   */\n  requiredConfirmations?: number;\n\n  /**\n   * Gateway configuration.\n   */\n  gatewayConfig?: GatewayConfig;\n\n  /**\n   * The number of milliseconds in which a mutation times out.\n   */\n  mutationTimeout?: number;\n\n  /**\n   * Bitski client ID.\n   */\n  clientId: string;\n\n  /**\n   * Bitski credentials ID.\n   */\n  credentialsId: string;\n\n  /**\n   * Bitski credentials secret.\n   */\n  credentialsSecret: string;\n\n  /**\n   * Ethereum network Bitski is connected to. Mainnet by default.\n   */\n  network?: string;\n\n  /**\n   * Gas price multiplier. Defaults to 1.1.\n   */\n  gasPriceMultiplier?: number;\n\n  /**\n   * Retry gas price multiplier. Defaults to 2.\n   */\n  retryGasPriceMultiplier?: number;\n\n  /**\n   * Sandbox mode. False by default.\n   */\n  sandbox?: Boolean;\n\n  /**\n   * Verbose mode. False by default.\n   */\n  verbose?: Boolean;\n}\n\n/**\n * Bitski RPC client.\n */\nexport class BitskiProvider extends GenericProvider {\n\n  /**\n   * Default options set from constructor.\n   */\n  protected _options: BitskiProviderOptions;\n\n  /**\n   * Bitski provider instance.\n   */\n  protected _provider: any;\n\n  /**\n   * Returns a new provider instance.\n   * @param options HTTP provider options.\n   */\n  public static getInstance(options: BitskiProviderOptions): BitskiProvider {\n    return new this(options);\n  }\n\n  /**\n   * Class constructor.\n   * @param options.accountId Optional coinbase account.\n   * @param options.signMethod Optional setting of signature kind used in claims.\n   * @param options.unsafeRecipientIds Optional list of addresses where normal transfer not\n   * safeTransfer smart contract methods will be used.\n   * @param options.assetLedgerSource Optional source where assetLedger compiled smart contracts are\n   * located.\n   * @param options.valueLedgerSource Optional source where valueLedger compiled smart contracts are\n   * located.\n   * @param options.requiredConfirmations Optional number of confirmations that are necessary to\n   * mark a mutation complete.\n   * @param options.gatewayConfig Gateway configuration.\n   * @param options.mutationTimeout Optional number of milliseconds in which a mutation times out.\n   * @param options.clientId Required Bitski client ID.\n   * @param options.credentialsId Required Bitski credentials ID.\n   * @param options.credentialsSecret Required Bitski credentials secret.\n   * @param options.network Optional name of Ethereum network Bitski is connected to. Mainnet by\n   * default.\n   */\n  public constructor(options: BitskiProviderOptions) {\n    super(options);\n\n    this._options = options;\n    this._client = this;\n    this._provider = Bitski.getProvider(options.clientId, {\n      network: typeof options.network === 'undefined' ? 'mainnet' : options.network,\n      credentials: {\n        id: options.credentialsId,\n        secret: options.credentialsSecret,\n      },\n    });\n  }\n\n  /**\n   * Is provider supported.\n   */\n  public isSupported() {\n    return !!this._provider;\n  }\n\n  /**\n   * Sends the RPC call.\n   * @param data JSON-RPC ethereum call.\n   * @param callback Callback function to be executed.\n   */\n  public send(data: any, callback: (err, data) => any) {\n    this._provider.sendAsync(data, callback);\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"def2f0b4d22d8c820bbaf684fa4af8cdf7bc02a7","contentHash":"e944a756335ccd2890adea1962fb36ee75b0dcd075ed9ee29b2503051a1b790d"}}