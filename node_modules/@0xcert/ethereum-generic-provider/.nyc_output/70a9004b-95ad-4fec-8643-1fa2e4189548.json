{"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-generic-provider/src/index.ts":{"path":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-generic-provider/src/index.ts","statementMap":{"0":{"start":{"line":3,"column":4},"end":{"line":3,"column":71}},"1":{"start":{"line":3,"column":21},"end":{"line":3,"column":71}},"2":{"start":{"line":3,"column":53},"end":{"line":3,"column":71}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":57}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":57}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":35}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":37}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":37}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":34}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":36}}},"fnMap":{"0":{"name":"__export","decl":{"start":{"line":2,"column":9},"end":{"line":2,"column":17}},"loc":{"start":{"line":2,"column":21},"end":{"line":4,"column":1}},"line":2}},"branchMap":{"0":{"loc":{"start":{"line":3,"column":21},"end":{"line":3,"column":71}},"type":"if","locations":[{"start":{"line":3,"column":21},"end":{"line":3,"column":71}},{"start":{"line":3,"column":21},"end":{"line":3,"column":71}}],"line":3}},"s":{"0":7,"1":11,"2":11,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1},"f":{"0":7},"b":{"0":[11,0]},"inputSourceMap":{"version":3,"file":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-generic-provider/src/index.ts","sources":["/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-generic-provider/src/index.ts"],"names":[],"mappings":";;;;;AAAA,yDAAoD;AACpD,yDAAoD;AACpD,mCAA8B;AAC9B,qCAAgC;AAChC,qCAAgC;AAChC,kCAA6B;AAC7B,oCAA+B","sourcesContent":["export * from '@0xcert/scaffold/dist/core/mutation';\nexport * from '@0xcert/scaffold/dist/core/provider';\nexport * from './core/errors';\nexport * from './core/mutation';\nexport * from './core/provider';\nexport * from './core/types';\nexport * from './core/helpers';\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b7a78c16f78b742c421cbf54326da4e8cd24a68c","contentHash":"f26b1d4fa21e7bc7f5372e43f9976831d5efe061a5962a17d12673f6e4d926e5"},"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-generic-provider/src/core/errors.ts":{"path":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-generic-provider/src/core/errors.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":19},"end":{"line":3,"column":46}},"2":{"start":{"line":5,"column":4},"end":{"line":13,"column":5}},"3":{"start":{"line":6,"column":8},"end":{"line":6,"column":21}},"4":{"start":{"line":8,"column":9},"end":{"line":13,"column":5}},"5":{"start":{"line":9,"column":8},"end":{"line":9,"column":51}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":92}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":32}}},"fnMap":{"0":{"name":"parseError","decl":{"start":{"line":4,"column":9},"end":{"line":4,"column":19}},"loc":{"start":{"line":4,"column":27},"end":{"line":14,"column":1}},"line":4}},"branchMap":{"0":{"loc":{"start":{"line":5,"column":4},"end":{"line":13,"column":5}},"type":"if","locations":[{"start":{"line":5,"column":4},"end":{"line":13,"column":5}},{"start":{"line":5,"column":4},"end":{"line":13,"column":5}}],"line":5},"1":{"loc":{"start":{"line":8,"column":9},"end":{"line":13,"column":5}},"type":"if","locations":[{"start":{"line":8,"column":9},"end":{"line":13,"column":5}},{"start":{"line":8,"column":9},"end":{"line":13,"column":5}}],"line":8}},"s":{"0":1,"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":1},"f":{"0":0},"b":{"0":[0,0],"1":[0,0]},"inputSourceMap":{"version":3,"file":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-generic-provider/src/core/errors.ts","sources":["/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-generic-provider/src/core/errors.ts"],"names":[],"mappings":";;AAAA,+CAAgE;AAMhE,SAAgB,UAAU,CAAC,KAAU;IACnC,IAAI,KAAK,YAAY,wBAAa,EAAE;QAClC,OAAO,KAAK,CAAC;KACd;SAAM,IAAI,MAAM,CAAC,MAAM,CAAC,wBAAa,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;QACvD,OAAO,IAAI,wBAAa,CAAC,KAAK,CAAC,CAAC;KACjC;SAAM;QACL,OAAO,IAAI,wBAAa,CAAC,wBAAa,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;KAC/D;AACH,CAAC;AARD,gCAQC","sourcesContent":["import { ProviderError, ProviderIssue } from '@0xcert/scaffold';\n\n/**\n * Converts provider error into unified ProviderError.\n * @param error Error object.\n */\nexport function parseError(error: any) {\n  if (error instanceof ProviderError) {\n    return error;\n  } else if (Object.values(ProviderIssue).includes(error)) {\n    return new ProviderError(error);\n  } else {\n    return new ProviderError(ProviderIssue.CONTRACT_ERROR, error);\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a606be89967beec1e3c5f31014883c9cc67a7037","contentHash":"0cb7f26c05cd8d1f139392d12f9c7a237ff195f4969ea632378b9ed406d8b771"},"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-generic-provider/src/core/mutation.ts":{"path":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-generic-provider/src/core/mutation.ts","statementMap":{"0":{"start":{"line":2,"column":16},"end":{"line":10,"column":1}},"1":{"start":{"line":3,"column":28},"end":{"line":3,"column":110}},"2":{"start":{"line":3,"column":91},"end":{"line":3,"column":106}},"3":{"start":{"line":4,"column":4},"end":{"line":9,"column":7}},"4":{"start":{"line":5,"column":36},"end":{"line":5,"column":97}},"5":{"start":{"line":5,"column":42},"end":{"line":5,"column":70}},"6":{"start":{"line":5,"column":85},"end":{"line":5,"column":95}},"7":{"start":{"line":6,"column":35},"end":{"line":6,"column":100}},"8":{"start":{"line":6,"column":41},"end":{"line":6,"column":73}},"9":{"start":{"line":6,"column":88},"end":{"line":6,"column":98}},"10":{"start":{"line":7,"column":32},"end":{"line":7,"column":116}},"11":{"start":{"line":8,"column":8},"end":{"line":8,"column":78}},"12":{"start":{"line":11,"column":0},"end":{"line":11,"column":62}},"13":{"start":{"line":12,"column":25},"end":{"line":12,"column":58}},"14":{"start":{"line":13,"column":19},"end":{"line":13,"column":46}},"15":{"start":{"line":14,"column":17},"end":{"line":14,"column":34}},"16":{"start":{"line":15,"column":16},"end":{"line":15,"column":34}},"17":{"start":{"line":17,"column":0},"end":{"line":21,"column":77}},"18":{"start":{"line":18,"column":4},"end":{"line":18,"column":70}},"19":{"start":{"line":19,"column":4},"end":{"line":19,"column":62}},"20":{"start":{"line":20,"column":4},"end":{"line":20,"column":66}},"21":{"start":{"line":24,"column":8},"end":{"line":24,"column":16}},"22":{"start":{"line":25,"column":8},"end":{"line":25,"column":32}},"23":{"start":{"line":26,"column":8},"end":{"line":26,"column":28}},"24":{"start":{"line":27,"column":8},"end":{"line":27,"column":50}},"25":{"start":{"line":28,"column":8},"end":{"line":28,"column":24}},"26":{"start":{"line":29,"column":8},"end":{"line":29,"column":22}},"27":{"start":{"line":30,"column":8},"end":{"line":30,"column":34}},"28":{"start":{"line":31,"column":8},"end":{"line":33,"column":9}},"29":{"start":{"line":32,"column":12},"end":{"line":32,"column":52}},"30":{"start":{"line":34,"column":8},"end":{"line":34,"column":32}},"31":{"start":{"line":37,"column":8},"end":{"line":37,"column":24}},"32":{"start":{"line":40,"column":8},"end":{"line":40,"column":30}},"33":{"start":{"line":43,"column":8},"end":{"line":43,"column":35}},"34":{"start":{"line":46,"column":8},"end":{"line":46,"column":30}},"35":{"start":{"line":49,"column":8},"end":{"line":49,"column":32}},"36":{"start":{"line":52,"column":8},"end":{"line":52,"column":26}},"37":{"start":{"line":55,"column":8},"end":{"line":55,"column":55}},"38":{"start":{"line":58,"column":8},"end":{"line":58,"column":57}},"39":{"start":{"line":61,"column":8},"end":{"line":61,"column":39}},"40":{"start":{"line":62,"column":8},"end":{"line":62,"column":20}},"41":{"start":{"line":65,"column":8},"end":{"line":65,"column":37}},"42":{"start":{"line":66,"column":8},"end":{"line":66,"column":20}},"43":{"start":{"line":69,"column":8},"end":{"line":69,"column":39}},"44":{"start":{"line":70,"column":8},"end":{"line":70,"column":20}},"45":{"start":{"line":73,"column":8},"end":{"line":78,"column":9}},"46":{"start":{"line":74,"column":12},"end":{"line":74,"column":38}},"47":{"start":{"line":77,"column":12},"end":{"line":77,"column":44}},"48":{"start":{"line":79,"column":8},"end":{"line":79,"column":20}},"49":{"start":{"line":82,"column":8},"end":{"line":104,"column":11}},"50":{"start":{"line":83,"column":26},"end":{"line":83,"column":69}},"51":{"start":{"line":84,"column":12},"end":{"line":90,"column":13}},"52":{"start":{"line":85,"column":16},"end":{"line":85,"column":50}},"53":{"start":{"line":87,"column":17},"end":{"line":90,"column":13}},"54":{"start":{"line":88,"column":16},"end":{"line":88,"column":54}},"55":{"start":{"line":89,"column":16},"end":{"line":89,"column":43}},"56":{"start":{"line":91,"column":12},"end":{"line":102,"column":15}},"57":{"start":{"line":92,"column":16},"end":{"line":98,"column":17}},"58":{"start":{"line":93,"column":20},"end":{"line":93,"column":82}},"59":{"start":{"line":93,"column":71},"end":{"line":93,"column":80}},"60":{"start":{"line":94,"column":20},"end":{"line":94,"column":84}},"61":{"start":{"line":94,"column":71},"end":{"line":94,"column":82}},"62":{"start":{"line":97,"column":20},"end":{"line":97,"column":30}},"63":{"start":{"line":99,"column":16},"end":{"line":101,"column":17}},"64":{"start":{"line":100,"column":20},"end":{"line":100,"column":46}},"65":{"start":{"line":103,"column":12},"end":{"line":103,"column":24}},"66":{"start":{"line":107,"column":8},"end":{"line":110,"column":9}},"67":{"start":{"line":108,"column":12},"end":{"line":108,"column":38}},"68":{"start":{"line":109,"column":12},"end":{"line":109,"column":36}},"69":{"start":{"line":111,"column":8},"end":{"line":111,"column":20}},"70":{"start":{"line":114,"column":8},"end":{"line":116,"column":11}},"71":{"start":{"line":115,"column":12},"end":{"line":115,"column":46}},"72":{"start":{"line":119,"column":8},"end":{"line":150,"column":11}},"73":{"start":{"line":120,"column":23},"end":{"line":120,"column":56}},"74":{"start":{"line":121,"column":12},"end":{"line":126,"column":13}},"75":{"start":{"line":122,"column":16},"end":{"line":122,"column":54}},"76":{"start":{"line":124,"column":17},"end":{"line":126,"column":13}},"77":{"start":{"line":125,"column":16},"end":{"line":125,"column":81}},"78":{"start":{"line":127,"column":29},"end":{"line":130,"column":14}},"79":{"start":{"line":131,"column":32},"end":{"line":131,"column":43}},"80":{"start":{"line":132,"column":34},"end":{"line":132,"column":90}},"81":{"start":{"line":133,"column":32},"end":{"line":133,"column":131}},"82":{"start":{"line":134,"column":26},"end":{"line":141,"column":13}},"83":{"start":{"line":142,"column":12},"end":{"line":144,"column":13}},"84":{"start":{"line":143,"column":16},"end":{"line":143,"column":36}},"85":{"start":{"line":145,"column":24},"end":{"line":148,"column":14}},"86":{"start":{"line":149,"column":12},"end":{"line":149,"column":34}},"87":{"start":{"line":153,"column":8},"end":{"line":177,"column":11}},"88":{"start":{"line":154,"column":23},"end":{"line":154,"column":56}},"89":{"start":{"line":155,"column":12},"end":{"line":163,"column":13}},"90":{"start":{"line":156,"column":16},"end":{"line":156,"column":54}},"91":{"start":{"line":158,"column":17},"end":{"line":163,"column":13}},"92":{"start":{"line":159,"column":16},"end":{"line":159,"column":81}},"93":{"start":{"line":161,"column":17},"end":{"line":163,"column":13}},"94":{"start":{"line":162,"column":16},"end":{"line":162,"column":99}},"95":{"start":{"line":164,"column":32},"end":{"line":164,"column":80}},"96":{"start":{"line":165,"column":26},"end":{"line":171,"column":13}},"97":{"start":{"line":172,"column":24},"end":{"line":175,"column":14}},"98":{"start":{"line":176,"column":12},"end":{"line":176,"column":34}},"99":{"start":{"line":180,"column":8},"end":{"line":200,"column":11}},"100":{"start":{"line":181,"column":23},"end":{"line":181,"column":56}},"101":{"start":{"line":182,"column":12},"end":{"line":184,"column":13}},"102":{"start":{"line":183,"column":16},"end":{"line":183,"column":101}},"103":{"start":{"line":183,"column":71},"end":{"line":183,"column":99}},"104":{"start":{"line":185,"column":12},"end":{"line":199,"column":13}},"105":{"start":{"line":186,"column":16},"end":{"line":186,"column":76}},"106":{"start":{"line":187,"column":16},"end":{"line":187,"column":76}},"107":{"start":{"line":188,"column":16},"end":{"line":190,"column":54}},"108":{"start":{"line":189,"column":41},"end":{"line":189,"column":90}},"109":{"start":{"line":190,"column":35},"end":{"line":190,"column":52}},"110":{"start":{"line":191,"column":16},"end":{"line":198,"column":17}},"111":{"start":{"line":192,"column":20},"end":{"line":192,"column":43}},"112":{"start":{"line":193,"column":20},"end":{"line":193,"column":60}},"113":{"start":{"line":194,"column":20},"end":{"line":194,"column":78}},"114":{"start":{"line":197,"column":20},"end":{"line":197,"column":70}},"115":{"start":{"line":203,"column":8},"end":{"line":211,"column":11}},"116":{"start":{"line":204,"column":12},"end":{"line":204,"column":45}},"117":{"start":{"line":205,"column":12},"end":{"line":210,"column":13}},"118":{"start":{"line":206,"column":16},"end":{"line":206,"column":90}},"119":{"start":{"line":209,"column":16},"end":{"line":209,"column":95}},"120":{"start":{"line":214,"column":8},"end":{"line":220,"column":11}},"121":{"start":{"line":215,"column":24},"end":{"line":218,"column":14}},"122":{"start":{"line":219,"column":12},"end":{"line":219,"column":30}},"123":{"start":{"line":223,"column":8},"end":{"line":229,"column":11}},"124":{"start":{"line":224,"column":24},"end":{"line":227,"column":14}},"125":{"start":{"line":228,"column":12},"end":{"line":228,"column":30}},"126":{"start":{"line":232,"column":8},"end":{"line":237,"column":11}},"127":{"start":{"line":233,"column":24},"end":{"line":235,"column":14}},"128":{"start":{"line":236,"column":12},"end":{"line":236,"column":40}},"129":{"start":{"line":240,"column":8},"end":{"line":275,"column":11}},"130":{"start":{"line":241,"column":12},"end":{"line":274,"column":13}},"131":{"start":{"line":242,"column":16},"end":{"line":242,"column":32}},"132":{"start":{"line":243,"column":40},"end":{"line":243,"column":66}},"133":{"start":{"line":244,"column":16},"end":{"line":246,"column":17}},"134":{"start":{"line":245,"column":20},"end":{"line":245,"column":27}},"135":{"start":{"line":247,"column":43},"end":{"line":247,"column":77}},"136":{"start":{"line":248,"column":16},"end":{"line":270,"column":19}},"137":{"start":{"line":249,"column":43},"end":{"line":249,"column":97}},"138":{"start":{"line":249,"column":71},"end":{"line":249,"column":96}},"139":{"start":{"line":250,"column":20},"end":{"line":253,"column":21}},"140":{"start":{"line":251,"column":24},"end":{"line":251,"column":64}},"141":{"start":{"line":252,"column":24},"end":{"line":252,"column":31}},"142":{"start":{"line":254,"column":32},"end":{"line":254,"column":34}},"143":{"start":{"line":255,"column":20},"end":{"line":255,"column":55}},"144":{"start":{"line":256,"column":20},"end":{"line":256,"column":49}},"145":{"start":{"line":257,"column":35},"end":{"line":257,"column":118}},"146":{"start":{"line":257,"column":70},"end":{"line":257,"column":117}},"147":{"start":{"line":258,"column":36},"end":{"line":258,"column":120}},"148":{"start":{"line":258,"column":71},"end":{"line":258,"column":119}},"149":{"start":{"line":259,"column":20},"end":{"line":265,"column":21}},"150":{"start":{"line":260,"column":44},"end":{"line":260,"column":69}},"151":{"start":{"line":260,"column":62},"end":{"line":260,"column":68}},"152":{"start":{"line":261,"column":40},"end":{"line":261,"column":102}},"153":{"start":{"line":262,"column":24},"end":{"line":264,"column":27}},"154":{"start":{"line":263,"column":28},"end":{"line":263,"column":55}},"155":{"start":{"line":266,"column":20},"end":{"line":268,"column":23}},"156":{"start":{"line":267,"column":24},"end":{"line":267,"column":112}},"157":{"start":{"line":269,"column":20},"end":{"line":269,"column":41}},"158":{"start":{"line":273,"column":16},"end":{"line":273,"column":38}},"159":{"start":{"line":278,"column":0},"end":{"line":278,"column":28}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":44},"end":{"line":2,"column":45}},"loc":{"start":{"line":2,"column":89},"end":{"line":10,"column":1}},"line":2},"1":{"name":"adopt","decl":{"start":{"line":3,"column":13},"end":{"line":3,"column":18}},"loc":{"start":{"line":3,"column":26},"end":{"line":3,"column":112}},"line":3},"2":{"name":"(anonymous_2)","decl":{"start":{"line":3,"column":70},"end":{"line":3,"column":71}},"loc":{"start":{"line":3,"column":89},"end":{"line":3,"column":108}},"line":3},"3":{"name":"(anonymous_3)","decl":{"start":{"line":4,"column":36},"end":{"line":4,"column":37}},"loc":{"start":{"line":4,"column":63},"end":{"line":9,"column":5}},"line":4},"4":{"name":"fulfilled","decl":{"start":{"line":5,"column":17},"end":{"line":5,"column":26}},"loc":{"start":{"line":5,"column":34},"end":{"line":5,"column":99}},"line":5},"5":{"name":"rejected","decl":{"start":{"line":6,"column":17},"end":{"line":6,"column":25}},"loc":{"start":{"line":6,"column":33},"end":{"line":6,"column":102}},"line":6},"6":{"name":"step","decl":{"start":{"line":7,"column":17},"end":{"line":7,"column":21}},"loc":{"start":{"line":7,"column":30},"end":{"line":7,"column":118}},"line":7},"7":{"name":"(anonymous_7)","decl":{"start":{"line":17,"column":1},"end":{"line":17,"column":2}},"loc":{"start":{"line":17,"column":27},"end":{"line":21,"column":1}},"line":17},"8":{"name":"(anonymous_8)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":39},"end":{"line":35,"column":5}},"line":23},"9":{"name":"(anonymous_9)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":13},"end":{"line":38,"column":5}},"line":36},"10":{"name":"(anonymous_10)","decl":{"start":{"line":39,"column":4},"end":{"line":39,"column":5}},"loc":{"start":{"line":39,"column":19},"end":{"line":41,"column":5}},"line":39},"11":{"name":"(anonymous_11)","decl":{"start":{"line":42,"column":4},"end":{"line":42,"column":5}},"loc":{"start":{"line":42,"column":24},"end":{"line":44,"column":5}},"line":42},"12":{"name":"(anonymous_12)","decl":{"start":{"line":45,"column":4},"end":{"line":45,"column":5}},"loc":{"start":{"line":45,"column":19},"end":{"line":47,"column":5}},"line":45},"13":{"name":"(anonymous_13)","decl":{"start":{"line":48,"column":4},"end":{"line":48,"column":5}},"loc":{"start":{"line":48,"column":21},"end":{"line":50,"column":5}},"line":48},"14":{"name":"(anonymous_14)","decl":{"start":{"line":51,"column":4},"end":{"line":51,"column":5}},"loc":{"start":{"line":51,"column":15},"end":{"line":53,"column":5}},"line":51},"15":{"name":"(anonymous_15)","decl":{"start":{"line":54,"column":4},"end":{"line":54,"column":5}},"loc":{"start":{"line":54,"column":16},"end":{"line":56,"column":5}},"line":54},"16":{"name":"(anonymous_16)","decl":{"start":{"line":57,"column":4},"end":{"line":57,"column":5}},"loc":{"start":{"line":57,"column":18},"end":{"line":59,"column":5}},"line":57},"17":{"name":"(anonymous_17)","decl":{"start":{"line":60,"column":4},"end":{"line":60,"column":5}},"loc":{"start":{"line":60,"column":18},"end":{"line":63,"column":5}},"line":60},"18":{"name":"(anonymous_18)","decl":{"start":{"line":64,"column":4},"end":{"line":64,"column":5}},"loc":{"start":{"line":64,"column":16},"end":{"line":67,"column":5}},"line":64},"19":{"name":"(anonymous_19)","decl":{"start":{"line":68,"column":4},"end":{"line":68,"column":5}},"loc":{"start":{"line":68,"column":18},"end":{"line":71,"column":5}},"line":68},"20":{"name":"(anonymous_20)","decl":{"start":{"line":72,"column":4},"end":{"line":72,"column":5}},"loc":{"start":{"line":72,"column":24},"end":{"line":80,"column":5}},"line":72},"21":{"name":"(anonymous_21)","decl":{"start":{"line":81,"column":4},"end":{"line":81,"column":5}},"loc":{"start":{"line":81,"column":15},"end":{"line":105,"column":5}},"line":81},"22":{"name":"(anonymous_22)","decl":{"start":{"line":82,"column":47},"end":{"line":82,"column":48}},"loc":{"start":{"line":82,"column":60},"end":{"line":104,"column":9}},"line":82},"23":{"name":"(anonymous_23)","decl":{"start":{"line":91,"column":30},"end":{"line":91,"column":31}},"loc":{"start":{"line":91,"column":51},"end":{"line":102,"column":13}},"line":91},"24":{"name":"(anonymous_24)","decl":{"start":{"line":93,"column":65},"end":{"line":93,"column":66}},"loc":{"start":{"line":93,"column":71},"end":{"line":93,"column":80}},"line":93},"25":{"name":"(anonymous_25)","decl":{"start":{"line":94,"column":62},"end":{"line":94,"column":63}},"loc":{"start":{"line":94,"column":71},"end":{"line":94,"column":82}},"line":94},"26":{"name":"(anonymous_26)","decl":{"start":{"line":106,"column":4},"end":{"line":106,"column":5}},"loc":{"start":{"line":106,"column":13},"end":{"line":112,"column":5}},"line":106},"27":{"name":"(anonymous_27)","decl":{"start":{"line":113,"column":4},"end":{"line":113,"column":5}},"loc":{"start":{"line":113,"column":14},"end":{"line":117,"column":5}},"line":113},"28":{"name":"(anonymous_28)","decl":{"start":{"line":114,"column":47},"end":{"line":114,"column":48}},"loc":{"start":{"line":114,"column":60},"end":{"line":116,"column":9}},"line":114},"29":{"name":"(anonymous_29)","decl":{"start":{"line":118,"column":4},"end":{"line":118,"column":5}},"loc":{"start":{"line":118,"column":12},"end":{"line":151,"column":5}},"line":118},"30":{"name":"(anonymous_30)","decl":{"start":{"line":119,"column":47},"end":{"line":119,"column":48}},"loc":{"start":{"line":119,"column":60},"end":{"line":150,"column":9}},"line":119},"31":{"name":"(anonymous_31)","decl":{"start":{"line":152,"column":4},"end":{"line":152,"column":5}},"loc":{"start":{"line":152,"column":13},"end":{"line":178,"column":5}},"line":152},"32":{"name":"(anonymous_32)","decl":{"start":{"line":153,"column":47},"end":{"line":153,"column":48}},"loc":{"start":{"line":153,"column":60},"end":{"line":177,"column":9}},"line":153},"33":{"name":"(anonymous_33)","decl":{"start":{"line":179,"column":4},"end":{"line":179,"column":5}},"loc":{"start":{"line":179,"column":26},"end":{"line":201,"column":5}},"line":179},"34":{"name":"(anonymous_34)","decl":{"start":{"line":180,"column":47},"end":{"line":180,"column":48}},"loc":{"start":{"line":180,"column":60},"end":{"line":200,"column":9}},"line":180},"35":{"name":"(anonymous_35)","decl":{"start":{"line":183,"column":64},"end":{"line":183,"column":65}},"loc":{"start":{"line":183,"column":71},"end":{"line":183,"column":99}},"line":183},"36":{"name":"(anonymous_36)","decl":{"start":{"line":189,"column":26},"end":{"line":189,"column":27}},"loc":{"start":{"line":189,"column":41},"end":{"line":189,"column":90}},"line":189},"37":{"name":"(anonymous_37)","decl":{"start":{"line":190,"column":26},"end":{"line":190,"column":27}},"loc":{"start":{"line":190,"column":35},"end":{"line":190,"column":52}},"line":190},"38":{"name":"(anonymous_38)","decl":{"start":{"line":202,"column":4},"end":{"line":202,"column":5}},"loc":{"start":{"line":202,"column":25},"end":{"line":212,"column":5}},"line":202},"39":{"name":"(anonymous_39)","decl":{"start":{"line":203,"column":47},"end":{"line":203,"column":48}},"loc":{"start":{"line":203,"column":60},"end":{"line":211,"column":9}},"line":203},"40":{"name":"(anonymous_40)","decl":{"start":{"line":213,"column":4},"end":{"line":213,"column":5}},"loc":{"start":{"line":213,"column":27},"end":{"line":221,"column":5}},"line":213},"41":{"name":"(anonymous_41)","decl":{"start":{"line":214,"column":47},"end":{"line":214,"column":48}},"loc":{"start":{"line":214,"column":60},"end":{"line":220,"column":9}},"line":214},"42":{"name":"(anonymous_42)","decl":{"start":{"line":222,"column":4},"end":{"line":222,"column":5}},"loc":{"start":{"line":222,"column":28},"end":{"line":230,"column":5}},"line":222},"43":{"name":"(anonymous_43)","decl":{"start":{"line":223,"column":47},"end":{"line":223,"column":48}},"loc":{"start":{"line":223,"column":60},"end":{"line":229,"column":9}},"line":223},"44":{"name":"(anonymous_44)","decl":{"start":{"line":231,"column":4},"end":{"line":231,"column":5}},"loc":{"start":{"line":231,"column":19},"end":{"line":238,"column":5}},"line":231},"45":{"name":"(anonymous_45)","decl":{"start":{"line":232,"column":47},"end":{"line":232,"column":48}},"loc":{"start":{"line":232,"column":60},"end":{"line":237,"column":9}},"line":232},"46":{"name":"(anonymous_46)","decl":{"start":{"line":239,"column":4},"end":{"line":239,"column":5}},"loc":{"start":{"line":239,"column":16},"end":{"line":276,"column":5}},"line":239},"47":{"name":"(anonymous_47)","decl":{"start":{"line":240,"column":47},"end":{"line":240,"column":48}},"loc":{"start":{"line":240,"column":60},"end":{"line":275,"column":9}},"line":240},"48":{"name":"(anonymous_48)","decl":{"start":{"line":248,"column":48},"end":{"line":248,"column":49}},"loc":{"start":{"line":248,"column":57},"end":{"line":270,"column":17}},"line":248},"49":{"name":"(anonymous_49)","decl":{"start":{"line":249,"column":64},"end":{"line":249,"column":65}},"loc":{"start":{"line":249,"column":71},"end":{"line":249,"column":96}},"line":249},"50":{"name":"(anonymous_50)","decl":{"start":{"line":257,"column":63},"end":{"line":257,"column":64}},"loc":{"start":{"line":257,"column":70},"end":{"line":257,"column":117}},"line":257},"51":{"name":"(anonymous_51)","decl":{"start":{"line":258,"column":64},"end":{"line":258,"column":65}},"loc":{"start":{"line":258,"column":71},"end":{"line":258,"column":119}},"line":258},"52":{"name":"(anonymous_52)","decl":{"start":{"line":260,"column":55},"end":{"line":260,"column":56}},"loc":{"start":{"line":260,"column":62},"end":{"line":260,"column":68}},"line":260},"53":{"name":"(anonymous_53)","decl":{"start":{"line":262,"column":39},"end":{"line":262,"column":40}},"loc":{"start":{"line":262,"column":51},"end":{"line":264,"column":25}},"line":262},"54":{"name":"(anonymous_54)","decl":{"start":{"line":266,"column":36},"end":{"line":266,"column":37}},"loc":{"start":{"line":266,"column":48},"end":{"line":268,"column":21}},"line":266}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":16},"end":{"line":10,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":17},"end":{"line":2,"column":21}},{"start":{"line":2,"column":25},"end":{"line":2,"column":39}},{"start":{"line":2,"column":44},"end":{"line":10,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":35},"end":{"line":3,"column":109}},"type":"cond-expr","locations":[{"start":{"line":3,"column":56},"end":{"line":3,"column":61}},{"start":{"line":3,"column":64},"end":{"line":3,"column":109}}],"line":3},"2":{"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":34}},"type":"binary-expr","locations":[{"start":{"line":4,"column":16},"end":{"line":4,"column":17}},{"start":{"line":4,"column":22},"end":{"line":4,"column":33}}],"line":4},"3":{"loc":{"start":{"line":7,"column":32},"end":{"line":7,"column":115}},"type":"cond-expr","locations":[{"start":{"line":7,"column":46},"end":{"line":7,"column":67}},{"start":{"line":7,"column":70},"end":{"line":7,"column":115}}],"line":7},"4":{"loc":{"start":{"line":8,"column":51},"end":{"line":8,"column":67}},"type":"binary-expr","locations":[{"start":{"line":8,"column":51},"end":{"line":8,"column":61}},{"start":{"line":8,"column":65},"end":{"line":8,"column":67}}],"line":8},"5":{"loc":{"start":{"line":21,"column":20},"end":{"line":21,"column":75}},"type":"binary-expr","locations":[{"start":{"line":21,"column":20},"end":{"line":21,"column":42}},{"start":{"line":21,"column":47},"end":{"line":21,"column":74}}],"line":21},"6":{"loc":{"start":{"line":31,"column":8},"end":{"line":33,"column":9}},"type":"if","locations":[{"start":{"line":31,"column":8},"end":{"line":33,"column":9}},{"start":{"line":31,"column":8},"end":{"line":33,"column":9}}],"line":31},"7":{"loc":{"start":{"line":73,"column":8},"end":{"line":78,"column":9}},"type":"if","locations":[{"start":{"line":73,"column":8},"end":{"line":78,"column":9}},{"start":{"line":73,"column":8},"end":{"line":78,"column":9}}],"line":73},"8":{"loc":{"start":{"line":84,"column":12},"end":{"line":90,"column":13}},"type":"if","locations":[{"start":{"line":84,"column":12},"end":{"line":90,"column":13}},{"start":{"line":84,"column":12},"end":{"line":90,"column":13}}],"line":84},"9":{"loc":{"start":{"line":87,"column":17},"end":{"line":90,"column":13}},"type":"if","locations":[{"start":{"line":87,"column":17},"end":{"line":90,"column":13}},{"start":{"line":87,"column":17},"end":{"line":90,"column":13}}],"line":87},"10":{"loc":{"start":{"line":92,"column":16},"end":{"line":98,"column":17}},"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":98,"column":17}},{"start":{"line":92,"column":16},"end":{"line":98,"column":17}}],"line":92},"11":{"loc":{"start":{"line":99,"column":16},"end":{"line":101,"column":17}},"type":"if","locations":[{"start":{"line":99,"column":16},"end":{"line":101,"column":17}},{"start":{"line":99,"column":16},"end":{"line":101,"column":17}}],"line":99},"12":{"loc":{"start":{"line":107,"column":8},"end":{"line":110,"column":9}},"type":"if","locations":[{"start":{"line":107,"column":8},"end":{"line":110,"column":9}},{"start":{"line":107,"column":8},"end":{"line":110,"column":9}}],"line":107},"13":{"loc":{"start":{"line":121,"column":12},"end":{"line":126,"column":13}},"type":"if","locations":[{"start":{"line":121,"column":12},"end":{"line":126,"column":13}},{"start":{"line":121,"column":12},"end":{"line":126,"column":13}}],"line":121},"14":{"loc":{"start":{"line":124,"column":17},"end":{"line":126,"column":13}},"type":"if","locations":[{"start":{"line":124,"column":17},"end":{"line":126,"column":13}},{"start":{"line":124,"column":17},"end":{"line":126,"column":13}}],"line":124},"15":{"loc":{"start":{"line":133,"column":32},"end":{"line":133,"column":131}},"type":"cond-expr","locations":[{"start":{"line":133,"column":63},"end":{"line":133,"column":76}},{"start":{"line":133,"column":79},"end":{"line":133,"column":131}}],"line":133},"16":{"loc":{"start":{"line":142,"column":12},"end":{"line":144,"column":13}},"type":"if","locations":[{"start":{"line":142,"column":12},"end":{"line":144,"column":13}},{"start":{"line":142,"column":12},"end":{"line":144,"column":13}}],"line":142},"17":{"loc":{"start":{"line":155,"column":12},"end":{"line":163,"column":13}},"type":"if","locations":[{"start":{"line":155,"column":12},"end":{"line":163,"column":13}},{"start":{"line":155,"column":12},"end":{"line":163,"column":13}}],"line":155},"18":{"loc":{"start":{"line":158,"column":17},"end":{"line":163,"column":13}},"type":"if","locations":[{"start":{"line":158,"column":17},"end":{"line":163,"column":13}},{"start":{"line":158,"column":17},"end":{"line":163,"column":13}}],"line":158},"19":{"loc":{"start":{"line":161,"column":17},"end":{"line":163,"column":13}},"type":"if","locations":[{"start":{"line":161,"column":17},"end":{"line":163,"column":13}},{"start":{"line":161,"column":17},"end":{"line":163,"column":13}}],"line":161},"20":{"loc":{"start":{"line":182,"column":12},"end":{"line":184,"column":13}},"type":"if","locations":[{"start":{"line":182,"column":12},"end":{"line":184,"column":13}},{"start":{"line":182,"column":12},"end":{"line":184,"column":13}}],"line":182},"21":{"loc":{"start":{"line":182,"column":16},"end":{"line":182,"column":49}},"type":"binary-expr","locations":[{"start":{"line":182,"column":16},"end":{"line":182,"column":18}},{"start":{"line":182,"column":23},"end":{"line":182,"column":29}},{"start":{"line":182,"column":33},"end":{"line":182,"column":48}}],"line":182},"22":{"loc":{"start":{"line":183,"column":71},"end":{"line":183,"column":99}},"type":"cond-expr","locations":[{"start":{"line":183,"column":75},"end":{"line":183,"column":92}},{"start":{"line":183,"column":95},"end":{"line":183,"column":99}}],"line":183},"23":{"loc":{"start":{"line":185,"column":12},"end":{"line":199,"column":13}},"type":"if","locations":[{"start":{"line":185,"column":12},"end":{"line":199,"column":13}},{"start":{"line":185,"column":12},"end":{"line":199,"column":13}}],"line":185},"24":{"loc":{"start":{"line":185,"column":16},"end":{"line":185,"column":27}},"type":"binary-expr","locations":[{"start":{"line":185,"column":16},"end":{"line":185,"column":18}},{"start":{"line":185,"column":22},"end":{"line":185,"column":27}}],"line":185},"25":{"loc":{"start":{"line":189,"column":62},"end":{"line":189,"column":89}},"type":"binary-expr","locations":[{"start":{"line":189,"column":62},"end":{"line":189,"column":76}},{"start":{"line":189,"column":80},"end":{"line":189,"column":89}}],"line":189},"26":{"loc":{"start":{"line":190,"column":35},"end":{"line":190,"column":52}},"type":"cond-expr","locations":[{"start":{"line":190,"column":45},"end":{"line":190,"column":46}},{"start":{"line":190,"column":49},"end":{"line":190,"column":52}}],"line":190},"27":{"loc":{"start":{"line":191,"column":16},"end":{"line":198,"column":17}},"type":"if","locations":[{"start":{"line":191,"column":16},"end":{"line":198,"column":17}},{"start":{"line":191,"column":16},"end":{"line":198,"column":17}}],"line":191},"28":{"loc":{"start":{"line":205,"column":12},"end":{"line":210,"column":13}},"type":"if","locations":[{"start":{"line":205,"column":12},"end":{"line":210,"column":13}},{"start":{"line":205,"column":12},"end":{"line":210,"column":13}}],"line":205},"29":{"loc":{"start":{"line":205,"column":16},"end":{"line":205,"column":116}},"type":"binary-expr","locations":[{"start":{"line":205,"column":16},"end":{"line":205,"column":53}},{"start":{"line":205,"column":57},"end":{"line":205,"column":116}}],"line":205},"30":{"loc":{"start":{"line":244,"column":16},"end":{"line":246,"column":17}},"type":"if","locations":[{"start":{"line":244,"column":16},"end":{"line":246,"column":17}},{"start":{"line":244,"column":16},"end":{"line":246,"column":17}}],"line":244},"31":{"loc":{"start":{"line":250,"column":20},"end":{"line":253,"column":21}},"type":"if","locations":[{"start":{"line":250,"column":20},"end":{"line":253,"column":21}},{"start":{"line":250,"column":20},"end":{"line":253,"column":21}}],"line":250},"32":{"loc":{"start":{"line":259,"column":20},"end":{"line":265,"column":21}},"type":"if","locations":[{"start":{"line":259,"column":20},"end":{"line":265,"column":21}},{"start":{"line":259,"column":20},"end":{"line":265,"column":21}}],"line":259}},"s":{"0":1,"1":53,"2":0,"3":50,"4":51,"5":51,"6":2,"7":1,"8":1,"9":1,"10":99,"11":50,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":7,"22":7,"23":7,"24":7,"25":7,"26":7,"27":7,"28":7,"29":1,"30":7,"31":14,"32":0,"33":5,"34":2,"35":2,"36":0,"37":6,"38":15,"39":9,"40":9,"41":12,"42":12,"43":8,"44":8,"45":0,"46":0,"47":0,"48":0,"49":5,"50":5,"51":5,"52":1,"53":4,"54":3,"55":3,"56":4,"57":4,"58":4,"59":2,"60":4,"61":3,"62":0,"63":4,"64":3,"65":2,"66":0,"67":0,"68":0,"69":0,"70":3,"71":3,"72":1,"73":1,"74":1,"75":0,"76":1,"77":1,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":1,"88":1,"89":1,"90":0,"91":1,"92":1,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":10,"100":10,"101":10,"102":0,"103":0,"104":10,"105":7,"106":7,"107":7,"108":7,"109":7,"110":7,"111":5,"112":5,"113":5,"114":2,"115":6,"116":6,"117":6,"118":4,"119":2,"120":12,"121":12,"122":12,"123":0,"124":0,"125":0,"126":7,"127":7,"128":7,"129":5,"130":5,"131":5,"132":5,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":5,"159":1},"f":{"0":50,"1":53,"2":0,"3":50,"4":51,"5":1,"6":99,"7":1,"8":7,"9":14,"10":0,"11":5,"12":2,"13":2,"14":0,"15":6,"16":15,"17":9,"18":12,"19":8,"20":0,"21":5,"22":5,"23":4,"24":2,"25":3,"26":0,"27":3,"28":3,"29":1,"30":1,"31":1,"32":1,"33":10,"34":10,"35":0,"36":7,"37":7,"38":6,"39":6,"40":12,"41":12,"42":0,"43":0,"44":7,"45":7,"46":5,"47":5,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0},"b":{"0":[1,1,1],"1":[53,0],"2":[50,50],"3":[46,53],"4":[50,50],"5":[1,1],"6":[1,6],"7":[0,0],"8":[1,4],"9":[3,1],"10":[4,0],"11":[3,1],"12":[0,0],"13":[0,1],"14":[1,0],"15":[0,0],"16":[0,0],"17":[0,1],"18":[1,0],"19":[0,0],"20":[0,10],"21":[10,7,7],"22":[0,0],"23":[7,3],"24":[10,7],"25":[7,0],"26":[0,7],"27":[5,2],"28":[4,2],"29":[6,5],"30":[0,0],"31":[0,0],"32":[0,0]},"inputSourceMap":{"version":3,"file":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-generic-provider/src/core/mutation.ts","sources":["/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-generic-provider/src/core/mutation.ts"],"names":[],"mappings":"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","sourcesContent":["import { normalizeAddress } from '@0xcert/ethereum-utils';\nimport { MutationBase, MutationContext, MutationEvent } from '@0xcert/scaffold';\nimport { EventEmitter } from 'events';\nimport { MutationEventSignature, MutationEventTypeKind } from './types';\n\n/**\n * Possible mutation statuses.\n */\nexport enum MutationStatus {\n  INITIALIZED = 0,\n  PENDING = 1,\n  COMPLETED = 2,\n}\n\n/**\n * Ethreum transaction mutation.\n */\nexport class Mutation extends EventEmitter implements MutationBase {\n\n  /**\n   * Mutation Id (transaction hash).\n   */\n  protected _id: string;\n\n  /**\n   * Number of confirmations (blocks in blockchain after mutation is accepted) are necessary to mark a mutation complete.\n   */\n  protected _confirmations = 0;\n\n  /**\n   * Id (address) of the sender.\n   */\n  protected _senderId: string;\n\n  /**\n   * Id (address) of the receiver.\n   */\n  protected _receiverId: string;\n\n  /**\n   * Provider instance.\n   */\n  protected _provider: any;\n\n  /**\n   * Completion process heartbeat speed.\n   */\n  protected _speed = 14000;\n\n  /**\n   * Completion process loop timer.\n   */\n  protected _timer: any;\n\n  /**\n   * Completion process start timestamp.\n   */\n  protected _started: number;\n\n  /**\n   * Current mutation status.\n   */\n  protected _status: MutationStatus = MutationStatus.INITIALIZED;\n\n  /**\n   * Context.\n   */\n  protected _context?: any;\n\n  /**\n   * Mutations logs.\n   */\n  protected _logs: any[] = [];\n\n  /**\n   * Initialize mutation.\n   * @param provider Provider class with which we communicate with blockchain.\n   * @param id Smart contract address on which a mutation will be performed.\n   * @param context Mutation context.\n   */\n  public constructor(provider: any, id: string, context?: MutationContext) {\n    super();\n\n    this._id = id;\n    this._provider = provider;\n    if (this._provider.sandbox) {\n      this._status = MutationStatus.COMPLETED;\n    }\n    this._context = context;\n  }\n\n  /**\n   * Gets smart contract address.\n   */\n  public get id() {\n    return this._id;\n  }\n\n  /**\n   * Get provider intance.\n   */\n  public get provider() {\n    return this._provider;\n  }\n\n  /**\n   * Gets the number of confirmations of mutation.\n   */\n  public get confirmations() {\n    return this._confirmations;\n  }\n\n  /**\n   * Gets the sending address.\n   */\n  public get senderId() {\n    return this._senderId;\n  }\n\n  /**\n   * Gets the receiving address.\n   */\n  public get receiverId() {\n    return this._receiverId;\n  }\n\n  /**\n   * Gets mutation logs.\n   */\n  public get logs() {\n    return this._logs;\n  }\n\n  /**\n   * Checks if mutation in pending.\n   */\n  public isPending() {\n    return this._status === MutationStatus.PENDING;\n  }\n\n  /**\n   * Checks if mutation has reached the required number of confirmation.\n   */\n  public isCompleted() {\n    return this._status === MutationStatus.COMPLETED;\n  }\n\n  /**\n   * Emits mutation event.\n   */\n  public emit(event: MutationEvent.CONFIRM, mutation: Mutation);\n  public emit(event: MutationEvent.COMPLETE, mutation: Mutation);\n  public emit(event: MutationEvent.ERROR, error: any);\n  public emit(...args) {\n    super.emit.call(this, ...args);\n    return this;\n  }\n\n  /**\n   * Attaches on mutation events.\n   */\n  public on(event: MutationEvent.CONFIRM, handler: (m: Mutation) => any);\n  public on(event: MutationEvent.COMPLETE, handler: (m: Mutation) => any);\n  public on(event: MutationEvent.ERROR, handler: (e: any, m: Mutation) => any);\n  public on(...args) {\n    super.on.call(this, ...args);\n    return this;\n  }\n\n  /**\n   * Once handler.\n   */\n  public once(event: MutationEvent.CONFIRM, handler: (m: Mutation) => any);\n  public once(event: MutationEvent.COMPLETE, handler: (m: Mutation) => any);\n  public once(event: MutationEvent.ERROR, handler: (e: any, m: Mutation) => any);\n  public once(...args) {\n    super.once.call(this, ...args);\n    return this;\n  }\n\n  /**\n   * Dettaches from mutation events.\n   */\n  public off(event: MutationEvent.ERROR, handler: (e: any, m: Mutation) => any);\n  public off(event: MutationEvent);\n  public off(event, handler?) {\n    if (handler) {\n      super.off(event, handler);\n    } else {\n      super.removeAllListeners(event);\n    }\n    return this;\n  }\n\n  /**\n   * Waits until mutation is resolved (mutation reaches the specified number of confirmations).\n   */\n  public async complete() {\n    const start = this._status === MutationStatus.INITIALIZED;\n\n    if (this.isCompleted()) {\n      return this.resolveCurrentState();\n    } else if (!this.isPending()) {\n      this._status = MutationStatus.PENDING;\n      this._started = Date.now();\n    }\n\n    await new Promise((resolve, reject) => {\n      if (!this.isCompleted()) {\n        this.once(MutationEvent.COMPLETE, () => resolve());\n        this.once(MutationEvent.ERROR, (err) => reject(err));\n      } else {\n        resolve();\n      }\n      if (start) {\n        this.loopUntilCompleted();\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Stops listening for confirmations.\n   */\n  public forget() {\n    if (this._timer) {\n      clearTimeout(this._timer);\n      this._timer = undefined;\n    }\n\n    return this;\n  }\n\n  /**\n   * Resolves mutation with its current data.\n   */\n  public async resolve() {\n    return this.resolveCurrentState();\n  }\n\n  /**\n   * Retries mutation with a higher gas price if possible. It uses the provider's retryGasMultiplier to\n   * calculate gas price.\n   * @notice Returns error if a mutation is already accepted onto the blockchain.\n   */\n  public async retry() {\n    const tx = await this.getTransactionObject();\n    if (!tx) {\n      throw new Error('Mutation not found');\n    } else if (tx.blockNumber) {\n      throw new Error('Mutation already accepted onto the blockchain');\n    }\n\n    const gasPrice = await this._provider.post({\n      method: 'eth_gasPrice',\n      params: [],\n    });\n    const oldGasPrice = tx.gasPrice;\n    const retryGasPrice = gasPrice.result * this._provider.retryGasPriceMultiplier;\n    // We first calculate new gas price based on current network conditions and\n    // retryGasPriceMultiplier if calculated gas price is lower than the original gas price, then we\n    // use the retryGasPriceMultiplier with the original gas price.\n    const newGasPrice = retryGasPrice >= oldGasPrice ? retryGasPrice : oldGasPrice * this._provider.retryGasPriceMultiplier;\n    const attrs = {\n      from: tx.from,\n      data: tx.input,\n      nonce: tx.nonce,\n      value: tx.value,\n      gas: tx.gas,\n      gasPrice: `0x${Math.ceil(newGasPrice).toString(16)}`,\n    };\n    if (tx.to) {\n      attrs['to'] = tx.to;\n    }\n    const res = await this._provider.post({\n      method: 'eth_sendTransaction',\n      params: [attrs],\n    });\n    this._id = res.result;\n  }\n\n  /**\n   * Cancels mutation if possible.\n   * @notice Returns error if a mutation is already accepted onto the blockchain or if you are not the\n   * mutation maker.\n   */\n  public async cancel() {\n    const tx = await this.getTransactionObject();\n    if (!tx) {\n      throw new Error('Mutation not found');\n    } else if (tx.blockNumber) {\n      throw new Error('Mutation already accepted onto the blockchain');\n    } else if (tx.from.toLowerCase() !== this._provider.accountId.toLowerCase()) {\n      throw new Error('You are not the maker of this mutation so you cannot cancel it.');\n    }\n\n    const newGasPrice = `0x${Math.ceil(tx.gasPrice * 1.1).toString(16)}`;\n    const attrs = {\n      from: tx.from,\n      to: tx.from,\n      nonce: tx.nonce,\n      value: '0x0',\n      gasPrice: newGasPrice,\n    };\n    const res = await this._provider.post({\n      method: 'eth_sendTransaction',\n      params: [attrs],\n    });\n    this._id = res.result;\n  }\n\n  /**\n   * Helper method that resolves current mutation status.\n   */\n  protected async resolveCurrentState() {\n    const tx = await this.getTransactionObject();\n    if (tx && (!tx.to || tx.to === '0x0')) {\n      tx.to = await this.getTransactionReceipt().then((r) => r ? r.contractAddress : null);\n    }\n    if (tx && tx.to) {\n      this._senderId = normalizeAddress(tx.from);\n      this._receiverId = normalizeAddress(tx.to);\n      this._confirmations = await this.getLastBlock()\n        .then((lastBlock) => lastBlock - parseInt(tx.blockNumber || lastBlock))\n        .then((num) => num < 0 ? 0 : num); // -1 when pending transaction is moved to the next block.\n\n      if (this._confirmations >= this._provider.requiredConfirmations) {\n        await this.parseLogs();\n        this._status = MutationStatus.COMPLETED;\n        return this.emit(MutationEvent.COMPLETE, this); // success\n      } else {\n        this.emit(MutationEvent.CONFIRM, this);\n      }\n    }\n  }\n\n  /**\n   * Helper methods for waiting until mutation is completed.\n   * IMPORTANT: After submiting a transaction to the Ethereum network, the\n   * transaction can not be found for some seconds. This happens because the\n   * Ethereum nodes in a cluster are not in sync and we must wait some time for\n   * this to happen.\n   */\n  protected async loopUntilCompleted() {\n    await this.resolveCurrentState();\n    if (this._provider.mutationTimeout === -1 || Date.now() - this._started < this._provider.mutationTimeout) {\n      this._timer = setTimeout(this.loopUntilCompleted.bind(this), this._speed);\n    } else {\n      this.emit(MutationEvent.ERROR, new Error('Mutation has timed out'));\n    }\n  }\n\n  /**\n   * Gets transaction data.\n   */\n  protected async getTransactionObject() {\n    const res = await this._provider.post({\n      method: 'eth_getTransactionByHash',\n      params: [this.id],\n    });\n    return res.result;\n  }\n\n  /**\n   * Gets transaction receipt.\n   */\n  protected async getTransactionReceipt() {\n    const res = await this._provider.post({\n      method: 'eth_getTransactionReceipt',\n      params: [this.id],\n    });\n    return res.result;\n  }\n\n  /**\n   * Gets the latest block number.\n   */\n  protected async getLastBlock() {\n    const res = await this._provider.post({\n      method: 'eth_blockNumber',\n    });\n    return parseInt(res.result);\n  }\n\n  /**\n   * Parses transaction receipt logs.\n   */\n  protected async parseLogs() {\n    try {\n      this._logs = [];\n      const eventSignatures: MutationEventSignature[] = this._context.getContext();\n      if (!eventSignatures) {\n        return;\n      }\n      const transactionReceipt = await this.getTransactionReceipt();\n      transactionReceipt.logs.forEach((log) => {\n        const eventSignature = eventSignatures.find((e) => e.topic === log.topics[0]);\n        if (!eventSignature) {\n          this._provider.log(JSON.stringify(log));\n          return;\n        }\n        const obj = {};\n        obj['event'] = eventSignature.name;\n        obj['address'] = log.address;\n        const normal = eventSignature.types.filter((t) => t.kind === MutationEventTypeKind.NORMAL);\n        const indexed = eventSignature.types.filter((t) => t.kind === MutationEventTypeKind.INDEXED);\n        if (normal.length > 0) {\n          const normalTypes = normal.map((n) => n.type);\n          const decoded = this._provider.encoder.decodeParameters(normalTypes, log.data);\n          normal.forEach((n, idx) => {\n            obj[n.name] = decoded[idx];\n          });\n        }\n        indexed.forEach((i, idx) => {\n          obj[i.name] = this._provider.encoder.decodeParameters([i.type], log.topics[idx + 1])[0];\n        });\n        this._logs.push(obj);\n      });\n    } catch (e) {\n      this._provider.log(e);\n    }\n  }\n\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"82d5a3d04e0059a7b8f46683da23c38bc2b8e82a","contentHash":"99c00f6070e748af0f617f3d970156b8230cbc693d4a23fdd5478401da23ff91"},"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-generic-provider/src/core/types.ts":{"path":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-generic-provider/src/core/types.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":4,"column":0},"end":{"line":9,"column":65}},"2":{"start":{"line":5,"column":4},"end":{"line":5,"column":56}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":52}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":58}},"5":{"start":{"line":8,"column":4},"end":{"line":8,"column":66}},"6":{"start":{"line":11,"column":0},"end":{"line":14,"column":98}},"7":{"start":{"line":12,"column":4},"end":{"line":12,"column":74}},"8":{"start":{"line":13,"column":4},"end":{"line":13,"column":76}},"9":{"start":{"line":16,"column":0},"end":{"line":20,"column":68}},"10":{"start":{"line":17,"column":4},"end":{"line":17,"column":50}},"11":{"start":{"line":18,"column":4},"end":{"line":18,"column":56}},"12":{"start":{"line":19,"column":4},"end":{"line":19,"column":56}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":1},"end":{"line":4,"column":2}},"loc":{"start":{"line":4,"column":23},"end":{"line":9,"column":1}},"line":4},"1":{"name":"(anonymous_1)","decl":{"start":{"line":11,"column":1},"end":{"line":11,"column":2}},"loc":{"start":{"line":11,"column":34},"end":{"line":14,"column":1}},"line":11},"2":{"name":"(anonymous_2)","decl":{"start":{"line":16,"column":1},"end":{"line":16,"column":2}},"loc":{"start":{"line":16,"column":24},"end":{"line":20,"column":1}},"line":16}},"branchMap":{"0":{"loc":{"start":{"line":9,"column":16},"end":{"line":9,"column":63}},"type":"binary-expr","locations":[{"start":{"line":9,"column":16},"end":{"line":9,"column":34}},{"start":{"line":9,"column":39},"end":{"line":9,"column":62}}],"line":9},"1":{"loc":{"start":{"line":14,"column":27},"end":{"line":14,"column":96}},"type":"binary-expr","locations":[{"start":{"line":14,"column":27},"end":{"line":14,"column":56}},{"start":{"line":14,"column":61},"end":{"line":14,"column":95}}],"line":14},"2":{"loc":{"start":{"line":20,"column":17},"end":{"line":20,"column":66}},"type":"binary-expr","locations":[{"start":{"line":20,"column":17},"end":{"line":20,"column":36}},{"start":{"line":20,"column":41},"end":{"line":20,"column":65}}],"line":20}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1},"f":{"0":1,"1":1,"2":1},"b":{"0":[1,1],"1":[1,1],"2":[1,1]},"inputSourceMap":{"version":3,"file":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-generic-provider/src/core/types.ts","sources":["/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-generic-provider/src/core/types.ts"],"names":[],"mappings":";;AAwBA,IAAY,UAKX;AALD,WAAY,UAAU;IACpB,mDAAY,CAAA;IACZ,+CAAU,CAAA;IACV,qDAAa,CAAA;IACb,6DAAiB,CAAA;AACnB,CAAC,EALW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAKrB;AAsED,IAAY,qBAGX;AAHD,WAAY,qBAAqB;IAC/B,qEAAU,CAAA;IACV,uEAAW,CAAA;AACb,CAAC,EAHW,qBAAqB,GAArB,6BAAqB,KAArB,6BAAqB,QAGhC;AAKD,IAAY,WAIX;AAJD,WAAY,WAAW;IACrB,6CAAI,CAAA;IACJ,mDAAO,CAAA;IACP,mDAAO,CAAA;AACT,CAAC,EAJW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAItB","sourcesContent":["/**\n * Gateway configuration definition.\n */\nexport interface GatewayConfig {\n\n  /**\n   * Order gateway smart contract address.\n   */\n  actionsOrderId: string;\n\n  /**\n   * Deploy asset ledger gateway smart contract address.\n   */\n  assetLedgerDeployOrderId: string;\n\n  /**\n   * Deploy value ledger gateway smart contract address.\n   */\n  valueLedgerDeployOrderId: string;\n}\n\n/**\n * Signature kinds.\n */\nexport enum SignMethod {\n  ETH_SIGN = 0,\n  TREZOR = 1,\n  NO_PREFIX = 2,\n  PERSONAL_SIGN = 3,\n}\n\n/**\n * Rpc response definition.\n */\nexport interface RpcResponse {\n\n  /**\n   * RPC request identifier.\n   */\n  id: number;\n\n  /**\n   * RPC protocol version.\n   */\n  jsonrpc: string;\n\n  /**\n   * Response data.\n   */\n  result: any;\n}\n\n/**\n * Send option definition.\n */\nexport interface SendOptions {\n\n  /**\n   * RPC procedure name.\n   */\n  method: string;\n\n  /**\n   * RPC procedure parameters.\n   */\n  params: any[];\n\n  /**\n   * RPC request identifier.\n   */\n  id?: number;\n\n  /**\n   * RPC protocol version.\n   */\n  jsonrpc?: string;\n}\n\n/**\n * Mutation event signature definition.\n */\nexport interface MutationEventSignature {\n  topic: string;\n  name: string;\n  types: MutationEventType[];\n}\n\n/**\n * Mutation event type definition.\n */\nexport interface MutationEventType {\n  kind: MutationEventTypeKind;\n  name: string;\n  type: string;\n}\n\n/**\n * Mutation event type kind definition.\n */\nexport enum MutationEventTypeKind {\n  NORMAL = 0,\n  INDEXED = 1,\n}\n\n/**\n * Network kind.\n */\nexport enum NetworkKind {\n  LIVE,\n  ROPSTEN,\n  RINKEBY,\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"171f9d00a675d41253e6e20bbbdb37d2166f00ee","contentHash":"b938661d56af369ae5a6b2eb80b468eb2bc1fcbcb1ab0885324d0f56cebe86b1"},"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-generic-provider/src/core/provider.ts":{"path":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-generic-provider/src/core/provider.ts","statementMap":{"0":{"start":{"line":2,"column":16},"end":{"line":10,"column":1}},"1":{"start":{"line":3,"column":28},"end":{"line":3,"column":110}},"2":{"start":{"line":3,"column":91},"end":{"line":3,"column":106}},"3":{"start":{"line":4,"column":4},"end":{"line":9,"column":7}},"4":{"start":{"line":5,"column":36},"end":{"line":5,"column":97}},"5":{"start":{"line":5,"column":42},"end":{"line":5,"column":70}},"6":{"start":{"line":5,"column":85},"end":{"line":5,"column":95}},"7":{"start":{"line":6,"column":35},"end":{"line":6,"column":100}},"8":{"start":{"line":6,"column":41},"end":{"line":6,"column":73}},"9":{"start":{"line":6,"column":88},"end":{"line":6,"column":98}},"10":{"start":{"line":7,"column":32},"end":{"line":7,"column":116}},"11":{"start":{"line":8,"column":8},"end":{"line":8,"column":78}},"12":{"start":{"line":11,"column":0},"end":{"line":11,"column":62}},"13":{"start":{"line":12,"column":25},"end":{"line":12,"column":58}},"14":{"start":{"line":13,"column":19},"end":{"line":13,"column":46}},"15":{"start":{"line":14,"column":17},"end":{"line":14,"column":34}},"16":{"start":{"line":15,"column":17},"end":{"line":15,"column":36}},"17":{"start":{"line":16,"column":16},"end":{"line":16,"column":34}},"18":{"start":{"line":19,"column":8},"end":{"line":19,"column":16}},"19":{"start":{"line":20,"column":8},"end":{"line":20,"column":21}},"20":{"start":{"line":21,"column":8},"end":{"line":21,"column":113}},"21":{"start":{"line":22,"column":8},"end":{"line":22,"column":43}},"22":{"start":{"line":23,"column":8},"end":{"line":23,"column":51}},"23":{"start":{"line":24,"column":8},"end":{"line":24,"column":61}},"24":{"start":{"line":25,"column":8},"end":{"line":25,"column":120}},"25":{"start":{"line":26,"column":8},"end":{"line":26,"column":120}},"26":{"start":{"line":27,"column":8},"end":{"line":27,"column":119}},"27":{"start":{"line":28,"column":8},"end":{"line":28,"column":126}},"28":{"start":{"line":29,"column":8},"end":{"line":29,"column":114}},"29":{"start":{"line":30,"column":8},"end":{"line":30,"column":119}},"30":{"start":{"line":31,"column":8},"end":{"line":31,"column":132}},"31":{"start":{"line":32,"column":8},"end":{"line":32,"column":88}},"32":{"start":{"line":33,"column":8},"end":{"line":33,"column":88}},"33":{"start":{"line":34,"column":8},"end":{"line":36,"column":29}},"34":{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},"35":{"start":{"line":40,"column":12},"end":{"line":40,"column":33}},"36":{"start":{"line":44,"column":8},"end":{"line":44,"column":39}},"37":{"start":{"line":47,"column":8},"end":{"line":47,"column":47}},"38":{"start":{"line":48,"column":8},"end":{"line":50,"column":9}},"39":{"start":{"line":49,"column":12},"end":{"line":49,"column":84}},"40":{"start":{"line":51,"column":8},"end":{"line":51,"column":29}},"41":{"start":{"line":54,"column":8},"end":{"line":54,"column":46}},"42":{"start":{"line":57,"column":8},"end":{"line":57,"column":94}},"43":{"start":{"line":57,"column":59},"end":{"line":57,"column":92}},"44":{"start":{"line":60,"column":8},"end":{"line":60,"column":35}},"45":{"start":{"line":63,"column":8},"end":{"line":72,"column":9}},"46":{"start":{"line":64,"column":12},"end":{"line":68,"column":14}},"47":{"start":{"line":71,"column":12},"end":{"line":71,"column":39}},"48":{"start":{"line":75,"column":8},"end":{"line":75,"column":39}},"49":{"start":{"line":76,"column":8},"end":{"line":76,"column":20}},"50":{"start":{"line":79,"column":8},"end":{"line":79,"column":37}},"51":{"start":{"line":80,"column":8},"end":{"line":80,"column":20}},"52":{"start":{"line":83,"column":8},"end":{"line":83,"column":39}},"53":{"start":{"line":84,"column":8},"end":{"line":84,"column":20}},"54":{"start":{"line":87,"column":8},"end":{"line":92,"column":9}},"55":{"start":{"line":88,"column":12},"end":{"line":88,"column":38}},"56":{"start":{"line":91,"column":12},"end":{"line":91,"column":44}},"57":{"start":{"line":93,"column":8},"end":{"line":93,"column":20}},"58":{"start":{"line":96,"column":8},"end":{"line":117,"column":11}},"59":{"start":{"line":97,"column":12},"end":{"line":99,"column":13}},"60":{"start":{"line":98,"column":16},"end":{"line":98,"column":54}},"61":{"start":{"line":100,"column":12},"end":{"line":116,"column":13}},"62":{"start":{"line":101,"column":28},"end":{"line":104,"column":18}},"63":{"start":{"line":105,"column":16},"end":{"line":105,"column":34}},"64":{"start":{"line":107,"column":17},"end":{"line":116,"column":13}},"65":{"start":{"line":108,"column":28},"end":{"line":111,"column":18}},"66":{"start":{"line":112,"column":16},"end":{"line":112,"column":34}},"67":{"start":{"line":115,"column":16},"end":{"line":115,"column":67}},"68":{"start":{"line":120,"column":8},"end":{"line":126,"column":11}},"69":{"start":{"line":121,"column":24},"end":{"line":124,"column":14}},"70":{"start":{"line":125,"column":12},"end":{"line":125,"column":75}},"71":{"start":{"line":125,"column":41},"end":{"line":125,"column":73}},"72":{"start":{"line":129,"column":8},"end":{"line":135,"column":11}},"73":{"start":{"line":130,"column":24},"end":{"line":133,"column":14}},"74":{"start":{"line":134,"column":12},"end":{"line":134,"column":30}},"75":{"start":{"line":138,"column":8},"end":{"line":138,"column":75}},"76":{"start":{"line":141,"column":35},"end":{"line":141,"column":74}},"77":{"start":{"line":142,"column":8},"end":{"line":142,"column":81}},"78":{"start":{"line":142,"column":54},"end":{"line":142,"column":79}},"79":{"start":{"line":145,"column":8},"end":{"line":173,"column":11}},"80":{"start":{"line":146,"column":28},"end":{"line":146,"column":54}},"81":{"start":{"line":147,"column":12},"end":{"line":171,"column":13}},"82":{"start":{"line":148,"column":16},"end":{"line":170,"column":17}},"83":{"start":{"line":149,"column":20},"end":{"line":162,"column":21}},"84":{"start":{"line":150,"column":36},"end":{"line":150,"column":128}},"85":{"start":{"line":151,"column":24},"end":{"line":151,"column":96}},"86":{"start":{"line":154,"column":24},"end":{"line":161,"column":25}},"87":{"start":{"line":155,"column":28},"end":{"line":155,"column":58}},"88":{"start":{"line":156,"column":40},"end":{"line":156,"column":125}},"89":{"start":{"line":157,"column":28},"end":{"line":157,"column":116}},"90":{"start":{"line":160,"column":28},"end":{"line":160,"column":38}},"91":{"start":{"line":163,"column":20},"end":{"line":165,"column":21}},"92":{"start":{"line":164,"column":24},"end":{"line":164,"column":90}},"93":{"start":{"line":166,"column":20},"end":{"line":169,"column":21}},"94":{"start":{"line":167,"column":36},"end":{"line":167,"column":137}},"95":{"start":{"line":168,"column":24},"end":{"line":168,"column":121}},"96":{"start":{"line":172,"column":12},"end":{"line":172,"column":41}},"97":{"start":{"line":176,"column":8},"end":{"line":202,"column":11}},"98":{"start":{"line":177,"column":28},"end":{"line":177,"column":118}},"99":{"start":{"line":178,"column":12},"end":{"line":201,"column":15}},"100":{"start":{"line":179,"column":16},"end":{"line":192,"column":19}},"101":{"start":{"line":180,"column":20},"end":{"line":190,"column":21}},"102":{"start":{"line":181,"column":24},"end":{"line":181,"column":38}},"103":{"start":{"line":182,"column":24},"end":{"line":182,"column":43}},"104":{"start":{"line":184,"column":25},"end":{"line":190,"column":21}},"105":{"start":{"line":185,"column":24},"end":{"line":185,"column":38}},"106":{"start":{"line":186,"column":24},"end":{"line":186,"column":49}},"107":{"start":{"line":188,"column":25},"end":{"line":190,"column":21}},"108":{"start":{"line":189,"column":24},"end":{"line":189,"column":56}},"109":{"start":{"line":191,"column":20},"end":{"line":191,"column":40}},"110":{"start":{"line":194,"column":16},"end":{"line":194,"column":90}},"111":{"start":{"line":196,"column":16},"end":{"line":199,"column":17}},"112":{"start":{"line":197,"column":38},"end":{"line":197,"column":114}},"113":{"start":{"line":198,"column":20},"end":{"line":198,"column":60}},"114":{"start":{"line":200,"column":16},"end":{"line":200,"column":29}},"115":{"start":{"line":205,"column":8},"end":{"line":205,"column":19}},"116":{"start":{"line":206,"column":8},"end":{"line":206,"column":24}},"117":{"start":{"line":209,"column":0},"end":{"line":209,"column":42}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":44},"end":{"line":2,"column":45}},"loc":{"start":{"line":2,"column":89},"end":{"line":10,"column":1}},"line":2},"1":{"name":"adopt","decl":{"start":{"line":3,"column":13},"end":{"line":3,"column":18}},"loc":{"start":{"line":3,"column":26},"end":{"line":3,"column":112}},"line":3},"2":{"name":"(anonymous_2)","decl":{"start":{"line":3,"column":70},"end":{"line":3,"column":71}},"loc":{"start":{"line":3,"column":89},"end":{"line":3,"column":108}},"line":3},"3":{"name":"(anonymous_3)","decl":{"start":{"line":4,"column":36},"end":{"line":4,"column":37}},"loc":{"start":{"line":4,"column":63},"end":{"line":9,"column":5}},"line":4},"4":{"name":"fulfilled","decl":{"start":{"line":5,"column":17},"end":{"line":5,"column":26}},"loc":{"start":{"line":5,"column":34},"end":{"line":5,"column":99}},"line":5},"5":{"name":"rejected","decl":{"start":{"line":6,"column":17},"end":{"line":6,"column":25}},"loc":{"start":{"line":6,"column":33},"end":{"line":6,"column":102}},"line":6},"6":{"name":"step","decl":{"start":{"line":7,"column":17},"end":{"line":7,"column":21}},"loc":{"start":{"line":7,"column":30},"end":{"line":7,"column":118}},"line":7},"7":{"name":"(anonymous_7)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":25},"end":{"line":37,"column":5}},"line":18},"8":{"name":"(anonymous_8)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":17},"end":{"line":42,"column":5}},"line":38},"9":{"name":"(anonymous_9)","decl":{"start":{"line":43,"column":4},"end":{"line":43,"column":5}},"loc":{"start":{"line":43,"column":20},"end":{"line":45,"column":5}},"line":43},"10":{"name":"(anonymous_10)","decl":{"start":{"line":46,"column":4},"end":{"line":46,"column":5}},"loc":{"start":{"line":46,"column":22},"end":{"line":52,"column":5}},"line":46},"11":{"name":"(anonymous_11)","decl":{"start":{"line":53,"column":4},"end":{"line":53,"column":5}},"loc":{"start":{"line":53,"column":29},"end":{"line":55,"column":5}},"line":53},"12":{"name":"(anonymous_12)","decl":{"start":{"line":56,"column":4},"end":{"line":56,"column":5}},"loc":{"start":{"line":56,"column":32},"end":{"line":58,"column":5}},"line":56},"13":{"name":"(anonymous_13)","decl":{"start":{"line":57,"column":51},"end":{"line":57,"column":52}},"loc":{"start":{"line":57,"column":59},"end":{"line":57,"column":92}},"line":57},"14":{"name":"(anonymous_14)","decl":{"start":{"line":59,"column":4},"end":{"line":59,"column":5}},"loc":{"start":{"line":59,"column":24},"end":{"line":61,"column":5}},"line":59},"15":{"name":"(anonymous_15)","decl":{"start":{"line":62,"column":4},"end":{"line":62,"column":5}},"loc":{"start":{"line":62,"column":30},"end":{"line":73,"column":5}},"line":62},"16":{"name":"(anonymous_16)","decl":{"start":{"line":74,"column":4},"end":{"line":74,"column":5}},"loc":{"start":{"line":74,"column":18},"end":{"line":77,"column":5}},"line":74},"17":{"name":"(anonymous_17)","decl":{"start":{"line":78,"column":4},"end":{"line":78,"column":5}},"loc":{"start":{"line":78,"column":16},"end":{"line":81,"column":5}},"line":78},"18":{"name":"(anonymous_18)","decl":{"start":{"line":82,"column":4},"end":{"line":82,"column":5}},"loc":{"start":{"line":82,"column":18},"end":{"line":85,"column":5}},"line":82},"19":{"name":"(anonymous_19)","decl":{"start":{"line":86,"column":4},"end":{"line":86,"column":5}},"loc":{"start":{"line":86,"column":24},"end":{"line":94,"column":5}},"line":86},"20":{"name":"(anonymous_20)","decl":{"start":{"line":95,"column":4},"end":{"line":95,"column":5}},"loc":{"start":{"line":95,"column":18},"end":{"line":118,"column":5}},"line":95},"21":{"name":"(anonymous_21)","decl":{"start":{"line":96,"column":47},"end":{"line":96,"column":48}},"loc":{"start":{"line":96,"column":60},"end":{"line":117,"column":9}},"line":96},"22":{"name":"(anonymous_22)","decl":{"start":{"line":119,"column":4},"end":{"line":119,"column":5}},"loc":{"start":{"line":119,"column":27},"end":{"line":127,"column":5}},"line":119},"23":{"name":"(anonymous_23)","decl":{"start":{"line":120,"column":47},"end":{"line":120,"column":48}},"loc":{"start":{"line":120,"column":60},"end":{"line":126,"column":9}},"line":120},"24":{"name":"(anonymous_24)","decl":{"start":{"line":125,"column":34},"end":{"line":125,"column":35}},"loc":{"start":{"line":125,"column":41},"end":{"line":125,"column":73}},"line":125},"25":{"name":"(anonymous_25)","decl":{"start":{"line":128,"column":4},"end":{"line":128,"column":5}},"loc":{"start":{"line":128,"column":24},"end":{"line":136,"column":5}},"line":128},"26":{"name":"(anonymous_26)","decl":{"start":{"line":129,"column":47},"end":{"line":129,"column":48}},"loc":{"start":{"line":129,"column":60},"end":{"line":135,"column":9}},"line":129},"27":{"name":"(anonymous_27)","decl":{"start":{"line":137,"column":4},"end":{"line":137,"column":5}},"loc":{"start":{"line":137,"column":32},"end":{"line":139,"column":5}},"line":137},"28":{"name":"(anonymous_28)","decl":{"start":{"line":140,"column":4},"end":{"line":140,"column":5}},"loc":{"start":{"line":140,"column":34},"end":{"line":143,"column":5}},"line":140},"29":{"name":"(anonymous_29)","decl":{"start":{"line":142,"column":46},"end":{"line":142,"column":47}},"loc":{"start":{"line":142,"column":54},"end":{"line":142,"column":79}},"line":142},"30":{"name":"(anonymous_30)","decl":{"start":{"line":144,"column":4},"end":{"line":144,"column":5}},"loc":{"start":{"line":144,"column":18},"end":{"line":174,"column":5}},"line":144},"31":{"name":"(anonymous_31)","decl":{"start":{"line":145,"column":47},"end":{"line":145,"column":48}},"loc":{"start":{"line":145,"column":60},"end":{"line":173,"column":9}},"line":145},"32":{"name":"(anonymous_32)","decl":{"start":{"line":175,"column":4},"end":{"line":175,"column":5}},"loc":{"start":{"line":175,"column":21},"end":{"line":203,"column":5}},"line":175},"33":{"name":"(anonymous_33)","decl":{"start":{"line":176,"column":47},"end":{"line":176,"column":48}},"loc":{"start":{"line":176,"column":60},"end":{"line":202,"column":9}},"line":176},"34":{"name":"(anonymous_34)","decl":{"start":{"line":178,"column":31},"end":{"line":178,"column":32}},"loc":{"start":{"line":178,"column":52},"end":{"line":193,"column":13}},"line":178},"35":{"name":"(anonymous_35)","decl":{"start":{"line":179,"column":43},"end":{"line":179,"column":44}},"loc":{"start":{"line":179,"column":57},"end":{"line":192,"column":17}},"line":179},"36":{"name":"(anonymous_36)","decl":{"start":{"line":193,"column":21},"end":{"line":193,"column":22}},"loc":{"start":{"line":193,"column":30},"end":{"line":195,"column":13}},"line":193},"37":{"name":"(anonymous_37)","decl":{"start":{"line":195,"column":20},"end":{"line":195,"column":21}},"loc":{"start":{"line":195,"column":31},"end":{"line":201,"column":13}},"line":195},"38":{"name":"(anonymous_38)","decl":{"start":{"line":204,"column":4},"end":{"line":204,"column":5}},"loc":{"start":{"line":204,"column":16},"end":{"line":207,"column":5}},"line":204}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":16},"end":{"line":10,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":17},"end":{"line":2,"column":21}},{"start":{"line":2,"column":25},"end":{"line":2,"column":39}},{"start":{"line":2,"column":44},"end":{"line":10,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":35},"end":{"line":3,"column":109}},"type":"cond-expr","locations":[{"start":{"line":3,"column":56},"end":{"line":3,"column":61}},{"start":{"line":3,"column":64},"end":{"line":3,"column":109}}],"line":3},"2":{"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":34}},"type":"binary-expr","locations":[{"start":{"line":4,"column":16},"end":{"line":4,"column":17}},{"start":{"line":4,"column":22},"end":{"line":4,"column":33}}],"line":4},"3":{"loc":{"start":{"line":7,"column":32},"end":{"line":7,"column":115}},"type":"cond-expr","locations":[{"start":{"line":7,"column":46},"end":{"line":7,"column":67}},{"start":{"line":7,"column":70},"end":{"line":7,"column":115}}],"line":7},"4":{"loc":{"start":{"line":8,"column":51},"end":{"line":8,"column":67}},"type":"binary-expr","locations":[{"start":{"line":8,"column":51},"end":{"line":8,"column":61}},{"start":{"line":8,"column":65},"end":{"line":8,"column":67}}],"line":8},"5":{"loc":{"start":{"line":21,"column":23},"end":{"line":21,"column":112}},"type":"cond-expr","locations":[{"start":{"line":21,"column":64},"end":{"line":21,"column":79}},{"start":{"line":21,"column":82},"end":{"line":21,"column":112}}],"line":21},"6":{"loc":{"start":{"line":25,"column":33},"end":{"line":25,"column":119}},"type":"binary-expr","locations":[{"start":{"line":25,"column":33},"end":{"line":25,"column":58}},{"start":{"line":25,"column":62},"end":{"line":25,"column":119}}],"line":25},"7":{"loc":{"start":{"line":26,"column":33},"end":{"line":26,"column":119}},"type":"binary-expr","locations":[{"start":{"line":26,"column":33},"end":{"line":26,"column":58}},{"start":{"line":26,"column":62},"end":{"line":26,"column":119}}],"line":26},"8":{"loc":{"start":{"line":27,"column":26},"end":{"line":27,"column":118}},"type":"cond-expr","locations":[{"start":{"line":27,"column":70},"end":{"line":27,"column":88}},{"start":{"line":27,"column":91},"end":{"line":27,"column":118}}],"line":27},"9":{"loc":{"start":{"line":28,"column":37},"end":{"line":28,"column":125}},"type":"cond-expr","locations":[{"start":{"line":28,"column":92},"end":{"line":28,"column":121}},{"start":{"line":28,"column":124},"end":{"line":28,"column":125}}],"line":28},"10":{"loc":{"start":{"line":29,"column":31},"end":{"line":29,"column":113}},"type":"cond-expr","locations":[{"start":{"line":29,"column":80},"end":{"line":29,"column":103}},{"start":{"line":29,"column":106},"end":{"line":29,"column":113}}],"line":29},"11":{"loc":{"start":{"line":30,"column":34},"end":{"line":30,"column":118}},"type":"cond-expr","locations":[{"start":{"line":30,"column":86},"end":{"line":30,"column":112}},{"start":{"line":30,"column":115},"end":{"line":30,"column":118}}],"line":30},"12":{"loc":{"start":{"line":31,"column":39},"end":{"line":31,"column":131}},"type":"cond-expr","locations":[{"start":{"line":31,"column":96},"end":{"line":31,"column":127}},{"start":{"line":31,"column":130},"end":{"line":31,"column":131}}],"line":31},"13":{"loc":{"start":{"line":32,"column":23},"end":{"line":32,"column":87}},"type":"cond-expr","locations":[{"start":{"line":32,"column":64},"end":{"line":32,"column":79}},{"start":{"line":32,"column":82},"end":{"line":32,"column":87}}],"line":32},"14":{"loc":{"start":{"line":33,"column":23},"end":{"line":33,"column":87}},"type":"cond-expr","locations":[{"start":{"line":33,"column":64},"end":{"line":33,"column":79}},{"start":{"line":33,"column":82},"end":{"line":33,"column":87}}],"line":33},"15":{"loc":{"start":{"line":34,"column":23},"end":{"line":36,"column":28}},"type":"cond-expr","locations":[{"start":{"line":35,"column":14},"end":{"line":35,"column":44}},{"start":{"line":36,"column":14},"end":{"line":36,"column":28}}],"line":34},"16":{"loc":{"start":{"line":34,"column":23},"end":{"line":34,"column":71}},"type":"binary-expr","locations":[{"start":{"line":34,"column":23},"end":{"line":34,"column":37}},{"start":{"line":34,"column":41},"end":{"line":34,"column":71}}],"line":34},"17":{"loc":{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},"type":"if","locations":[{"start":{"line":39,"column":8},"end":{"line":41,"column":9}},{"start":{"line":39,"column":8},"end":{"line":41,"column":9}}],"line":39},"18":{"loc":{"start":{"line":44,"column":15},"end":{"line":44,"column":38}},"type":"binary-expr","locations":[{"start":{"line":44,"column":15},"end":{"line":44,"column":30}},{"start":{"line":44,"column":34},"end":{"line":44,"column":38}}],"line":44},"19":{"loc":{"start":{"line":48,"column":8},"end":{"line":50,"column":9}},"type":"if","locations":[{"start":{"line":48,"column":8},"end":{"line":50,"column":9}},{"start":{"line":48,"column":8},"end":{"line":50,"column":9}}],"line":48},"20":{"loc":{"start":{"line":54,"column":15},"end":{"line":54,"column":45}},"type":"binary-expr","locations":[{"start":{"line":54,"column":15},"end":{"line":54,"column":39}},{"start":{"line":54,"column":43},"end":{"line":54,"column":45}}],"line":54},"21":{"loc":{"start":{"line":57,"column":36},"end":{"line":57,"column":45}},"type":"binary-expr","locations":[{"start":{"line":57,"column":36},"end":{"line":57,"column":39}},{"start":{"line":57,"column":43},"end":{"line":57,"column":45}}],"line":57},"22":{"loc":{"start":{"line":63,"column":8},"end":{"line":72,"column":9}},"type":"if","locations":[{"start":{"line":63,"column":8},"end":{"line":72,"column":9}},{"start":{"line":63,"column":8},"end":{"line":72,"column":9}}],"line":63},"23":{"loc":{"start":{"line":87,"column":8},"end":{"line":92,"column":9}},"type":"if","locations":[{"start":{"line":87,"column":8},"end":{"line":92,"column":9}},{"start":{"line":87,"column":8},"end":{"line":92,"column":9}}],"line":87},"24":{"loc":{"start":{"line":97,"column":12},"end":{"line":99,"column":13}},"type":"if","locations":[{"start":{"line":97,"column":12},"end":{"line":99,"column":13}},{"start":{"line":97,"column":12},"end":{"line":99,"column":13}}],"line":97},"25":{"loc":{"start":{"line":100,"column":12},"end":{"line":116,"column":13}},"type":"if","locations":[{"start":{"line":100,"column":12},"end":{"line":116,"column":13}},{"start":{"line":100,"column":12},"end":{"line":116,"column":13}}],"line":100},"26":{"loc":{"start":{"line":107,"column":17},"end":{"line":116,"column":13}},"type":"if","locations":[{"start":{"line":107,"column":17},"end":{"line":116,"column":13}},{"start":{"line":107,"column":17},"end":{"line":116,"column":13}}],"line":107},"27":{"loc":{"start":{"line":147,"column":12},"end":{"line":171,"column":13}},"type":"if","locations":[{"start":{"line":147,"column":12},"end":{"line":171,"column":13}},{"start":{"line":147,"column":12},"end":{"line":171,"column":13}}],"line":147},"28":{"loc":{"start":{"line":147,"column":16},"end":{"line":147,"column":81}},"type":"binary-expr","locations":[{"start":{"line":147,"column":16},"end":{"line":147,"column":56}},{"start":{"line":147,"column":60},"end":{"line":147,"column":81}}],"line":147},"29":{"loc":{"start":{"line":148,"column":16},"end":{"line":170,"column":17}},"type":"if","locations":[{"start":{"line":148,"column":16},"end":{"line":170,"column":17}},{"start":{"line":148,"column":16},"end":{"line":170,"column":17}}],"line":148},"30":{"loc":{"start":{"line":148,"column":20},"end":{"line":148,"column":80}},"type":"binary-expr","locations":[{"start":{"line":148,"column":20},"end":{"line":148,"column":32}},{"start":{"line":148,"column":36},"end":{"line":148,"column":80}}],"line":148},"31":{"loc":{"start":{"line":154,"column":24},"end":{"line":161,"column":25}},"type":"if","locations":[{"start":{"line":154,"column":24},"end":{"line":161,"column":25}},{"start":{"line":154,"column":24},"end":{"line":161,"column":25}}],"line":154},"32":{"loc":{"start":{"line":154,"column":28},"end":{"line":154,"column":113}},"type":"binary-expr","locations":[{"start":{"line":154,"column":28},"end":{"line":154,"column":31}},{"start":{"line":154,"column":35},"end":{"line":154,"column":47}},{"start":{"line":154,"column":52},"end":{"line":154,"column":80}},{"start":{"line":154,"column":84},"end":{"line":154,"column":112}}],"line":154},"33":{"loc":{"start":{"line":163,"column":20},"end":{"line":165,"column":21}},"type":"if","locations":[{"start":{"line":163,"column":20},"end":{"line":165,"column":21}},{"start":{"line":163,"column":20},"end":{"line":165,"column":21}}],"line":163},"34":{"loc":{"start":{"line":166,"column":20},"end":{"line":169,"column":21}},"type":"if","locations":[{"start":{"line":166,"column":20},"end":{"line":169,"column":21}},{"start":{"line":166,"column":20},"end":{"line":169,"column":21}}],"line":166},"35":{"loc":{"start":{"line":177,"column":64},"end":{"line":177,"column":94}},"type":"binary-expr","locations":[{"start":{"line":177,"column":64},"end":{"line":177,"column":74}},{"start":{"line":177,"column":78},"end":{"line":177,"column":94}}],"line":177},"36":{"loc":{"start":{"line":180,"column":20},"end":{"line":190,"column":21}},"type":"if","locations":[{"start":{"line":180,"column":20},"end":{"line":190,"column":21}},{"start":{"line":180,"column":20},"end":{"line":190,"column":21}}],"line":180},"37":{"loc":{"start":{"line":184,"column":25},"end":{"line":190,"column":21}},"type":"if","locations":[{"start":{"line":184,"column":25},"end":{"line":190,"column":21}},{"start":{"line":184,"column":25},"end":{"line":190,"column":21}}],"line":184},"38":{"loc":{"start":{"line":188,"column":25},"end":{"line":190,"column":21}},"type":"if","locations":[{"start":{"line":188,"column":25},"end":{"line":190,"column":21}},{"start":{"line":188,"column":25},"end":{"line":190,"column":21}}],"line":188},"39":{"loc":{"start":{"line":196,"column":16},"end":{"line":199,"column":17}},"type":"if","locations":[{"start":{"line":196,"column":16},"end":{"line":199,"column":17}},{"start":{"line":196,"column":16},"end":{"line":199,"column":17}}],"line":196},"40":{"loc":{"start":{"line":196,"column":20},"end":{"line":196,"column":119}},"type":"binary-expr","locations":[{"start":{"line":196,"column":20},"end":{"line":196,"column":49}},{"start":{"line":196,"column":53},"end":{"line":196,"column":58}},{"start":{"line":196,"column":62},"end":{"line":196,"column":74}},{"start":{"line":196,"column":78},"end":{"line":196,"column":119}}],"line":196}},"s":{"0":1,"1":3,"2":0,"3":49,"4":3,"5":3,"6":0,"7":0,"8":0,"9":0,"10":52,"11":49,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":15,"19":15,"20":15,"21":15,"22":15,"23":15,"24":15,"25":15,"26":15,"27":15,"28":15,"29":15,"30":15,"31":15,"32":15,"33":15,"34":5,"35":0,"36":23,"37":17,"38":17,"39":6,"40":17,"41":4,"42":16,"43":2,"44":4,"45":16,"46":2,"47":14,"48":6,"49":6,"50":1,"51":1,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":1,"59":1,"60":0,"61":1,"62":0,"63":0,"64":1,"65":1,"66":1,"67":0,"68":1,"69":1,"70":1,"71":10,"72":1,"73":1,"74":1,"75":19,"76":3,"77":3,"78":3,"79":23,"80":23,"81":23,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":23,"97":23,"98":23,"99":23,"100":23,"101":23,"102":0,"103":0,"104":23,"105":0,"106":0,"107":23,"108":0,"109":23,"110":0,"111":23,"112":0,"113":0,"114":23,"115":23,"116":23,"117":1},"f":{"0":49,"1":3,"2":0,"3":49,"4":3,"5":0,"6":52,"7":15,"8":5,"9":23,"10":17,"11":4,"12":16,"13":2,"14":4,"15":16,"16":6,"17":1,"18":0,"19":0,"20":1,"21":1,"22":1,"23":1,"24":10,"25":1,"26":1,"27":19,"28":3,"29":3,"30":23,"31":23,"32":23,"33":23,"34":23,"35":23,"36":0,"37":23,"38":23},"b":{"0":[1,1,1],"1":[3,0],"2":[49,49],"3":[49,3],"4":[49,49],"5":[0,15],"6":[15,15],"7":[15,15],"8":[1,14],"9":[5,10],"10":[0,15],"11":[0,15],"12":[0,15],"13":[0,15],"14":[0,15],"15":[15,0],"16":[15,15],"17":[0,5],"18":[23,17],"19":[6,11],"20":[4,0],"21":[16,14],"22":[2,14],"23":[0,0],"24":[0,1],"25":[0,1],"26":[1,0],"27":[0,23],"28":[23,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0,0,0],"33":[0,0],"34":[0,0],"35":[23,23],"36":[0,23],"37":[0,23],"38":[0,23],"39":[0,23],"40":[23,0,0,0]},"inputSourceMap":{"version":3,"file":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-generic-provider/src/core/provider.ts","sources":["/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-generic-provider/src/core/provider.ts"],"names":[],"mappings":"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","sourcesContent":["import { Encode, Encoder } from '@0xcert/ethereum-utils';\nimport { ProviderBase, ProviderError, ProviderEvent, ProviderIssue } from '@0xcert/scaffold';\nimport { EventEmitter } from 'events';\nimport { parseError } from './errors';\nimport { GatewayConfig, RpcResponse, SendOptions, SignMethod } from './types';\n\n/**\n * Configuration interface for generic provider.\n */\nexport interface GenericProviderOptions {\n\n  /**\n   * Default account from which all mutations are made.\n   */\n  accountId?: string;\n\n  /**\n   * RPC client instance (e.g. window.ethereum).\n   */\n  client?: any;\n\n  /**\n   * Type of signature that will be used in making claims etc.\n   */\n  signMethod?: SignMethod;\n\n  /**\n   * List of addresses where normal transfer not safeTransfer smart contract methods will be used.\n   */\n  unsafeRecipientIds?: string[];\n\n  /**\n   * Source where assetLedger compiled smart contract is located.\n   */\n  assetLedgerSource?: string;\n\n  /**\n   * Source where valueLedger compiled smart contract is located.\n   */\n  valueLedgerSource?: string;\n\n  /**\n   * Number of confirmations (blocks in blockchain after mutation is accepted) that are necessary to mark a mutation complete.\n   */\n  requiredConfirmations?: number;\n\n  /**\n   * Gateway configuration.\n   */\n  gatewayConfig?: GatewayConfig;\n\n  /**\n   * The number of milliseconds in which a mutation times out.\n   */\n  mutationTimeout?: number;\n\n  /**\n   * Encoder instance.\n   */\n  encoder?: Encode;\n\n  /**\n   * Gas price multiplier. Defaults to 1.1.\n   */\n  gasPriceMultiplier?: number;\n\n  /**\n   * Retry gas price multiplier. Defaults to 2.\n   */\n  retryGasPriceMultiplier?: number;\n\n  /**\n   * Sandbox mode. False by default.\n   */\n  sandbox?: Boolean;\n\n  /**\n   * Verbose mode. False by default.\n   */\n  verbose?: Boolean;\n}\n\n/**\n * Ethereum RPC client.\n */\nexport class GenericProvider extends EventEmitter implements ProviderBase {\n\n  /**\n   * Type of signature that will be used in making claims etc.\n   */\n  public signMethod: SignMethod;\n\n  /**\n   * Source where assetLedger compiled smart contract is located.\n   */\n  public assetLedgerSource: string;\n\n  /**\n   * Source where valueLedger compiled smart contract is located.\n   */\n  public valueLedgerSource: string;\n\n  /**\n   * Number of confirmations (blocks in blockchain after mutation is accepted) that are necessary to mark a mutation complete.\n   */\n  public requiredConfirmations: number;\n\n  /**\n   * The number of milliseconds in which a mutation times out.\n   */\n  public mutationTimeout: number;\n\n  /**\n   * Instance of encoder.\n   */\n  public encoder: Encode;\n\n  /**\n   * Gas price multiplier. Defaults to 1.1.\n   */\n  public gasPriceMultiplier?: number;\n\n  /**\n   * Retry gas price multiplier. Defaults to 2.\n   */\n  public retryGasPriceMultiplier?: number;\n\n  /**\n   * Sandbox mode. False by default.\n   */\n  public sandbox: Boolean;\n\n  /**\n   * Verbose mode. False by default.\n   */\n  public verbose: Boolean;\n\n  /**\n   * Gateway configuration.\n   */\n  protected _gatewayConfig: GatewayConfig;\n\n  /**\n   * Default account from which all mutations are made.\n   */\n  protected _accountId: string;\n\n  /**\n   * List of addresses where normal transfer not safeTransfer smart contract methods will be used.\n   */\n  protected _unsafeRecipientIds: string[];\n\n  /**\n   * RPC client instance (e.g. window.ethereum).\n   */\n  protected _client: any;\n\n  /**\n   * Unique request number.\n   */\n  protected _id = 0;\n\n  /**\n   * Class constructor.\n   * @param options.client RPC client instance (e.g. window.ethereum).\n   * @param options.accountId Coinbase address.\n   */\n  public constructor(options: GenericProviderOptions) {\n    super();\n    this.encoder = typeof options.encoder !== 'undefined' ? options.encoder : new Encoder();\n    this.accountId = options.accountId;\n    this.gatewayConfig = options.gatewayConfig;\n    this.unsafeRecipientIds = options.unsafeRecipientIds;\n    this.assetLedgerSource = options.assetLedgerSource || 'https://conventions.0xcert.org/ethereum/xcert-mock.json';\n    this.valueLedgerSource = options.valueLedgerSource || 'https://conventions.0xcert.org/ethereum/token-mock.json';\n    this.signMethod = typeof options.signMethod !== 'undefined' ? options.signMethod : SignMethod.ETH_SIGN;\n    this.requiredConfirmations = typeof options.requiredConfirmations !== 'undefined' ? options.requiredConfirmations : 1;\n    this.mutationTimeout = typeof options.mutationTimeout !== 'undefined' ? options.mutationTimeout : 3600000; // 1 h\n    this.gasPriceMultiplier = typeof options.gasPriceMultiplier !== 'undefined' ? options.gasPriceMultiplier : 1.1;\n    this.retryGasPriceMultiplier = typeof options.retryGasPriceMultiplier !== 'undefined' ? options.retryGasPriceMultiplier : 2;\n    this.sandbox = typeof options.sandbox !== 'undefined' ? options.sandbox : false;\n    this.verbose = typeof options.verbose !== 'undefined' ? options.verbose : false;\n\n    this._client = options.client && options.client.currentProvider\n      ? options.client.currentProvider\n      : options.client;\n  }\n\n  /**\n   * Console logs message if verbose is active.\n   * @param message Message.\n   */\n  public log(message: any) {\n    if (this.verbose) {\n      console.log(message);\n    }\n  }\n\n  /**\n   * Returns account ID (address).\n   */\n  public get accountId() {\n    return this._accountId || null;\n  }\n\n  /**\n   * Sets and normalizes account ID.\n   */\n  public set accountId(id: string) {\n    id = this.encoder.normalizeAddress(id);\n\n    if (!this.isCurrentAccount(id)) {\n      this.emit(ProviderEvent.ACCOUNT_CHANGE, id, this._accountId); // must be before the new account is set\n    }\n\n    this._accountId = id;\n  }\n\n  /**\n   * Returns unsafe recipient IDs (addresses).\n   */\n  public get unsafeRecipientIds() {\n    return this._unsafeRecipientIds || [];\n  }\n\n  /**\n   * Sets and normalizes unsafe recipient IDs.\n   */\n  public set unsafeRecipientIds(ids: string[]) {\n    this._unsafeRecipientIds = (ids || []).map((id) => this.encoder.normalizeAddress(id));\n  }\n\n  /**\n   * Returns gateway config.\n   */\n  public get gatewayConfig(): GatewayConfig {\n    return this._gatewayConfig;\n  }\n\n  /**\n   * Sets and normalizes gateway config.\n   */\n  public set gatewayConfig(config: GatewayConfig) {\n    if (typeof config !== 'undefined') {\n      this._gatewayConfig = {\n        actionsOrderId: this.encoder.normalizeAddress(config.actionsOrderId),\n        assetLedgerDeployOrderId: this.encoder.normalizeAddress(config.assetLedgerDeployOrderId),\n        valueLedgerDeployOrderId: this.encoder.normalizeAddress(config.valueLedgerDeployOrderId),\n      };\n    } else {\n      this._gatewayConfig = null;\n    }\n  }\n\n  /**\n   * Emits provider event.\n   */\n  public emit(event: ProviderEvent.ACCOUNT_CHANGE, newAccountId: string, oldAccountId: string);\n  public emit(event: ProviderEvent.NETWORK_CHANGE, newNetworkVersion: string, oldNetworkVersion: string);\n  public emit(...args) {\n    super.emit.call(this, ...args);\n    return this;\n  }\n\n  /**\n   * Attaches on provider events.\n   */\n  public on(event: ProviderEvent.ACCOUNT_CHANGE, handler: (newAccountId: string, oldAccountId: string) => any);\n  public on(event: ProviderEvent.NETWORK_CHANGE, handler: (newNetworkVersion: string, oldNetworkVersion: string) => any);\n  public on(...args) {\n    super.on.call(this, ...args);\n    return this;\n  }\n\n  /**\n   * Once handler.\n   */\n  public once(event: ProviderEvent.ACCOUNT_CHANGE, handler: (newAccountId: string, oldAccountId: string) => any);\n  public once(event: ProviderEvent.NETWORK_CHANGE, handler: (newNetworkVersion: string, oldNetworkVersion: string) => any);\n  public once(...args) {\n    super.once.call(this, ...args);\n    return this;\n  }\n\n  /**\n   * Dettaches from provider events.\n   */\n  public off(event: ProviderEvent.ACCOUNT_CHANGE, handler: (newAccountId: string, oldAccountId: string) => any);\n  public off(event: ProviderEvent.NETWORK_CHANGE, handler: (newNetworkVersion: string, oldNetworkVersion: string) => any);\n  public off(event: ProviderEvent);\n  public off(event, handler?) {\n    if (handler) {\n      super.off(event, handler);\n    } else {\n      super.removeAllListeners(event);\n    }\n    return this;\n  }\n\n  /**\n   * Signs a message.\n   * @param message Message to sign.\n   */\n  public async sign(message: string): Promise<string> {\n    if (!this.accountId) {\n      throw new Error('accountId not set.');\n    }\n    if (this.signMethod === SignMethod.PERSONAL_SIGN) {\n      const res = await this.post({\n        method: 'personal_sign',\n        params: [message, this.accountId, null],\n      });\n      return res.result;\n    } else if (this.signMethod === SignMethod.ETH_SIGN) {\n      const res = await this.post({\n        method: 'eth_sign',\n        params: [this.accountId, message],\n      });\n      return res.result;\n    } else {\n      throw new Error('Signing method not implemented.');\n    }\n  }\n\n  /**\n   * Returns a list of all available account IDs.\n   */\n  public async getAvailableAccounts(): Promise<string[]> {\n    const res = await this.post({\n      method: 'eth_accounts',\n      params: [],\n    });\n    return res.result.map((a) => this.encoder.normalizeAddress(a));\n  }\n\n  /**\n   * Returns current network type (e.g. '3' for ropsten).\n   */\n  public async getNetworkVersion(): Promise<string> {\n    const res = await this.post({\n      method: 'net_version',\n      params: [],\n    });\n    return res.result;\n  }\n\n  /**\n   * Returns true if the provided accountId matches current class accountId.\n   */\n  public isCurrentAccount(accountId: string) {\n    return this.accountId === this.encoder.normalizeAddress(accountId);\n  }\n\n  /**\n   * Returns true if the provided ledgerId is unsafe recipient address.\n   */\n  public isUnsafeRecipientId(ledgerId: string) {\n    const normalizedLedgerId = this.encoder.normalizeAddress(ledgerId);\n    return !!this.unsafeRecipientIds.find((id) => id === normalizedLedgerId);\n  }\n\n  /**\n   * Sends a raw request to the JSON RPC serveer.\n   * @param options.method RPC procedure name.\n   * @param options.params RPC procedure parameters.\n   * @param options.id RPC request identifier.\n   * @param options.jsonrpc RPC protocol version.\n   * @see https://github.com/ethereum/wiki/wiki/JSON-RPC\n   */\n  public async post(options: SendOptions): Promise<RpcResponse> {\n    const payload = { ...options };\n\n    if (payload.method === 'eth_sendTransaction' && payload.params.length) {\n      if (this.sandbox || typeof payload.params[0].gas === 'undefined') {\n        try {\n          const res = await this.request({\n            ...payload,\n            method: 'eth_estimateGas',\n          });\n          // estimate gas is sometimes inaccurate (depends on the node). So to be\n          // sure we have enough gas, we multiply result with a factor.\n          payload.params[0].gas = `0x${Math.ceil(res.result * 1.1).toString(16)}`;\n        } catch (err) {\n          if (err && err.original && (err.original.code === -32603 || err.original.code === -32000)) {\n            payload.params.push('latest');\n            const res = await this.request({\n              ...payload,\n              method: 'eth_call',\n            });\n            // We are expecting eth_call to throw. If it does not throw we need to trigger it manually.\n            throw new ProviderError(ProviderIssue.CONTRACT_ERROR, res.result);\n          } else {\n            throw err;\n          }\n        }\n\n        if (this.sandbox) {\n          return { id: null, jsonrpc: null, result: payload.params[0].gas };\n        }\n\n        if (typeof payload.params[0].gasPrice === 'undefined') {\n          const res = await this.request({\n            ...payload,\n            method: 'eth_gasPrice',\n            params: [],\n          });\n          payload.params[0].gasPrice = `0x${Math.ceil(res.result * this.gasPriceMultiplier).toString(16)}`;\n        }\n      }\n    }\n    return this.request(payload);\n  }\n\n  /**\n   * Sends a raw request to the JSON RPC serveer.\n   * @param options.method RPC procedure name.\n   * @param options.params RPC procedure parameters.\n   * @param options.id RPC request identifier.\n   * @param options.jsonrpc RPC protocol version.\n   * @see https://github.com/ethereum/wiki/wiki/JSON-RPC\n   */\n  protected async request(options: SendOptions) {\n    const payload = {\n      jsonrpc: '2.0',\n      id: options.id || this.getNextId(),\n      params: [],\n      ...options,\n    };\n    return new Promise<RpcResponse>((resolve, reject) => {\n      this._client.send(payload, (err, res) => {\n        if (err) { // client error\n          this.log(err);\n          return reject(err);\n        } else if (res.error) { // RPC error\n          this.log(err);\n          return reject(res.error);\n        } else if (res.id !== payload.id) { // anomaly\n          return reject('Invalid RPC id');\n        }\n        return resolve(res);\n      });\n    }).catch((err) => {\n      throw new ProviderError(ProviderIssue.GENERAL, err);\n    }).then((value) => {\n      // 0x08c379a0 = Function selector (bytes4 of Error(string));\n      if (payload.method === 'eth_call' && value && value.result && value.result.indexOf('0x08c379a0') !== -1) {\n        const errorCode = this.encoder.decodeParameters(['string'], `0x${value.result.substring(10)}`);\n        throw parseError(errorCode[0]);\n      }\n      return value;\n    });\n  }\n\n  /**\n   * Returns the next unique request number.\n   */\n  protected getNextId() {\n    this._id++;\n    return this._id;\n  }\n\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3b534affd4aaf7585e93fc67f0fa42ba25693c3b","contentHash":"c0c7bfd7da0054b5057f649a98f4b4aad27550ed9b80940539efe80282806d9b"},"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-generic-provider/src/core/helpers.ts":{"path":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-generic-provider/src/core/helpers.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":16},"end":{"line":3,"column":34}},"2":{"start":{"line":5,"column":4},"end":{"line":26,"column":5}},"3":{"start":{"line":7,"column":12},"end":{"line":11,"column":14}},"4":{"start":{"line":13,"column":12},"end":{"line":17,"column":14}},"5":{"start":{"line":19,"column":12},"end":{"line":23,"column":14}},"6":{"start":{"line":25,"column":12},"end":{"line":25,"column":57}},"7":{"start":{"line":28,"column":0},"end":{"line":28,"column":48}}},"fnMap":{"0":{"name":"buildGatewayConfig","decl":{"start":{"line":4,"column":9},"end":{"line":4,"column":27}},"loc":{"start":{"line":4,"column":41},"end":{"line":27,"column":1}},"line":4}},"branchMap":{"0":{"loc":{"start":{"line":5,"column":4},"end":{"line":26,"column":5}},"type":"switch","locations":[{"start":{"line":6,"column":8},"end":{"line":11,"column":14}},{"start":{"line":12,"column":8},"end":{"line":17,"column":14}},{"start":{"line":18,"column":8},"end":{"line":23,"column":14}},{"start":{"line":24,"column":8},"end":{"line":25,"column":57}}],"line":5}},"s":{"0":1,"1":1,"2":1,"3":0,"4":0,"5":1,"6":0,"7":1},"f":{"0":1},"b":{"0":[0,0,1,0]},"inputSourceMap":{"version":3,"file":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-generic-provider/src/core/helpers.ts","sources":["/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-ethereum-generic-provider/src/core/helpers.ts"],"names":[],"mappings":";;AAAA,mCAAsC;AAOtC,SAAgB,kBAAkB,CAAC,WAAwB;IACzD,QAAQ,WAAW,EAAE;QACnB,KAAK,mBAAW,CAAC,IAAI;YACnB,OAAO;gBACL,cAAc,EAAE,4CAA4C;gBAC5D,wBAAwB,EAAE,4CAA4C;gBACtE,wBAAwB,EAAE,4CAA4C;aACvE,CAAC;QACJ,KAAK,mBAAW,CAAC,OAAO;YACtB,OAAO;gBACL,cAAc,EAAE,4CAA4C;gBAC5D,wBAAwB,EAAE,4CAA4C;gBACtE,wBAAwB,EAAE,4CAA4C;aACvE,CAAC;QACJ,KAAK,mBAAW,CAAC,OAAO;YACtB,OAAO;gBACL,cAAc,EAAE,4CAA4C;gBAC5D,wBAAwB,EAAE,4CAA4C;gBACtE,wBAAwB,EAAE,4CAA4C;aACvE,CAAC;QACJ;YACE,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;KAChD;AACH,CAAC;AAvBD,gDAuBC","sourcesContent":["import { NetworkKind } from './types';\n\n/**\n * Generates gateway config from deployed contract addresses.\n * @notice Configs will changes based on released version.\n * @param networkKind Ethereum network kind.\n */\nexport function buildGatewayConfig(networkKind: NetworkKind) {\n  switch (networkKind) {\n    case NetworkKind.LIVE:\n      return {\n        actionsOrderId: '0x800ecA21614dA02Df076981Bca9c664dBE19089A',\n        assetLedgerDeployOrderId: '0x984e781a6C09b433493767755f7b072183Ce7BfF',\n        valueLedgerDeployOrderId: '0x9118bd4230EAb074f98527658f3649aA26420568',\n      };\n    case NetworkKind.RINKEBY:\n      return {\n        actionsOrderId: '0xF8254F1B119Cd263b066912B3Cb4FE568f580b6c',\n        assetLedgerDeployOrderId: '0xC9F667603300390BCF8C4Fb5688d755811F34Da5',\n        valueLedgerDeployOrderId: '0xA02121436e9307f9e369e188941b731D79c4DD7d',\n      };\n    case NetworkKind.ROPSTEN:\n      return {\n        actionsOrderId: '0xbb719e35c67198e4453923eeccF0c678C6129982',\n        assetLedgerDeployOrderId: '0xC94284591B312c5551329F868420dec03C9044f8',\n        valueLedgerDeployOrderId: '0xD348c4D9BE9585295891E0322FeFe58009c1514C',\n      };\n    default:\n      throw new Error('Unsupported network kind.');\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"92be9bdba66a326f34ffbf029abb712576fb62b0","contentHash":"9f6bc7e93eae8d9f529b699817d7cd82a418f071d105766d4bbd948ad92eb1f8"}}