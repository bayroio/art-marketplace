"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const spec_1 = require("@specron/spec");
const __1 = require("../../..");
const spec = new spec_1.Spec();
spec.before((stage) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = new __1.GenericProvider({
        client: stage.web3,
    });
    stage.set('provider', provider);
}));
spec.test('normalizes IDs when set', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = ctx.get('provider');
    provider.unsafeRecipientIds = ['0xf9196f9f176fd2ef9243e8960817d5fbe63d79aa'];
    ctx.deepEqual(provider.unsafeRecipientIds, ['0xF9196F9f176fd2eF9243E8960817d5FbE63D79aa']);
}));
exports.default = spec;
//# sourceMappingURL=unsafe-recipient-ids-instance-variable.test.js.map