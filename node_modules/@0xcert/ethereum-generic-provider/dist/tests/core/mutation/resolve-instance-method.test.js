"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethereum_sandbox_1 = require("@0xcert/ethereum-sandbox");
const spec_1 = require("@specron/spec");
const __1 = require("../../..");
const spec = new spec_1.Spec();
spec.before((stage) => __awaiter(void 0, void 0, void 0, function* () {
    const protocol = new ethereum_sandbox_1.Protocol(stage.web3);
    stage.set('protocol', yield protocol.deploy());
}));
spec.before((stage) => __awaiter(void 0, void 0, void 0, function* () {
    const accounts = yield stage.web3.eth.getAccounts();
    stage.set('coinbase', accounts[0]);
    stage.set('bob', accounts[1]);
}));
spec.before((stage) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = new __1.GenericProvider({
        client: stage.web3,
        requiredConfirmations: 2,
    });
    stage.set('provider', provider);
}));
spec.test('resolves mutation', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = ctx.get('provider');
    const coinbase = ctx.get('coinbase');
    const bob = ctx.get('bob');
    const counters = { confirm: 0, complete: 0 };
    const transactionHash = yield ctx.web3.eth.sendTransaction({ from: coinbase, to: bob, value: 0 }).then((t) => t.transactionHash);
    const mutation = new __1.Mutation(provider, transactionHash);
    mutation.on(__1.MutationEvent.CONFIRM, () => counters.confirm++);
    mutation.on(__1.MutationEvent.COMPLETE, () => counters.complete++);
    yield ctx.web3.eth.sendTransaction({ from: coinbase, to: bob, value: 0 });
    yield mutation.resolve();
    ctx.false(mutation.isPending());
    ctx.false(mutation.isCompleted());
    ctx.is(counters.confirm, 1);
    ctx.is(counters.complete, 0);
    ctx.is(mutation.confirmations, 1);
    ctx.is(mutation.id, transactionHash);
    ctx.is(mutation.senderId, coinbase);
    ctx.is(mutation.receiverId, bob);
    yield ctx.web3.eth.sendTransaction({ from: coinbase, to: bob, value: 0 });
    yield mutation.resolve();
    ctx.true(mutation.isCompleted());
    ctx.is(mutation.confirmations, 2);
    ctx.is(counters.complete, 1);
    yield ctx.web3.eth.sendTransaction({ from: coinbase, to: bob, value: 0 });
    yield mutation.resolve();
    ctx.true(mutation.isCompleted());
    ctx.is(mutation.confirmations, 3);
    ctx.is(counters.complete, 2);
}));
exports.default = spec;
//# sourceMappingURL=resolve-instance-method.test.js.map