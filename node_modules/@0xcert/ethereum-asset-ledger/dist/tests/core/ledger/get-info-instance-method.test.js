"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethereum_generic_provider_1 = require("@0xcert/ethereum-generic-provider");
const ethereum_sandbox_1 = require("@0xcert/ethereum-sandbox");
const spec_1 = require("@specron/spec");
const ledger_1 = require("../../../core/ledger");
const spec = new spec_1.Spec();
spec.before((stage) => __awaiter(void 0, void 0, void 0, function* () {
    const protocol = new ethereum_sandbox_1.Protocol(stage.web3);
    stage.set('protocol', yield protocol.deploy());
}));
spec.before((stage) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = new ethereum_generic_provider_1.GenericProvider({
        client: stage.web3,
    });
    stage.set('provider', provider);
}));
spec.test('returns ledger info (Xcert smart contract)', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = ctx.get('provider');
    const ledgerId = ctx.get('protocol').xcert.instance.options.address;
    const ledger = new ledger_1.AssetLedger(provider, ledgerId);
    ctx.deepEqual(yield ledger.getInfo(), {
        name: 'Xcert',
        symbol: 'Xcert',
        uriPrefix: 'https://0xcert.org/',
        uriPostfix: '.json',
        supply: '0',
    });
}));
spec.test('returns ledger info (erc721 metadata smart contract)', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = ctx.get('provider');
    const ledgerId = ctx.get('protocol').erc721Metadata.instance.options.address;
    const ledger = new ledger_1.AssetLedger(provider, ledgerId);
    ctx.deepEqual(yield ledger.getInfo(), {
        name: 'ERC721 Metadata',
        symbol: 'ERC721Metadata',
        uriPrefix: 'https://0xcert.org/',
        uriPostfix: '.json',
        supply: null,
    });
}));
exports.default = spec;
//# sourceMappingURL=get-info-instance-method.test.js.map