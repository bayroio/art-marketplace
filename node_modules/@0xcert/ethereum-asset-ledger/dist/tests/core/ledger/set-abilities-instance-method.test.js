"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethereum_generic_provider_1 = require("@0xcert/ethereum-generic-provider");
const ethereum_sandbox_1 = require("@0xcert/ethereum-sandbox");
const scaffold_1 = require("@0xcert/scaffold");
const spec_1 = require("@specron/spec");
const ledger_1 = require("../../../core/ledger");
const spec = new spec_1.Spec();
spec.before((stage) => __awaiter(void 0, void 0, void 0, function* () {
    const protocol = new ethereum_sandbox_1.Protocol(stage.web3);
    stage.set('protocol', yield protocol.deploy());
}));
spec.before((stage) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = new ethereum_generic_provider_1.GenericProvider({
        client: stage.web3,
        accountId: yield stage.web3.eth.getCoinbase(),
        requiredConfirmations: 0,
    });
    stage.set('provider', provider);
}));
spec.before((stage) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = stage.get('provider');
    const ledgerId = stage.get('protocol').xcert.instance.options.address;
    stage.set('ledger', new ledger_1.AssetLedger(provider, ledgerId));
}));
spec.before((stage) => __awaiter(void 0, void 0, void 0, function* () {
    const accounts = yield stage.web3.eth.getAccounts();
    stage.set('bob', accounts[1]);
}));
spec.test('sets ledger abilities for an account', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const ledger = ctx.get('ledger');
    const bob = ctx.get('bob');
    const prepare = yield ledger.grantAbilities(bob, [scaffold_1.GeneralAssetLedgerAbility.REVOKE_ASSET, scaffold_1.GeneralAssetLedgerAbility.TOGGLE_TRANSFERS]);
    yield prepare.complete();
    const mutation = yield ledger.setAbilities(bob, [scaffold_1.GeneralAssetLedgerAbility.CREATE_ASSET, scaffold_1.GeneralAssetLedgerAbility.TOGGLE_TRANSFERS]);
    yield mutation.complete();
    ctx.is((mutation.logs[0]).event, 'SetAbilities');
    const abilities = yield ledger.getAbilities(bob);
    ctx.deepEqual(abilities, [scaffold_1.GeneralAssetLedgerAbility.CREATE_ASSET, scaffold_1.GeneralAssetLedgerAbility.TOGGLE_TRANSFERS]);
}));
exports.default = spec;
//# sourceMappingURL=set-abilities-instance-method.test.js.map