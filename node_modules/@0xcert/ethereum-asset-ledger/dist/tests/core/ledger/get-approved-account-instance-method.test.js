"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethereum_generic_provider_1 = require("@0xcert/ethereum-generic-provider");
const ethereum_sandbox_1 = require("@0xcert/ethereum-sandbox");
const spec_1 = require("@specron/spec");
const ledger_1 = require("../../../core/ledger");
const spec = new spec_1.Spec();
spec.before((stage) => __awaiter(void 0, void 0, void 0, function* () {
    const protocol = new ethereum_sandbox_1.Protocol(stage.web3);
    stage.set('protocol', yield protocol.deploy());
}));
spec.before((stage) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = new ethereum_generic_provider_1.GenericProvider({
        client: stage.web3,
    });
    stage.set('provider', provider);
}));
spec.before((stage) => __awaiter(void 0, void 0, void 0, function* () {
    const accounts = yield stage.web3.eth.getAccounts();
    stage.set('coinbase', accounts[0]);
}));
spec.before((stage) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = stage.get('provider');
    const ledgerId = stage.get('protocol').xcert.instance.options.address;
    stage.set('ledger', new ledger_1.AssetLedger(provider, ledgerId));
}));
spec.test('returns token approved account', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const coinbase = ctx.get('coinbase');
    const xcert = ctx.get('protocol').xcert;
    const provider = ctx.get('provider');
    const ledgerId = ctx.get('protocol').xcert.instance.options.address;
    const ledger = new ledger_1.AssetLedger(provider, ledgerId);
    yield xcert.instance.methods.create(coinbase, '1', '0x973124ffc4a03e66d6a4458e587d5d6146f71fc57f359c8d516e0b12a50ab0d9').send({ from: coinbase });
    const approvedAccount = yield ledger.getApprovedAccount('1');
    ctx.is(approvedAccount, '0x0000000000000000000000000000000000000000');
}));
spec.test('returns null calling a contract that does not have getApprovedAccount function', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = ctx.get('provider');
    const ledgerId = ctx.get('protocol').erc20.instance.options.address;
    const ledger = new ledger_1.AssetLedger(provider, ledgerId);
    ctx.is(yield ledger.getApprovedAccount('1'), null);
}));
spec.test('check crypto kitty fallback hack', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = ctx.get('provider');
    const coinbase = ctx.get('coinbase');
    const kittyHackAbi = [{ 'constant': true, 'inputs': [{ 'name': '', 'type': 'uint256' }], 'name': 'kittyIndexToApproved', 'outputs': [{ 'name': '', 'type': 'address' }], 'payable': false, 'stateMutability': 'view', 'type': 'function' }, { 'constant': false, 'inputs': [{ 'name': '_index', 'type': 'uint256' }, { 'name': '_owner', 'type': 'address' }], 'name': 'addToKittyIndex', 'outputs': [], 'payable': false, 'stateMutability': 'nonpayable', 'type': 'function' }];
    const kittyHackBytecode = '0x608060405234801561001057600080fd5b50610160806100206000396000f30060806040526004361061004b5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663481af3d38114610050578063d3adfa8e14610091575b600080fd5b34801561005c57600080fd5b506100686004356100c4565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561009d57600080fd5b506100c260043573ffffffffffffffffffffffffffffffffffffffff602435166100ec565b005b60006020819052908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b600091825260208290526040909120805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff9092169190911790555600a165627a7a723058201ae7be4968e8a069a633e1dd4845d3951d3a0cb52f5d6d1eaabf44d32332b44f0029';
    const kittyHashContract = new ctx.web3.eth.Contract(kittyHackAbi);
    let ledgerId;
    yield kittyHashContract.deploy({ data: kittyHackBytecode })
        .send({ from: coinbase, gas: 1000000 })
        .then((newContractInstance) => {
        ledgerId = newContractInstance.options.address;
        kittyHashContract.options.address = ledgerId;
    });
    yield kittyHashContract.methods.addToKittyIndex('1', coinbase).send({ from: coinbase });
    const ledger = new ledger_1.AssetLedger(provider, ledgerId);
    ctx.is(yield ledger.getApprovedAccount('1'), coinbase);
}));
exports.default = spec;
//# sourceMappingURL=get-approved-account-instance-method.test.js.map