"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethereum_generic_provider_1 = require("@0xcert/ethereum-generic-provider");
const ethereum_sandbox_1 = require("@0xcert/ethereum-sandbox");
const scaffold_1 = require("@0xcert/scaffold");
const spec_1 = require("@specron/spec");
const path = require("path");
const ledger_1 = require("../../../core/ledger");
const spec = new spec_1.Spec();
spec.before((stage) => __awaiter(void 0, void 0, void 0, function* () {
    const protocol = new ethereum_sandbox_1.Protocol(stage.web3);
    stage.set('protocol', yield protocol.deploy());
}));
spec.before((stage) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = new ethereum_generic_provider_1.GenericProvider({
        client: stage.web3,
        accountId: yield stage.web3.eth.getCoinbase(),
        requiredConfirmations: 0,
        assetLedgerSource: path.join(__dirname, '..', '..', '..', '..', 'node_modules', '@0xcert', 'ethereum-xcert-contracts', 'build', 'xcert-mock.json'),
    });
    stage.set('provider', provider);
}));
spec.test('deploys new asset ledger', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = ctx.get('provider');
    const capabilities = [
        scaffold_1.AssetLedgerCapability.TOGGLE_TRANSFERS,
    ];
    const info = {
        name: 'Foo',
        symbol: 'Bar',
        uriPrefix: 'https://example.com',
        uriPostfix: '.json',
        schemaId: '0000000000000000000000000000000000000000000000000000000000000000',
    };
    const ledger = yield ledger_1.AssetLedger.deploy(provider, Object.assign(Object.assign({}, info), { capabilities })).then((mutation) => {
        return mutation.complete();
    }).then((mutation) => {
        return ledger_1.AssetLedger.getInstance(provider, mutation.receiverId);
    });
    delete info.schemaId;
    ctx.deepEqual(yield ledger.getInfo(), Object.assign(Object.assign({}, info), { supply: '0' }));
    ctx.deepEqual(yield ledger.getCapabilities(), capabilities);
}));
exports.default = spec;
//# sourceMappingURL=deploy-static-method.test.js.map