"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethereum_generic_provider_1 = require("@0xcert/ethereum-generic-provider");
const ethereum_sandbox_1 = require("@0xcert/ethereum-sandbox");
const spec_1 = require("@specron/spec");
const ledger_1 = require("../../../core/ledger");
const spec = new spec_1.Spec();
spec.before((stage) => __awaiter(void 0, void 0, void 0, function* () {
    const protocol = new ethereum_sandbox_1.Protocol(stage.web3);
    stage.set('protocol', yield protocol.deploy());
}));
spec.before((stage) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = new ethereum_generic_provider_1.GenericProvider({
        client: stage.web3,
        accountId: yield stage.web3.eth.getCoinbase(),
        unsafeRecipientIds: [stage.get('protocol').tokenTransferProxy.instance.options.address],
        requiredConfirmations: 0,
    });
    stage.set('provider', provider);
}));
spec.before((stage) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = stage.get('provider');
    const ledgerId = stage.get('protocol').xcert.instance.options.address;
    stage.set('ledger', new ledger_1.AssetLedger(provider, ledgerId));
}));
spec.before((stage) => __awaiter(void 0, void 0, void 0, function* () {
    const accounts = yield stage.web3.eth.getAccounts();
    stage.set('coinbase', accounts[0]);
    stage.set('bob', accounts[1]);
    stage.set('jane', accounts[2]);
}));
spec.test('transfer asset', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const xcert = ctx.get('protocol').xcert;
    const ledger = ctx.get('ledger');
    const coinbase = ctx.get('coinbase');
    const bob = ctx.get('bob');
    yield xcert.instance.methods.create(coinbase, '1', '0x973124ffc4a03e66d6a4458e587d5d6146f71fc57f359c8d516e0b12a50ab0d9').send({ from: coinbase });
    const mutation = yield ledger.transferAsset({
        receiverId: bob,
        id: '1',
    });
    yield mutation.complete();
    ctx.is((mutation.logs[0]).event, 'Transfer');
    ctx.is(yield xcert.instance.methods.ownerOf('1').call(), bob);
}));
spec.test('transfer asset to a contract', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const xcert = ctx.get('protocol').xcert;
    const ledger = ctx.get('ledger');
    const coinbase = ctx.get('coinbase');
    const nftokenReceiver = ctx.get('protocol').nftokenReceiver.instance.options.address;
    yield xcert.instance.methods.create(coinbase, '2', '0x973124ffc4a03e66d6a4458e587d5d6146f71fc57f359c8d516e0b12a50ab0d9').send({ from: coinbase });
    yield ledger.transferAsset({
        receiverId: nftokenReceiver,
        id: '2',
    });
    ctx.is(yield xcert.instance.methods.ownerOf('2').call(), nftokenReceiver);
}));
spec.test('transfer asset to a contract with data', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const xcert = ctx.get('protocol').xcert;
    const ledger = ctx.get('ledger');
    const coinbase = ctx.get('coinbase');
    const nftokenReceiver = ctx.get('protocol').nftokenReceiver.instance.options.address;
    yield xcert.instance.methods.create(coinbase, '3', '0x973124ffc4a03e66d6a4458e587d5d6146f71fc57f359c8d516e0b12a50ab0d9').send({ from: coinbase });
    yield ledger.transferAsset({
        receiverId: nftokenReceiver, id: '3', data: '0x01',
    });
    ctx.is(yield xcert.instance.methods.ownerOf('3').call(), nftokenReceiver);
}));
spec.test('fails when trying to transfer asset to a contract that does not implement receiver', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const xcert = ctx.get('protocol').xcert;
    const ledger = ctx.get('ledger');
    const coinbase = ctx.get('coinbase');
    const erc20 = ctx.get('protocol').erc20.instance.options.address;
    yield xcert.instance.methods.create(coinbase, '4', '0x973124ffc4a03e66d6a4458e587d5d6146f71fc57f359c8d516e0b12a50ab0d9').send({ from: coinbase });
    yield ledger.transferAsset({
        receiverId: erc20,
        id: '4',
    }).then(() => {
        ctx.fail();
    }).catch(() => {
        ctx.pass();
    });
}));
spec.test('transfer to asset contract that does not implement receiver but is marked as unsafe', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const xcert = ctx.get('protocol').xcert;
    const ledger = ctx.get('ledger');
    const coinbase = ctx.get('coinbase');
    const tokenTransferProxy = ctx.get('protocol').tokenTransferProxy.instance.options.address;
    yield xcert.instance.methods.create(coinbase, '5', '0x973124ffc4a03e66d6a4458e587d5d6146f71fc57f359c8d516e0b12a50ab0d9').send({ from: coinbase });
    yield ledger.transferAsset({
        receiverId: tokenTransferProxy,
        id: '5',
    });
    ctx.is(yield xcert.instance.methods.ownerOf('5').call(), tokenTransferProxy);
}));
spec.test('transfer approved asset', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const xcert = ctx.get('protocol').xcert;
    const ledger = ctx.get('ledger');
    const coinbase = ctx.get('coinbase');
    const bob = ctx.get('bob');
    const jane = ctx.get('jane');
    yield xcert.instance.methods.create(bob, '6', '0x973124ffc4a03e66d6a4458e587d5d6146f71fc57f359c8d516e0b12a50ab0d9').send({ from: coinbase });
    yield xcert.instance.methods.approve(coinbase, '6').send({ from: bob });
    yield ledger.transferAsset({
        senderId: bob,
        receiverId: jane,
        id: '6',
    });
    ctx.is(yield xcert.instance.methods.ownerOf('6').call(), jane);
}));
spec.test('transfer to approved asset contract that does not implement receiver but is marked as unsafe', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const xcert = ctx.get('protocol').xcert;
    const ledger = ctx.get('ledger');
    const coinbase = ctx.get('coinbase');
    const bob = ctx.get('bob');
    const tokenTransferProxy = ctx.get('protocol').tokenTransferProxy.instance.options.address;
    yield xcert.instance.methods.create(bob, '7', '0x973124ffc4a03e66d6a4458e587d5d6146f71fc57f359c8d516e0b12a50ab0d9').send({ from: coinbase });
    yield xcert.instance.methods.approve(coinbase, '7').send({ from: bob });
    yield ledger.transferAsset({
        senderId: bob,
        receiverId: tokenTransferProxy,
        id: '7',
    });
    ctx.is(yield xcert.instance.methods.ownerOf('7').call(), tokenTransferProxy);
}));
exports.default = spec;
//# sourceMappingURL=transfer-asset-instance-method.test.js.map