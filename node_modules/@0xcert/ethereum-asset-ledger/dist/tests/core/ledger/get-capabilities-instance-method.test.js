"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethereum_generic_provider_1 = require("@0xcert/ethereum-generic-provider");
const ethereum_sandbox_1 = require("@0xcert/ethereum-sandbox");
const scaffold_1 = require("@0xcert/scaffold");
const spec_1 = require("@specron/spec");
const ledger_1 = require("../../../core/ledger");
const spec = new spec_1.Spec();
spec.before((stage) => __awaiter(void 0, void 0, void 0, function* () {
    const protocol = new ethereum_sandbox_1.Protocol(stage.web3);
    stage.set('protocol', yield protocol.deploy());
}));
spec.before((stage) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = new ethereum_generic_provider_1.GenericProvider({
        client: stage.web3,
    });
    stage.set('provider', provider);
}));
spec.before((stage) => __awaiter(void 0, void 0, void 0, function* () {
    const accounts = yield stage.web3.eth.getAccounts();
    stage.set('coinbase', accounts[0]);
}));
spec.test('returns ledger capabilities', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = ctx.get('provider');
    const destroyableAssetLedgerId = ctx.get('protocol').xcertDestroyable.instance.options.address;
    const mutableAssetLedgerId = ctx.get('protocol').xcertMutable.instance.options.address;
    const pausableAssetLedgerId = ctx.get('protocol').xcertPausable.instance.options.address;
    const revokableAssetLedgerId = ctx.get('protocol').xcertRevokable.instance.options.address;
    const destroyableAssetLedger = new ledger_1.AssetLedger(provider, destroyableAssetLedgerId);
    const mutableAssetLedger = new ledger_1.AssetLedger(provider, mutableAssetLedgerId);
    const pausableAssetLedger = new ledger_1.AssetLedger(provider, pausableAssetLedgerId);
    const revokableAssetLedger = new ledger_1.AssetLedger(provider, revokableAssetLedgerId);
    ctx.deepEqual(yield destroyableAssetLedger.getCapabilities(), [scaffold_1.AssetLedgerCapability.DESTROY_ASSET]);
    ctx.deepEqual(yield mutableAssetLedger.getCapabilities(), [scaffold_1.AssetLedgerCapability.UPDATE_ASSET]);
    ctx.deepEqual(yield pausableAssetLedger.getCapabilities(), [scaffold_1.AssetLedgerCapability.TOGGLE_TRANSFERS]);
    ctx.deepEqual(yield revokableAssetLedger.getCapabilities(), [scaffold_1.AssetLedgerCapability.REVOKE_ASSET]);
}));
spec.test('returns empty ledger capabilities for erc721 smart contract', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const provider = ctx.get('provider');
    const ledgerId = ctx.get('protocol').erc721.instance.options.address;
    const ledger = new ledger_1.AssetLedger(provider, ledgerId);
    ctx.deepEqual(yield ledger.getCapabilities(), []);
}));
exports.default = spec;
//# sourceMappingURL=get-capabilities-instance-method.test.js.map