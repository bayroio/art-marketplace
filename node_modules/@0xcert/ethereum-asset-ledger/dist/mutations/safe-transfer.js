"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethereum_generic_provider_1 = require("@0xcert/ethereum-generic-provider");
function default_1(ledger, senderId, receiverId, id, receiverData) {
    return __awaiter(this, void 0, void 0, function* () {
        const functionSignature = typeof receiverData !== 'undefined' ? '0xb88d4fde' : '0x42842e0e';
        const inputTypes = ['address', 'address', 'uint256'];
        if (typeof receiverData !== 'undefined') {
            inputTypes.push('bytes');
        }
        const data = [senderId, receiverId, id, receiverData]
            .filter((a) => typeof a !== 'undefined');
        const attrs = {
            from: ledger.provider.accountId,
            to: ledger.id,
            data: functionSignature + ledger.provider.encoder.encodeParameters(inputTypes, data).substr(2),
        };
        const res = yield ledger.provider.post({
            method: 'eth_sendTransaction',
            params: [attrs],
        });
        return new ethereum_generic_provider_1.Mutation(ledger.provider, res.result, ledger);
    });
}
exports.default = default_1;
//# sourceMappingURL=safe-transfer.js.map