"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethereum_generic_provider_1 = require("@0xcert/ethereum-generic-provider");
const utils_1 = require("@0xcert/utils");
const capabilities_1 = require("../lib/capabilities");
const inputTypes = ['string', 'string', 'string', 'string', 'bytes32', 'bytes4[]'];
function default_1(provider, { name, symbol, uriPrefix, uriPostfix, schemaId, capabilities }) {
    return __awaiter(this, void 0, void 0, function* () {
        const contract = yield utils_1.fetchJson(provider.assetLedgerSource);
        const source = contract.XcertMock.evm.bytecode.object;
        const codes = (capabilities || []).map((c) => capabilities_1.getInterfaceCode(c));
        const attrs = {
            from: provider.accountId,
            data: `0x${source}${provider.encoder.encodeParameters(inputTypes, [name, symbol, uriPrefix, uriPostfix, `0x${schemaId}`, codes]).substr(2)}`,
        };
        const res = yield provider.post({
            method: 'eth_sendTransaction',
            params: [attrs],
        });
        return new ethereum_generic_provider_1.Mutation(provider, res.result);
    });
}
exports.default = default_1;
//# sourceMappingURL=deploy.js.map