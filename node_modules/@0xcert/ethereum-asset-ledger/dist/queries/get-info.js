"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const functions = [
    {
        signature: '0x06fdde03',
        inputTypes: [],
        outputTypes: ['string'],
    },
    {
        signature: '0x95d89b41',
        inputTypes: [],
        outputTypes: ['string'],
    },
    {
        signature: '0x62b99ad4',
        inputTypes: [],
        outputTypes: ['string'],
    },
    {
        signature: '0xc298bba5',
        inputTypes: [],
        outputTypes: ['string'],
    },
    {
        signature: '0x18160ddd',
        inputTypes: [],
        outputTypes: ['uint256'],
    },
];
function default_1(ledger) {
    return __awaiter(this, void 0, void 0, function* () {
        const info = yield Promise.all(functions.map((f) => __awaiter(this, void 0, void 0, function* () {
            try {
                const attrs = {
                    to: ledger.id,
                    data: f.signature + ledger.provider.encoder.encodeParameters(f.inputTypes, []).substr(2),
                };
                const res = yield ledger.provider.post({
                    method: 'eth_call',
                    params: [attrs, 'latest'],
                });
                return ledger.provider.encoder.decodeParameters(f.outputTypes, res.result)[0].toString();
            }
            catch (error) {
                ledger.provider.log(error);
                return null;
            }
        })));
        return {
            name: info[0],
            symbol: info[1],
            uriPrefix: info[2],
            uriPostfix: info[3],
            supply: info[4],
        };
    });
}
exports.default = default_1;
//# sourceMappingURL=get-info.js.map