"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const scaffold_1 = require("@0xcert/scaffold");
const functionSignature = '0xba00a330';
const inputTypes = ['address', 'uint256'];
const outputTypes = ['bool'];
function default_1(ledger, accountId) {
    return __awaiter(this, void 0, void 0, function* () {
        return Promise.all([scaffold_1.SuperAssetLedgerAbility.MANAGE_ABILITIES,
            scaffold_1.GeneralAssetLedgerAbility.CREATE_ASSET,
            scaffold_1.GeneralAssetLedgerAbility.REVOKE_ASSET,
            scaffold_1.GeneralAssetLedgerAbility.TOGGLE_TRANSFERS,
            scaffold_1.GeneralAssetLedgerAbility.UPDATE_ASSET,
            scaffold_1.GeneralAssetLedgerAbility.ALLOW_CREATE_ASSET,
            scaffold_1.GeneralAssetLedgerAbility.UPDATE_URI_BASE,
            scaffold_1.GeneralAssetLedgerAbility.ALLOW_UPDATE_ASSET_IMPRINT,
        ].map((ability) => __awaiter(this, void 0, void 0, function* () {
            const attrs = {
                to: ledger.id,
                data: functionSignature + ledger.provider.encoder.encodeParameters(inputTypes, [accountId, ability]).substr(2),
            };
            const res = yield ledger.provider.post({
                method: 'eth_call',
                params: [attrs, 'latest'],
            });
            return ledger.provider.encoder.decodeParameters(outputTypes, res.result)[0] ? ability : -1;
        }))).then((abilities) => {
            return abilities.filter((a) => a !== -1).sort((a, b) => a - b);
        }).catch((error) => {
            ledger.provider.log(error);
            return [];
        });
    });
}
exports.default = default_1;
//# sourceMappingURL=get-abilities.js.map