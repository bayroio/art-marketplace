"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethereum_generic_provider_1 = require("@0xcert/ethereum-generic-provider");
class BitskiProvider extends ethereum_generic_provider_1.GenericProvider {
    constructor(options) {
        super(options);
        this._options = options;
        this._client = this;
        if (this.isSupported()) {
            const bitski = require('bitski');
            this._bitski = new bitski.Bitski(options.clientId, options.redirectUrl);
            const bitskiOptions = {};
            if (typeof options.network === 'undefined') {
                bitskiOptions['networkName'] = 'mainnet';
            }
            else if (typeof options.network === 'string') {
                bitskiOptions['networkName'] = options.network;
            }
            else {
                bitskiOptions['network'] = options.network;
            }
            this._provider = this._bitski.getProvider(bitskiOptions);
        }
    }
    static getInstance(options) {
        return new this(options);
    }
    isSupported() {
        return typeof window !== 'undefined';
    }
    isSignedIn() {
        return (this.isSupported()
            && !!this.accountId
            && !!this._bitski
            && this._bitski.authStatus === 'CONNECTED');
    }
    signIn() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isSupported()) {
                return false;
            }
            yield this._bitski.start();
            this.accountId = yield this.getAvailableAccounts().then((a) => a[0]);
            this.signOutHandler = () => {
                this.accountId = null;
                this._bitski.removeSignOutHandler(this.signOutHandler);
            };
            this._bitski.addSignOutHandler(this.signOutHandler);
            return this;
        });
    }
    signOut() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isSupported()) {
                return null;
            }
            yield this._bitski.signOut();
            return this;
        });
    }
    getConnectedUser() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isSupported()) {
                return null;
            }
            return this._bitski.getUser();
        });
    }
    send(data, callback) {
        this._provider.sendAsync(data, callback);
    }
}
exports.BitskiProvider = BitskiProvider;
//# sourceMappingURL=provider.js.map