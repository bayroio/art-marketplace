import { GatewayConfig, GenericProvider, SignMethod } from '@0xcert/ethereum-generic-provider';
export interface BitskiProviderNetwork {
    rpcUrl: string;
    chainId: number;
}
export interface BitskiProviderOptions {
    signMethod?: SignMethod;
    unsafeRecipientIds?: string[];
    assetLedgerSource?: string;
    valueLedgerSource?: string;
    requiredConfirmations?: number;
    gatewayConfig?: GatewayConfig;
    mutationTimeout?: number;
    clientId: string;
    redirectUrl: string;
    network?: string | BitskiProviderNetwork;
    gasPriceMultiplier?: number;
    retryGasPriceMultiplier?: number;
    sandbox?: Boolean;
    verbose?: Boolean;
}
export declare class BitskiProvider extends GenericProvider {
    protected _options: BitskiProviderOptions;
    protected _bitski: any;
    protected _provider: any;
    private signOutHandler;
    static getInstance(options: BitskiProviderOptions): BitskiProvider;
    constructor(options: BitskiProviderOptions);
    isSupported(): boolean;
    isSignedIn(): boolean;
    signIn(): Promise<false | this>;
    signOut(): Promise<this>;
    getConnectedUser(): Promise<any>;
    send(data: any, callback: (err: any, data: any) => any): void;
}
