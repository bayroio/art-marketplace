{"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-cert/src/index.ts":{"path":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-cert/src/index.ts","statementMap":{"0":{"start":{"line":3,"column":4},"end":{"line":3,"column":71}},"1":{"start":{"line":3,"column":21},"end":{"line":3,"column":71}},"2":{"start":{"line":3,"column":53},"end":{"line":3,"column":71}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":33}}},"fnMap":{"0":{"name":"__export","decl":{"start":{"line":2,"column":9},"end":{"line":2,"column":17}},"loc":{"start":{"line":2,"column":21},"end":{"line":4,"column":1}},"line":2}},"branchMap":{"0":{"loc":{"start":{"line":3,"column":21},"end":{"line":3,"column":71}},"type":"if","locations":[{"start":{"line":3,"column":21},"end":{"line":3,"column":71}},{"start":{"line":3,"column":21},"end":{"line":3,"column":71}}],"line":3}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1},"f":{"0":1},"b":{"0":[1,0]},"inputSourceMap":{"version":3,"file":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-cert/src/index.ts","sources":["/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-cert/src/index.ts"],"names":[],"mappings":";;;;;AAAA,iCAA4B","sourcesContent":["export * from './core/cert';\nexport * from './core/prop';\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"37d6728f6d1779d279a7fe2dbdf85bebe1d9da3f","contentHash":"56d63a45dbd93aa70f62ad5b8aefa6899e8cb29046f1e54c7b86eb92412fc51a"},"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-cert/src/core/cert.ts":{"path":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-cert/src/core/cert.ts","statementMap":{"0":{"start":{"line":2,"column":16},"end":{"line":10,"column":1}},"1":{"start":{"line":3,"column":28},"end":{"line":3,"column":110}},"2":{"start":{"line":3,"column":91},"end":{"line":3,"column":106}},"3":{"start":{"line":4,"column":4},"end":{"line":9,"column":7}},"4":{"start":{"line":5,"column":36},"end":{"line":5,"column":97}},"5":{"start":{"line":5,"column":42},"end":{"line":5,"column":70}},"6":{"start":{"line":5,"column":85},"end":{"line":5,"column":95}},"7":{"start":{"line":6,"column":35},"end":{"line":6,"column":100}},"8":{"start":{"line":6,"column":41},"end":{"line":6,"column":73}},"9":{"start":{"line":6,"column":88},"end":{"line":6,"column":98}},"10":{"start":{"line":7,"column":32},"end":{"line":7,"column":116}},"11":{"start":{"line":8,"column":8},"end":{"line":8,"column":78}},"12":{"start":{"line":11,"column":0},"end":{"line":11,"column":62}},"13":{"start":{"line":12,"column":17},"end":{"line":12,"column":42}},"14":{"start":{"line":13,"column":16},"end":{"line":13,"column":40}},"15":{"start":{"line":14,"column":15},"end":{"line":14,"column":39}},"16":{"start":{"line":17,"column":8},"end":{"line":17,"column":36}},"17":{"start":{"line":18,"column":8},"end":{"line":18,"column":284}},"18":{"start":{"line":18,"column":73},"end":{"line":18,"column":167}},"19":{"start":{"line":18,"column":120},"end":{"line":18,"column":164}},"20":{"start":{"line":18,"column":184},"end":{"line":18,"column":271}},"21":{"start":{"line":18,"column":231},"end":{"line":18,"column":268}},"22":{"start":{"line":21,"column":8},"end":{"line":21,"column":32}},"23":{"start":{"line":24,"column":8},"end":{"line":26,"column":11}},"24":{"start":{"line":25,"column":12},"end":{"line":25,"column":118}},"25":{"start":{"line":29,"column":8},"end":{"line":41,"column":11}},"26":{"start":{"line":30,"column":32},"end":{"line":30,"column":59}},"27":{"start":{"line":31,"column":34},"end":{"line":31,"column":76}},"28":{"start":{"line":32,"column":34},"end":{"line":32,"column":72}},"29":{"start":{"line":33,"column":12},"end":{"line":40,"column":14}},"30":{"start":{"line":35,"column":53},"end":{"line":39,"column":17}},"31":{"start":{"line":44,"column":25},"end":{"line":44,"column":27}},"32":{"start":{"line":45,"column":8},"end":{"line":48,"column":11}},"33":{"start":{"line":46,"column":26},"end":{"line":46,"column":53}},"34":{"start":{"line":47,"column":12},"end":{"line":47,"column":52}},"35":{"start":{"line":49,"column":8},"end":{"line":49,"column":52}},"36":{"start":{"line":52,"column":8},"end":{"line":64,"column":11}},"37":{"start":{"line":53,"column":32},"end":{"line":53,"column":59}},"38":{"start":{"line":54,"column":34},"end":{"line":54,"column":76}},"39":{"start":{"line":55,"column":34},"end":{"line":55,"column":79}},"40":{"start":{"line":56,"column":12},"end":{"line":63,"column":14}},"41":{"start":{"line":58,"column":53},"end":{"line":62,"column":17}},"42":{"start":{"line":67,"column":8},"end":{"line":79,"column":11}},"43":{"start":{"line":68,"column":12},"end":{"line":78,"column":13}},"44":{"start":{"line":69,"column":16},"end":{"line":74,"column":17}},"45":{"start":{"line":70,"column":20},"end":{"line":70,"column":62}},"46":{"start":{"line":73,"column":20},"end":{"line":73,"column":32}},"47":{"start":{"line":77,"column":16},"end":{"line":77,"column":28}},"48":{"start":{"line":82,"column":8},"end":{"line":86,"column":11}},"49":{"start":{"line":83,"column":12},"end":{"line":85,"column":35}},"50":{"start":{"line":84,"column":29},"end":{"line":84,"column":52}},"51":{"start":{"line":85,"column":29},"end":{"line":85,"column":33}},"52":{"start":{"line":89,"column":8},"end":{"line":115,"column":9}},"53":{"start":{"line":90,"column":26},"end":{"line":94,"column":50}},"54":{"start":{"line":92,"column":16},"end":{"line":92,"column":79}},"55":{"start":{"line":94,"column":34},"end":{"line":94,"column":45}},"56":{"start":{"line":95,"column":12},"end":{"line":97,"column":71}},"57":{"start":{"line":99,"column":13},"end":{"line":115,"column":9}},"58":{"start":{"line":100,"column":12},"end":{"line":106,"column":51}},"59":{"start":{"line":103,"column":29},"end":{"line":103,"column":112}},"60":{"start":{"line":104,"column":16},"end":{"line":104,"column":103}},"61":{"start":{"line":106,"column":34},"end":{"line":106,"column":45}},"62":{"start":{"line":109,"column":12},"end":{"line":114,"column":14}},"63":{"start":{"line":118,"column":8},"end":{"line":137,"column":11}},"64":{"start":{"line":119,"column":12},"end":{"line":119,"column":31}},"65":{"start":{"line":120,"column":33},"end":{"line":120,"column":60}},"66":{"start":{"line":121,"column":27},"end":{"line":122,"column":40}},"67":{"start":{"line":121,"column":68},"end":{"line":121,"column":82}},"68":{"start":{"line":122,"column":31},"end":{"line":122,"column":39}},"69":{"start":{"line":123,"column":12},"end":{"line":135,"column":13}},"70":{"start":{"line":124,"column":29},"end":{"line":124,"column":48}},"71":{"start":{"line":125,"column":31},"end":{"line":127,"column":40}},"72":{"start":{"line":125,"column":55},"end":{"line":125,"column":72}},"73":{"start":{"line":126,"column":36},"end":{"line":126,"column":58}},"74":{"start":{"line":127,"column":32},"end":{"line":127,"column":39}},"75":{"start":{"line":128,"column":32},"end":{"line":128,"column":72}},"76":{"start":{"line":129,"column":16},"end":{"line":134,"column":19}},"77":{"start":{"line":136,"column":12},"end":{"line":136,"column":64}},"78":{"start":{"line":136,"column":40},"end":{"line":136,"column":62}},"79":{"start":{"line":140,"column":8},"end":{"line":168,"column":11}},"80":{"start":{"line":141,"column":25},"end":{"line":141,"column":87}},"81":{"start":{"line":141,"column":68},"end":{"line":141,"column":79}},"82":{"start":{"line":142,"column":27},"end":{"line":142,"column":29}},"83":{"start":{"line":143,"column":12},"end":{"line":143,"column":72}},"84":{"start":{"line":143,"column":33},"end":{"line":143,"column":70}},"85":{"start":{"line":144,"column":12},"end":{"line":167,"column":15}},"86":{"start":{"line":144,"column":66},"end":{"line":165,"column":14}},"87":{"start":{"line":145,"column":31},"end":{"line":147,"column":40}},"88":{"start":{"line":146,"column":35},"end":{"line":146,"column":52}},"89":{"start":{"line":147,"column":32},"end":{"line":147,"column":39}},"90":{"start":{"line":148,"column":30},"end":{"line":148,"column":79}},"91":{"start":{"line":149,"column":16},"end":{"line":155,"column":17}},"92":{"start":{"line":150,"column":35},"end":{"line":153,"column":48}},"93":{"start":{"line":151,"column":39},"end":{"line":151,"column":56}},"94":{"start":{"line":152,"column":39},"end":{"line":152,"column":74}},"95":{"start":{"line":153,"column":39},"end":{"line":153,"column":47}},"96":{"start":{"line":154,"column":20},"end":{"line":154,"column":74}},"97":{"start":{"line":156,"column":16},"end":{"line":164,"column":17}},"98":{"start":{"line":157,"column":20},"end":{"line":163,"column":22}},"99":{"start":{"line":166,"column":16},"end":{"line":166,"column":44}},"100":{"start":{"line":166,"column":39},"end":{"line":166,"column":42}},"101":{"start":{"line":171,"column":28},"end":{"line":171,"column":55}},"102":{"start":{"line":172,"column":8},"end":{"line":172,"column":142}},"103":{"start":{"line":172,"column":58},"end":{"line":172,"column":139}},"104":{"start":{"line":173,"column":8},"end":{"line":191,"column":9}},"105":{"start":{"line":174,"column":30},"end":{"line":174,"column":62}},"106":{"start":{"line":175,"column":12},"end":{"line":177,"column":13}},"107":{"start":{"line":176,"column":16},"end":{"line":176,"column":25}},"108":{"start":{"line":178,"column":32},"end":{"line":178,"column":64}},"109":{"start":{"line":179,"column":27},"end":{"line":179,"column":72}},"110":{"start":{"line":179,"column":47},"end":{"line":179,"column":71}},"111":{"start":{"line":180,"column":12},"end":{"line":182,"column":13}},"112":{"start":{"line":181,"column":16},"end":{"line":181,"column":29}},"113":{"start":{"line":183,"column":30},"end":{"line":183,"column":66}},"114":{"start":{"line":184,"column":32},"end":{"line":184,"column":80}},"115":{"start":{"line":184,"column":58},"end":{"line":184,"column":79}},"116":{"start":{"line":185,"column":12},"end":{"line":187,"column":13}},"117":{"start":{"line":186,"column":16},"end":{"line":186,"column":25}},"118":{"start":{"line":188,"column":12},"end":{"line":190,"column":13}},"119":{"start":{"line":189,"column":16},"end":{"line":189,"column":29}},"120":{"start":{"line":192,"column":8},"end":{"line":192,"column":20}},"121":{"start":{"line":195,"column":8},"end":{"line":225,"column":11}},"122":{"start":{"line":196,"column":12},"end":{"line":198,"column":13}},"123":{"start":{"line":197,"column":16},"end":{"line":197,"column":46}},"124":{"start":{"line":199,"column":12},"end":{"line":199,"column":213}},"125":{"start":{"line":199,"column":65},"end":{"line":199,"column":155}},"126":{"start":{"line":199,"column":173},"end":{"line":199,"column":211}},"127":{"start":{"line":200,"column":12},"end":{"line":217,"column":13}},"128":{"start":{"line":201,"column":32},"end":{"line":201,"column":81}},"129":{"start":{"line":201,"column":78},"end":{"line":201,"column":80}},"130":{"start":{"line":202,"column":16},"end":{"line":205,"column":19}},"131":{"start":{"line":206,"column":33},"end":{"line":206,"column":67}},"132":{"start":{"line":207,"column":34},"end":{"line":207,"column":58}},"133":{"start":{"line":208,"column":35},"end":{"line":208,"column":83}},"134":{"start":{"line":209,"column":36},"end":{"line":209,"column":78}},"135":{"start":{"line":209,"column":56},"end":{"line":209,"column":77}},"136":{"start":{"line":210,"column":16},"end":{"line":216,"column":17}},"137":{"start":{"line":211,"column":20},"end":{"line":215,"column":23}},"138":{"start":{"line":218,"column":31},"end":{"line":218,"column":67}},"139":{"start":{"line":218,"column":51},"end":{"line":218,"column":66}},"140":{"start":{"line":219,"column":12},"end":{"line":224,"column":13}},"141":{"start":{"line":220,"column":16},"end":{"line":220,"column":72}},"142":{"start":{"line":220,"column":52},"end":{"line":220,"column":65}},"143":{"start":{"line":223,"column":16},"end":{"line":223,"column":46}},"144":{"start":{"line":228,"column":24},"end":{"line":228,"column":26}},"145":{"start":{"line":229,"column":21},"end":{"line":229,"column":32}},"146":{"start":{"line":230,"column":8},"end":{"line":242,"column":9}},"147":{"start":{"line":231,"column":12},"end":{"line":241,"column":13}},"148":{"start":{"line":232,"column":16},"end":{"line":232,"column":34}},"149":{"start":{"line":233,"column":16},"end":{"line":233,"column":38}},"150":{"start":{"line":235,"column":17},"end":{"line":241,"column":13}},"151":{"start":{"line":236,"column":16},"end":{"line":236,"column":81}},"152":{"start":{"line":237,"column":16},"end":{"line":237,"column":48}},"153":{"start":{"line":240,"column":16},"end":{"line":240,"column":40}},"154":{"start":{"line":243,"column":8},"end":{"line":243,"column":23}},"155":{"start":{"line":246,"column":8},"end":{"line":248,"column":11}},"156":{"start":{"line":247,"column":12},"end":{"line":247,"column":73}},"157":{"start":{"line":247,"column":56},"end":{"line":247,"column":71}},"158":{"start":{"line":251,"column":23},"end":{"line":251,"column":25}},"159":{"start":{"line":252,"column":8},"end":{"line":260,"column":11}},"160":{"start":{"line":253,"column":25},"end":{"line":253,"column":27}},"161":{"start":{"line":254,"column":12},"end":{"line":257,"column":15}},"162":{"start":{"line":255,"column":16},"end":{"line":255,"column":29}},"163":{"start":{"line":256,"column":16},"end":{"line":256,"column":33}},"164":{"start":{"line":258,"column":28},"end":{"line":258,"column":39}},"165":{"start":{"line":259,"column":12},"end":{"line":259,"column":69}},"166":{"start":{"line":261,"column":8},"end":{"line":261,"column":22}},"167":{"start":{"line":264,"column":8},"end":{"line":275,"column":15}},"168":{"start":{"line":265,"column":12},"end":{"line":273,"column":13}},"169":{"start":{"line":266,"column":16},"end":{"line":266,"column":43}},"170":{"start":{"line":268,"column":17},"end":{"line":273,"column":13}},"171":{"start":{"line":269,"column":16},"end":{"line":269,"column":53}},"172":{"start":{"line":272,"column":16},"end":{"line":272,"column":36}},"173":{"start":{"line":274,"column":12},"end":{"line":274,"column":23}},"174":{"start":{"line":278,"column":0},"end":{"line":278,"column":20}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":44},"end":{"line":2,"column":45}},"loc":{"start":{"line":2,"column":89},"end":{"line":10,"column":1}},"line":2},"1":{"name":"adopt","decl":{"start":{"line":3,"column":13},"end":{"line":3,"column":18}},"loc":{"start":{"line":3,"column":26},"end":{"line":3,"column":112}},"line":3},"2":{"name":"(anonymous_2)","decl":{"start":{"line":3,"column":70},"end":{"line":3,"column":71}},"loc":{"start":{"line":3,"column":89},"end":{"line":3,"column":108}},"line":3},"3":{"name":"(anonymous_3)","decl":{"start":{"line":4,"column":36},"end":{"line":4,"column":37}},"loc":{"start":{"line":4,"column":63},"end":{"line":9,"column":5}},"line":4},"4":{"name":"fulfilled","decl":{"start":{"line":5,"column":17},"end":{"line":5,"column":26}},"loc":{"start":{"line":5,"column":34},"end":{"line":5,"column":99}},"line":5},"5":{"name":"rejected","decl":{"start":{"line":6,"column":17},"end":{"line":6,"column":25}},"loc":{"start":{"line":6,"column":33},"end":{"line":6,"column":102}},"line":6},"6":{"name":"step","decl":{"start":{"line":7,"column":17},"end":{"line":7,"column":21}},"loc":{"start":{"line":7,"column":30},"end":{"line":7,"column":118}},"line":7},"7":{"name":"(anonymous_7)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":24},"end":{"line":19,"column":5}},"line":16},"8":{"name":"(anonymous_8)","decl":{"start":{"line":18,"column":66},"end":{"line":18,"column":67}},"loc":{"start":{"line":18,"column":73},"end":{"line":18,"column":167}},"line":18},"9":{"name":"(anonymous_9)","decl":{"start":{"line":18,"column":105},"end":{"line":18,"column":106}},"loc":{"start":{"line":18,"column":118},"end":{"line":18,"column":166}},"line":18},"10":{"name":"(anonymous_10)","decl":{"start":{"line":18,"column":177},"end":{"line":18,"column":178}},"loc":{"start":{"line":18,"column":184},"end":{"line":18,"column":271}},"line":18},"11":{"name":"(anonymous_11)","decl":{"start":{"line":18,"column":216},"end":{"line":18,"column":217}},"loc":{"start":{"line":18,"column":229},"end":{"line":18,"column":270}},"line":18},"12":{"name":"(anonymous_12)","decl":{"start":{"line":20,"column":4},"end":{"line":20,"column":5}},"loc":{"start":{"line":20,"column":31},"end":{"line":22,"column":5}},"line":20},"13":{"name":"(anonymous_13)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":24},"end":{"line":27,"column":5}},"line":23},"14":{"name":"(anonymous_14)","decl":{"start":{"line":24,"column":47},"end":{"line":24,"column":48}},"loc":{"start":{"line":24,"column":60},"end":{"line":26,"column":9}},"line":24},"15":{"name":"(anonymous_15)","decl":{"start":{"line":28,"column":4},"end":{"line":28,"column":5}},"loc":{"start":{"line":28,"column":19},"end":{"line":42,"column":5}},"line":28},"16":{"name":"(anonymous_16)","decl":{"start":{"line":29,"column":47},"end":{"line":29,"column":48}},"loc":{"start":{"line":29,"column":60},"end":{"line":41,"column":9}},"line":29},"17":{"name":"(anonymous_17)","decl":{"start":{"line":35,"column":40},"end":{"line":35,"column":41}},"loc":{"start":{"line":35,"column":53},"end":{"line":39,"column":17}},"line":35},"18":{"name":"(anonymous_18)","decl":{"start":{"line":43,"column":4},"end":{"line":43,"column":5}},"loc":{"start":{"line":43,"column":24},"end":{"line":50,"column":5}},"line":43},"19":{"name":"(anonymous_19)","decl":{"start":{"line":45,"column":22},"end":{"line":45,"column":23}},"loc":{"start":{"line":45,"column":32},"end":{"line":48,"column":9}},"line":45},"20":{"name":"(anonymous_20)","decl":{"start":{"line":51,"column":4},"end":{"line":51,"column":5}},"loc":{"start":{"line":51,"column":26},"end":{"line":65,"column":5}},"line":51},"21":{"name":"(anonymous_21)","decl":{"start":{"line":52,"column":47},"end":{"line":52,"column":48}},"loc":{"start":{"line":52,"column":60},"end":{"line":64,"column":9}},"line":52},"22":{"name":"(anonymous_22)","decl":{"start":{"line":58,"column":40},"end":{"line":58,"column":41}},"loc":{"start":{"line":58,"column":53},"end":{"line":62,"column":17}},"line":58},"23":{"name":"(anonymous_23)","decl":{"start":{"line":66,"column":4},"end":{"line":66,"column":5}},"loc":{"start":{"line":66,"column":30},"end":{"line":80,"column":5}},"line":66},"24":{"name":"(anonymous_24)","decl":{"start":{"line":67,"column":47},"end":{"line":67,"column":48}},"loc":{"start":{"line":67,"column":60},"end":{"line":79,"column":9}},"line":67},"25":{"name":"(anonymous_25)","decl":{"start":{"line":81,"column":4},"end":{"line":81,"column":5}},"loc":{"start":{"line":81,"column":18},"end":{"line":87,"column":5}},"line":81},"26":{"name":"(anonymous_26)","decl":{"start":{"line":82,"column":47},"end":{"line":82,"column":48}},"loc":{"start":{"line":82,"column":60},"end":{"line":86,"column":9}},"line":82},"27":{"name":"(anonymous_27)","decl":{"start":{"line":84,"column":22},"end":{"line":84,"column":23}},"loc":{"start":{"line":84,"column":29},"end":{"line":84,"column":52}},"line":84},"28":{"name":"(anonymous_28)","decl":{"start":{"line":85,"column":23},"end":{"line":85,"column":24}},"loc":{"start":{"line":85,"column":29},"end":{"line":85,"column":33}},"line":85},"29":{"name":"(anonymous_29)","decl":{"start":{"line":88,"column":4},"end":{"line":88,"column":5}},"loc":{"start":{"line":88,"column":63},"end":{"line":116,"column":5}},"line":88},"30":{"name":"(anonymous_30)","decl":{"start":{"line":91,"column":21},"end":{"line":91,"column":22}},"loc":{"start":{"line":91,"column":31},"end":{"line":93,"column":13}},"line":91},"31":{"name":"(anonymous_31)","decl":{"start":{"line":94,"column":24},"end":{"line":94,"column":25}},"loc":{"start":{"line":94,"column":34},"end":{"line":94,"column":45}},"line":94},"32":{"name":"(anonymous_32)","decl":{"start":{"line":102,"column":21},"end":{"line":102,"column":22}},"loc":{"start":{"line":102,"column":30},"end":{"line":105,"column":13}},"line":102},"33":{"name":"(anonymous_33)","decl":{"start":{"line":106,"column":24},"end":{"line":106,"column":25}},"loc":{"start":{"line":106,"column":34},"end":{"line":106,"column":45}},"line":106},"34":{"name":"(anonymous_34)","decl":{"start":{"line":117,"column":4},"end":{"line":117,"column":5}},"loc":{"start":{"line":117,"column":30},"end":{"line":138,"column":5}},"line":117},"35":{"name":"(anonymous_35)","decl":{"start":{"line":118,"column":47},"end":{"line":118,"column":48}},"loc":{"start":{"line":118,"column":60},"end":{"line":137,"column":9}},"line":118},"36":{"name":"(anonymous_36)","decl":{"start":{"line":121,"column":58},"end":{"line":121,"column":59}},"loc":{"start":{"line":121,"column":68},"end":{"line":121,"column":82}},"line":121},"37":{"name":"(anonymous_37)","decl":{"start":{"line":122,"column":24},"end":{"line":122,"column":25}},"loc":{"start":{"line":122,"column":31},"end":{"line":122,"column":39}},"line":122},"38":{"name":"(anonymous_38)","decl":{"start":{"line":125,"column":48},"end":{"line":125,"column":49}},"loc":{"start":{"line":125,"column":55},"end":{"line":125,"column":72}},"line":125},"39":{"name":"(anonymous_39)","decl":{"start":{"line":126,"column":26},"end":{"line":126,"column":27}},"loc":{"start":{"line":126,"column":36},"end":{"line":126,"column":58}},"line":126},"40":{"name":"(anonymous_40)","decl":{"start":{"line":127,"column":25},"end":{"line":127,"column":26}},"loc":{"start":{"line":127,"column":32},"end":{"line":127,"column":39}},"line":127},"41":{"name":"(anonymous_41)","decl":{"start":{"line":136,"column":30},"end":{"line":136,"column":31}},"loc":{"start":{"line":136,"column":40},"end":{"line":136,"column":62}},"line":136},"42":{"name":"(anonymous_42)","decl":{"start":{"line":139,"column":4},"end":{"line":139,"column":5}},"loc":{"start":{"line":139,"column":38},"end":{"line":169,"column":5}},"line":139},"43":{"name":"(anonymous_43)","decl":{"start":{"line":140,"column":47},"end":{"line":140,"column":48}},"loc":{"start":{"line":140,"column":60},"end":{"line":168,"column":9}},"line":140},"44":{"name":"(anonymous_44)","decl":{"start":{"line":141,"column":61},"end":{"line":141,"column":62}},"loc":{"start":{"line":141,"column":68},"end":{"line":141,"column":79}},"line":141},"45":{"name":"(anonymous_45)","decl":{"start":{"line":143,"column":26},"end":{"line":143,"column":27}},"loc":{"start":{"line":143,"column":33},"end":{"line":143,"column":70}},"line":143},"46":{"name":"(anonymous_46)","decl":{"start":{"line":144,"column":55},"end":{"line":144,"column":56}},"loc":{"start":{"line":144,"column":66},"end":{"line":165,"column":14}},"line":144},"47":{"name":"(anonymous_47)","decl":{"start":{"line":144,"column":98},"end":{"line":144,"column":99}},"loc":{"start":{"line":144,"column":111},"end":{"line":165,"column":13}},"line":144},"48":{"name":"(anonymous_48)","decl":{"start":{"line":146,"column":28},"end":{"line":146,"column":29}},"loc":{"start":{"line":146,"column":35},"end":{"line":146,"column":52}},"line":146},"49":{"name":"(anonymous_49)","decl":{"start":{"line":147,"column":25},"end":{"line":147,"column":26}},"loc":{"start":{"line":147,"column":32},"end":{"line":147,"column":39}},"line":147},"50":{"name":"(anonymous_50)","decl":{"start":{"line":151,"column":32},"end":{"line":151,"column":33}},"loc":{"start":{"line":151,"column":39},"end":{"line":151,"column":56}},"line":151},"51":{"name":"(anonymous_51)","decl":{"start":{"line":152,"column":29},"end":{"line":152,"column":30}},"loc":{"start":{"line":152,"column":39},"end":{"line":152,"column":74}},"line":152},"52":{"name":"(anonymous_52)","decl":{"start":{"line":153,"column":32},"end":{"line":153,"column":33}},"loc":{"start":{"line":153,"column":39},"end":{"line":153,"column":47}},"line":153},"53":{"name":"(anonymous_53)","decl":{"start":{"line":165,"column":22},"end":{"line":165,"column":23}},"loc":{"start":{"line":165,"column":29},"end":{"line":167,"column":13}},"line":165},"54":{"name":"(anonymous_54)","decl":{"start":{"line":166,"column":32},"end":{"line":166,"column":33}},"loc":{"start":{"line":166,"column":39},"end":{"line":166,"column":42}},"line":166},"55":{"name":"(anonymous_55)","decl":{"start":{"line":170,"column":4},"end":{"line":170,"column":5}},"loc":{"start":{"line":170,"column":38},"end":{"line":193,"column":5}},"line":170},"56":{"name":"(anonymous_56)","decl":{"start":{"line":172,"column":50},"end":{"line":172,"column":51}},"loc":{"start":{"line":172,"column":58},"end":{"line":172,"column":139}},"line":172},"57":{"name":"(anonymous_57)","decl":{"start":{"line":179,"column":40},"end":{"line":179,"column":41}},"loc":{"start":{"line":179,"column":47},"end":{"line":179,"column":71}},"line":179},"58":{"name":"(anonymous_58)","decl":{"start":{"line":184,"column":51},"end":{"line":184,"column":52}},"loc":{"start":{"line":184,"column":58},"end":{"line":184,"column":79}},"line":184},"59":{"name":"(anonymous_59)","decl":{"start":{"line":194,"column":4},"end":{"line":194,"column":5}},"loc":{"start":{"line":194,"column":28},"end":{"line":226,"column":5}},"line":194},"60":{"name":"(anonymous_60)","decl":{"start":{"line":195,"column":47},"end":{"line":195,"column":48}},"loc":{"start":{"line":195,"column":60},"end":{"line":225,"column":9}},"line":195},"61":{"name":"(anonymous_61)","decl":{"start":{"line":199,"column":54},"end":{"line":199,"column":55}},"loc":{"start":{"line":199,"column":65},"end":{"line":199,"column":155}},"line":199},"62":{"name":"(anonymous_62)","decl":{"start":{"line":199,"column":163},"end":{"line":199,"column":164}},"loc":{"start":{"line":199,"column":173},"end":{"line":199,"column":211}},"line":199},"63":{"name":"(anonymous_63)","decl":{"start":{"line":201,"column":72},"end":{"line":201,"column":73}},"loc":{"start":{"line":201,"column":78},"end":{"line":201,"column":80}},"line":201},"64":{"name":"(anonymous_64)","decl":{"start":{"line":209,"column":49},"end":{"line":209,"column":50}},"loc":{"start":{"line":209,"column":56},"end":{"line":209,"column":77}},"line":209},"65":{"name":"(anonymous_65)","decl":{"start":{"line":218,"column":44},"end":{"line":218,"column":45}},"loc":{"start":{"line":218,"column":51},"end":{"line":218,"column":66}},"line":218},"66":{"name":"(anonymous_66)","decl":{"start":{"line":220,"column":45},"end":{"line":220,"column":46}},"loc":{"start":{"line":220,"column":52},"end":{"line":220,"column":65}},"line":220},"67":{"name":"(anonymous_67)","decl":{"start":{"line":227,"column":4},"end":{"line":227,"column":5}},"loc":{"start":{"line":227,"column":25},"end":{"line":244,"column":5}},"line":227},"68":{"name":"(anonymous_68)","decl":{"start":{"line":245,"column":4},"end":{"line":245,"column":5}},"loc":{"start":{"line":245,"column":22},"end":{"line":249,"column":5}},"line":245},"69":{"name":"(anonymous_69)","decl":{"start":{"line":246,"column":47},"end":{"line":246,"column":48}},"loc":{"start":{"line":246,"column":60},"end":{"line":248,"column":9}},"line":246},"70":{"name":"(anonymous_70)","decl":{"start":{"line":247,"column":49},"end":{"line":247,"column":50}},"loc":{"start":{"line":247,"column":56},"end":{"line":247,"column":71}},"line":247},"71":{"name":"(anonymous_71)","decl":{"start":{"line":250,"column":4},"end":{"line":250,"column":5}},"loc":{"start":{"line":250,"column":27},"end":{"line":262,"column":5}},"line":250},"72":{"name":"(anonymous_72)","decl":{"start":{"line":252,"column":18},"end":{"line":252,"column":19}},"loc":{"start":{"line":252,"column":25},"end":{"line":258,"column":9}},"line":252},"73":{"name":"(anonymous_73)","decl":{"start":{"line":254,"column":30},"end":{"line":254,"column":31}},"loc":{"start":{"line":254,"column":37},"end":{"line":257,"column":13}},"line":254},"74":{"name":"(anonymous_74)","decl":{"start":{"line":258,"column":18},"end":{"line":258,"column":19}},"loc":{"start":{"line":258,"column":28},"end":{"line":258,"column":39}},"line":258},"75":{"name":"(anonymous_75)","decl":{"start":{"line":258,"column":53},"end":{"line":258,"column":54}},"loc":{"start":{"line":258,"column":60},"end":{"line":260,"column":9}},"line":258},"76":{"name":"(anonymous_76)","decl":{"start":{"line":263,"column":4},"end":{"line":263,"column":5}},"loc":{"start":{"line":263,"column":20},"end":{"line":276,"column":5}},"line":263},"77":{"name":"(anonymous_77)","decl":{"start":{"line":264,"column":46},"end":{"line":264,"column":47}},"loc":{"start":{"line":264,"column":60},"end":{"line":275,"column":9}},"line":264}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":16},"end":{"line":10,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":17},"end":{"line":2,"column":21}},{"start":{"line":2,"column":25},"end":{"line":2,"column":39}},{"start":{"line":2,"column":44},"end":{"line":10,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":35},"end":{"line":3,"column":109}},"type":"cond-expr","locations":[{"start":{"line":3,"column":56},"end":{"line":3,"column":61}},{"start":{"line":3,"column":64},"end":{"line":3,"column":109}}],"line":3},"2":{"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":34}},"type":"binary-expr","locations":[{"start":{"line":4,"column":16},"end":{"line":4,"column":17}},{"start":{"line":4,"column":22},"end":{"line":4,"column":33}}],"line":4},"3":{"loc":{"start":{"line":7,"column":32},"end":{"line":7,"column":115}},"type":"cond-expr","locations":[{"start":{"line":7,"column":46},"end":{"line":7,"column":67}},{"start":{"line":7,"column":70},"end":{"line":7,"column":115}}],"line":7},"4":{"loc":{"start":{"line":8,"column":51},"end":{"line":8,"column":67}},"type":"binary-expr","locations":[{"start":{"line":8,"column":51},"end":{"line":8,"column":61}},{"start":{"line":8,"column":65},"end":{"line":8,"column":67}}],"line":8},"5":{"loc":{"start":{"line":25,"column":51},"end":{"line":25,"column":115}},"type":"cond-expr","locations":[{"start":{"line":25,"column":73},"end":{"line":25,"column":101}},{"start":{"line":25,"column":104},"end":{"line":25,"column":115}}],"line":25},"6":{"loc":{"start":{"line":69,"column":16},"end":{"line":74,"column":17}},"type":"if","locations":[{"start":{"line":69,"column":16},"end":{"line":74,"column":17}},{"start":{"line":69,"column":16},"end":{"line":74,"column":17}}],"line":69},"7":{"loc":{"start":{"line":88,"column":27},"end":{"line":88,"column":47}},"type":"default-arg","locations":[{"start":{"line":88,"column":36},"end":{"line":88,"column":47}}],"line":88},"8":{"loc":{"start":{"line":88,"column":49},"end":{"line":88,"column":61}},"type":"default-arg","locations":[{"start":{"line":88,"column":59},"end":{"line":88,"column":61}}],"line":88},"9":{"loc":{"start":{"line":89,"column":8},"end":{"line":115,"column":9}},"type":"if","locations":[{"start":{"line":89,"column":8},"end":{"line":115,"column":9}},{"start":{"line":89,"column":8},"end":{"line":115,"column":9}}],"line":89},"10":{"loc":{"start":{"line":90,"column":27},"end":{"line":90,"column":37}},"type":"binary-expr","locations":[{"start":{"line":90,"column":27},"end":{"line":90,"column":31}},{"start":{"line":90,"column":35},"end":{"line":90,"column":37}}],"line":90},"11":{"loc":{"start":{"line":95,"column":19},"end":{"line":97,"column":70}},"type":"cond-expr","locations":[{"start":{"line":96,"column":18},"end":{"line":96,"column":23}},{"start":{"line":97,"column":18},"end":{"line":97,"column":70}}],"line":95},"12":{"loc":{"start":{"line":99,"column":13},"end":{"line":115,"column":9}},"type":"if","locations":[{"start":{"line":99,"column":13},"end":{"line":115,"column":9}},{"start":{"line":99,"column":13},"end":{"line":115,"column":9}}],"line":99},"13":{"loc":{"start":{"line":103,"column":52},"end":{"line":103,"column":62}},"type":"binary-expr","locations":[{"start":{"line":103,"column":52},"end":{"line":103,"column":56}},{"start":{"line":103,"column":60},"end":{"line":103,"column":62}}],"line":103},"14":{"loc":{"start":{"line":104,"column":23},"end":{"line":104,"column":102}},"type":"cond-expr","locations":[{"start":{"line":104,"column":89},"end":{"line":104,"column":95}},{"start":{"line":104,"column":98},"end":{"line":104,"column":102}}],"line":104},"15":{"loc":{"start":{"line":121,"column":68},"end":{"line":121,"column":82}},"type":"cond-expr","locations":[{"start":{"line":121,"column":76},"end":{"line":121,"column":78}},{"start":{"line":121,"column":81},"end":{"line":121,"column":82}}],"line":121},"16":{"loc":{"start":{"line":126,"column":36},"end":{"line":126,"column":58}},"type":"cond-expr","locations":[{"start":{"line":126,"column":52},"end":{"line":126,"column":53}},{"start":{"line":126,"column":56},"end":{"line":126,"column":58}}],"line":126},"17":{"loc":{"start":{"line":136,"column":40},"end":{"line":136,"column":62}},"type":"cond-expr","locations":[{"start":{"line":136,"column":56},"end":{"line":136,"column":57}},{"start":{"line":136,"column":60},"end":{"line":136,"column":62}}],"line":136},"18":{"loc":{"start":{"line":139,"column":24},"end":{"line":139,"column":36}},"type":"default-arg","locations":[{"start":{"line":139,"column":32},"end":{"line":139,"column":36}}],"line":139},"19":{"loc":{"start":{"line":141,"column":25},"end":{"line":141,"column":87}},"type":"cond-expr","locations":[{"start":{"line":141,"column":33},"end":{"line":141,"column":80}},{"start":{"line":141,"column":83},"end":{"line":141,"column":87}}],"line":141},"20":{"loc":{"start":{"line":149,"column":16},"end":{"line":155,"column":17}},"type":"if","locations":[{"start":{"line":149,"column":16},"end":{"line":155,"column":17}},{"start":{"line":149,"column":16},"end":{"line":155,"column":17}}],"line":149},"21":{"loc":{"start":{"line":152,"column":39},"end":{"line":152,"column":74}},"type":"cond-expr","locations":[{"start":{"line":152,"column":68},"end":{"line":152,"column":70}},{"start":{"line":152,"column":73},"end":{"line":152,"column":74}}],"line":152},"22":{"loc":{"start":{"line":156,"column":16},"end":{"line":164,"column":17}},"type":"if","locations":[{"start":{"line":156,"column":16},"end":{"line":164,"column":17}},{"start":{"line":156,"column":16},"end":{"line":164,"column":17}}],"line":156},"23":{"loc":{"start":{"line":156,"column":20},"end":{"line":156,"column":73}},"type":"binary-expr","locations":[{"start":{"line":156,"column":20},"end":{"line":156,"column":25}},{"start":{"line":156,"column":29},"end":{"line":156,"column":73}}],"line":156},"24":{"loc":{"start":{"line":175,"column":12},"end":{"line":177,"column":13}},"type":"if","locations":[{"start":{"line":175,"column":12},"end":{"line":177,"column":13}},{"start":{"line":175,"column":12},"end":{"line":177,"column":13}}],"line":175},"25":{"loc":{"start":{"line":180,"column":12},"end":{"line":182,"column":13}},"type":"if","locations":[{"start":{"line":180,"column":12},"end":{"line":182,"column":13}},{"start":{"line":180,"column":12},"end":{"line":182,"column":13}}],"line":180},"26":{"loc":{"start":{"line":185,"column":12},"end":{"line":187,"column":13}},"type":"if","locations":[{"start":{"line":185,"column":12},"end":{"line":187,"column":13}},{"start":{"line":185,"column":12},"end":{"line":187,"column":13}}],"line":185},"27":{"loc":{"start":{"line":188,"column":12},"end":{"line":190,"column":13}},"type":"if","locations":[{"start":{"line":188,"column":12},"end":{"line":190,"column":13}},{"start":{"line":188,"column":12},"end":{"line":190,"column":13}}],"line":188},"28":{"loc":{"start":{"line":196,"column":12},"end":{"line":198,"column":13}},"type":"if","locations":[{"start":{"line":196,"column":12},"end":{"line":198,"column":13}},{"start":{"line":196,"column":12},"end":{"line":198,"column":13}}],"line":196},"29":{"loc":{"start":{"line":199,"column":173},"end":{"line":199,"column":211}},"type":"cond-expr","locations":[{"start":{"line":199,"column":205},"end":{"line":199,"column":207}},{"start":{"line":199,"column":210},"end":{"line":199,"column":211}}],"line":199},"30":{"loc":{"start":{"line":210,"column":16},"end":{"line":216,"column":17}},"type":"if","locations":[{"start":{"line":210,"column":16},"end":{"line":216,"column":17}},{"start":{"line":210,"column":16},"end":{"line":216,"column":17}}],"line":210},"31":{"loc":{"start":{"line":219,"column":12},"end":{"line":224,"column":13}},"type":"if","locations":[{"start":{"line":219,"column":12},"end":{"line":224,"column":13}},{"start":{"line":219,"column":12},"end":{"line":224,"column":13}}],"line":219},"32":{"loc":{"start":{"line":231,"column":12},"end":{"line":241,"column":13}},"type":"if","locations":[{"start":{"line":231,"column":12},"end":{"line":241,"column":13}},{"start":{"line":231,"column":12},"end":{"line":241,"column":13}}],"line":231},"33":{"loc":{"start":{"line":235,"column":17},"end":{"line":241,"column":13}},"type":"if","locations":[{"start":{"line":235,"column":17},"end":{"line":241,"column":13}},{"start":{"line":235,"column":17},"end":{"line":241,"column":13}}],"line":235},"34":{"loc":{"start":{"line":265,"column":12},"end":{"line":273,"column":13}},"type":"if","locations":[{"start":{"line":265,"column":12},"end":{"line":273,"column":13}},{"start":{"line":265,"column":12},"end":{"line":273,"column":13}}],"line":265},"35":{"loc":{"start":{"line":268,"column":17},"end":{"line":273,"column":13}},"type":"if","locations":[{"start":{"line":268,"column":17},"end":{"line":273,"column":13}},{"start":{"line":268,"column":17},"end":{"line":273,"column":13}}],"line":268}},"s":{"0":1,"1":214,"2":0,"3":1591,"4":214,"5":214,"6":0,"7":0,"8":0,"9":0,"10":1805,"11":1591,"12":1,"13":1,"14":1,"15":1,"16":15,"17":15,"18":1070,"19":1070,"20":411,"21":411,"22":0,"23":2,"24":2,"25":4,"26":4,"27":4,"28":4,"29":4,"30":24,"31":3,"32":3,"33":4,"34":4,"35":3,"36":6,"37":6,"38":6,"39":6,"40":6,"41":12,"42":6,"43":6,"44":6,"45":5,"46":1,"47":0,"48":1,"49":1,"50":1,"51":0,"52":262,"53":32,"54":44,"55":44,"56":32,"57":230,"58":72,"59":192,"60":192,"61":192,"62":158,"63":10,"64":10,"65":10,"66":10,"67":56,"68":66,"69":10,"70":56,"71":56,"72":744,"73":56,"74":112,"75":56,"76":56,"77":10,"78":337,"79":10,"80":10,"81":20,"82":10,"83":10,"84":162,"85":10,"86":66,"87":66,"88":1098,"89":162,"90":66,"91":66,"92":42,"93":714,"94":102,"95":102,"96":42,"97":66,"98":36,"99":10,"100":66,"101":6,"102":6,"103":18,"104":6,"105":44,"106":44,"107":27,"108":17,"109":17,"110":57,"111":17,"112":1,"113":16,"114":16,"115":27,"116":16,"117":0,"118":16,"119":0,"120":5,"121":5,"122":5,"123":0,"124":5,"125":15,"126":16,"127":5,"128":15,"129":0,"130":15,"131":15,"132":15,"133":15,"134":15,"135":59,"136":15,"137":15,"138":5,"139":15,"140":5,"141":5,"142":5,"143":0,"144":31,"145":31,"146":31,"147":48,"148":10,"149":10,"150":38,"151":38,"152":38,"153":0,"154":31,"155":0,"156":0,"157":0,"158":10,"159":10,"160":106,"161":106,"162":246,"163":246,"164":106,"165":246,"166":10,"167":10,"168":24,"169":2,"170":22,"171":8,"172":14,"173":24,"174":1},"f":{"0":1591,"1":214,"2":0,"3":1591,"4":214,"5":0,"6":1805,"7":15,"8":1070,"9":1070,"10":411,"11":411,"12":0,"13":2,"14":2,"15":4,"16":4,"17":24,"18":3,"19":4,"20":6,"21":6,"22":12,"23":6,"24":6,"25":1,"26":1,"27":1,"28":0,"29":262,"30":44,"31":44,"32":192,"33":192,"34":10,"35":10,"36":56,"37":66,"38":744,"39":56,"40":112,"41":337,"42":10,"43":10,"44":20,"45":162,"46":66,"47":66,"48":1098,"49":162,"50":714,"51":102,"52":102,"53":10,"54":66,"55":6,"56":18,"57":57,"58":27,"59":5,"60":5,"61":15,"62":16,"63":0,"64":59,"65":15,"66":5,"67":31,"68":0,"69":0,"70":0,"71":10,"72":106,"73":246,"74":106,"75":246,"76":10,"77":24},"b":{"0":[1,1,1],"1":[214,0],"2":[1591,1591],"3":[1591,214],"4":[1591,1591],"5":[2,0],"6":[5,1],"7":[16],"8":[16],"9":[32,230],"10":[32,10],"11":[22,10],"12":[72,158],"13":[192,24],"14":[128,64],"15":[56,0],"16":[37,19],"17":[161,176],"18":[4],"19":[6,4],"20":[42,24],"21":[88,14],"22":[36,30],"23":[66,42],"24":[27,17],"25":[1,16],"26":[0,16],"27":[0,16],"28":[0,5],"29":[10,6],"30":[15,0],"31":[5,0],"32":[10,38],"33":[38,0],"34":[2,22],"35":[8,14]},"inputSourceMap":{"version":3,"file":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-cert/src/core/cert.ts","sources":["/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-cert/src/core/cert.ts"],"names":[],"mappings":"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","sourcesContent":["import { Schema87 } from '@0xcert/conventions';\nimport { Merkle, MerkleHasher, MerkleNoncer } from '@0xcert/merkle';\nimport { sha } from '@0xcert/utils';\nimport { cloneObject, readPath, stepPaths, toString, writePath } from '../utils/data';\nimport { PropPath, PropRecipe } from './prop';\n\n/**\n * Certification class configuration interface.\n */\nexport interface CertConfig {\n\n  /**\n   * JSON schema object.\n   */\n  schema: any;\n\n  /**\n   * Custom hash generator function.\n   */\n  hasher?: MerkleHasher;\n\n  /**\n   * Custom nonce generator function.\n   */\n  noncer?: MerkleNoncer;\n\n}\n\n/**\n * Main certification class.\n */\nexport class Cert {\n\n  /**\n   * JSON schema object.\n   */\n  protected schema: any;\n\n  /**\n   * Merkle class instance.\n   */\n  protected merkle: Merkle;\n\n  /**\n   * Returns a new instance of a Cert class.\n   * @param config Certificate configuration.\n   */\n  public static getInstance(config: CertConfig): Cert {\n    return new Cert(config);\n  }\n\n  /**\n   * Class constructor.\n   * @param config Certificate configuration.\n   */\n  public constructor(config: CertConfig) {\n    this.schema = config.schema;\n\n    this.merkle = new Merkle({\n      hasher: async (v: any) => sha(256, toString(v)),\n      noncer: async (p) => sha(256, p.join('.')),\n      ...config,\n    });\n  }\n\n  /**\n   * Calculates schema ID.\n   * @param normalize Sort objct keys alphabetically (backward compatibility).\n   */\n  public async identify(normalize?: boolean): Promise<string> {\n    return sha(256, JSON.stringify(\n      normalize !== false ? this.sortSchema(this.schema) : this.schema,\n    ));\n  }\n\n  /**\n   * Generates an evidence object which describes a complete data object.\n   * @param data Complete data object.\n   */\n  public async notarize(data: any): Promise<Schema87> {\n    const schemaProps = this.buildSchemaProps(data);\n    const compoundProps = await this.buildCompoundProps(schemaProps);\n    const schemaRecipes = await this.buildRecipes(compoundProps);\n\n    return {\n      $schema: 'https://conventions.0xcert.org/87-asset-evidence.json',\n      data: schemaRecipes.map((recipe) => ({\n        path: recipe.path,\n        nodes: recipe.nodes,\n        values: recipe.values,\n      })),\n    };\n  }\n\n  /**\n   * Returns data object with only provided paths. Use this function to create\n   * a public metadata data.\n   * @param data Complete data object.\n   * @param paths Property paths to be disclosed to a user.\n   */\n  public expose(data: any, paths: PropPath[]): any {\n    const metadata = {};\n\n    paths.forEach((path) => {\n      const value = readPath(path, data);\n      writePath(path, value, metadata);\n    });\n\n    return JSON.parse(JSON.stringify(metadata));\n  }\n\n  /**\n   * Returns the minimal list of recipes needed to verify the provided data.\n   * @param data Complete data object.\n   * @param paths Property paths to be disclosed to a user.\n   */\n  public async disclose(data: any, paths: PropPath[]): Promise<Schema87> {\n    const schemaProps = this.buildSchemaProps(data);\n    const compoundProps = await this.buildCompoundProps(schemaProps);\n    const schemaRecipes = await this.buildRecipes(compoundProps, paths);\n\n    return {\n      $schema: 'https://conventions.0xcert.org/87-asset-evidence.json',\n      data: schemaRecipes.map((recipe) => ({\n        path: recipe.path,\n        nodes: recipe.nodes,\n        values: recipe.values,\n      })),\n    };\n  }\n\n  /**\n   * Returns an imprint when all the property values of the provided `data` are\n   * described with the `recipes`. Note that custom data properties will always\n   * be ignored and will thus always pass.\n   * @param data Complete data object.\n   * @param evidence Evidence object.\n   */\n  public async calculate(data: any, evidence: Schema87): Promise<string> {\n    try {\n      if (this.checkDataInclusion(data, evidence.data)) {\n        return this.imprintRecipes(evidence.data);\n      } else {\n        return null;\n      }\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * Calculates Merkle tree root node for the provided `data`.\n   * @param data Complete data object.\n   */\n  public async imprint(data: any): Promise<string> {\n    return this.notarize(data)\n      .then((s: Schema87) => s.data[0].nodes[0].hash)\n      .catch(() => null);\n  }\n\n  /**\n   * Converts data object to a list of property values. The list will include\n   * only properties defined by the schema but will not include compound\n   * properties.\n   * @param data Arbitrary data object.\n   * @param schema Used for recursive processing.\n   * @param prepend Used for recursive processing.\n   */\n  protected buildSchemaProps(data: any, schema = this.schema, prepend = []): any {\n    if (schema.type === 'array') {\n      const items = (data || [])\n        .map((v, i) => {\n          return this.buildSchemaProps(v, schema.items, [...prepend, i]);\n        })\n        .reduce((a, b) => a.concat(b), []);\n      return items.length > 0\n        ? items\n        : [this.buildSchemaProps(undefined, {}, [...prepend])]; // add an empty object to preserve key sequence\n    } else if (schema.type === 'object') {\n      return Object.keys(schema.properties)\n        .sort()\n        .map((key: string) => {\n          const prop = this.buildSchemaProps((data || {})[key], schema.properties[key], [...prepend, key]);\n          return ['object', 'array'].indexOf(schema.properties[key].type) === -1 ? [prop] : prop;\n        })\n        .reduce((a, b) => a.concat(b), []);\n    } else {\n      return {\n        path: prepend,\n        value: data,\n        key: prepend.join('.'),\n        group: prepend.slice(0, -1).join('.'),\n      };\n    }\n  }\n\n  /**\n   * Upgrades the provided list of data properties with properties of type array\n   * and object. These parents have value that equals the root merkle hash of\n   * the subordinated object.\n   * @param props Data properties.\n   */\n  protected async buildCompoundProps(props): Promise<any> {\n    props = [...props];\n\n    const groupsByName = this.buildPropGroups(props);\n    const groups = Object.keys(groupsByName).sort((a, b) => a > b ? -1 : 1)\n      .filter((g: string) => g !== '');\n\n    for (const group of groups) {\n      const path = groupsByName[group];\n      const values = [...props.filter((i: any) => i.group === group)]\n        .sort((a, b) => a.key > b.key ? 1 : -1)\n        .map((i: any) => i.value);\n\n      const recipes = await this.merkle.notarize(values, path);\n      props.push({\n        path,\n        value: recipes.nodes[0].hash,\n        key: path.join('.'),\n        group: path.slice(0, -1).join('.'),\n      });\n    }\n\n    return props.sort((a, b) => a.key > b.key ? 1 : -1);\n  }\n\n  /**\n   * Calculates and returns recipes built for each data property. When providing\n   * the `paths` only the recipes and recipe data needed for the required\n   * properties are included in the result.\n   * @param props List of schema properties.\n   * @param paths Required property paths.\n   */\n  protected async buildRecipes(props, paths = null): Promise<PropRecipe[]> {\n    const keys = paths ? stepPaths(paths).map((p: any) => p.join('.')) : null;\n\n    const groups = {};\n    props.forEach((p: any) => groups[p.group] = p.path.slice(0, -1));\n\n    return Promise.all(\n      Object.keys(groups).map(async (group: any) => {\n        const values = props\n          .filter((p: any) => p.group === group)\n          .map((p: any) => p.value);\n\n        let recipes = await this.merkle.notarize(values, groups[group]);\n        if (keys) {\n          const expose = props\n            .filter((p: any) => p.group === group)\n            .map((p, i) => keys.indexOf(p.key) === -1 ? -1 : i)\n            .filter((i: any) => i !== -1);\n\n          recipes = await this.merkle.disclose(recipes, expose);\n        }\n\n        if (!keys || keys.indexOf(groups[group].join('.')) !== -1) {\n          return {\n            path: groups[group],\n            values: recipes.values,\n            nodes: recipes.nodes,\n            key: groups[group].join('.'),\n            group: groups[group].slice(0, -1).join('.'),\n          };\n        }\n      }),\n    ).then((r: any) => {\n      return r.filter((v: any) => !!v);\n    });\n  }\n\n  /**\n   * Returns `true` when all the property values of the provided `data` are\n   * described with the `recipes`. Note that custom data properties (including\n   * defined fields of undefined value) will always be ignored and will thus\n   * always pass.\n   * @param data Complete data object.\n   * @param recipes Data recipes.\n   */\n  protected checkDataInclusion(data: any, recipes: PropRecipe[]): boolean {\n    const schemaProps = this.buildSchemaProps(data);\n\n    recipes = cloneObject(recipes).map((p: any) => ({\n      key: p.path.join('.'),\n      group: p.path.slice(0, -1).join('.'),\n      ...p,\n    }));\n\n    for (const prop of schemaProps) {\n      const dataValue = readPath(prop.path, data);\n\n      if (typeof dataValue === 'undefined') {\n        continue;\n      }\n\n      const recipeGroup = prop.path.slice(0, -1).join('.');\n      const recipe = recipes.find((p: any) => p['key'] === recipeGroup);\n      if (!recipe) {\n        return false;\n      }\n\n      const dataIndex = this.getPathIndexes(prop.path).pop();\n      const recipeValue = recipe.values.find((v: any) => v.index === dataIndex);\n\n      if (typeof recipeValue === 'undefined') {\n        continue;\n      }\n\n      if (recipeValue.value !== dataValue) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Calculates Merkle tree root node from the provided recipes.\n   * @param recipes Data recipes.\n   */\n  protected async imprintRecipes(recipes: PropRecipe[]): Promise<string> {\n    if (recipes.length === 0) {\n      return this.getEmptyImprint();\n    }\n\n    recipes = cloneObject(recipes).map((prop: any) => ({\n      key: prop.path.join('.'),\n      group: prop.path.slice(0, -1).join('.'),\n      ...prop,\n    })).sort((a, b) => a.path.length > b.path.length ? -1 : 1);\n\n    for (const recipe of recipes) {\n      const imprint = await this.merkle.imprint(recipe).catch(() => '');\n      recipe.nodes.unshift({\n        index: 0,\n        hash: imprint,\n      });\n\n      const groupKey = recipe.path.slice(0, -1).join('.');\n      const groupPath = recipe.path.slice(0, -1);\n      const groupIndex = this.getPathIndexes(recipe.path).slice(-1).pop();\n      const groupRecipe = recipes.find((p: any) => p['key'] === groupKey);\n      if (groupRecipe) {\n        groupRecipe.values.unshift({ // adds posible duplicate thus use `unshift`\n          index: groupIndex,\n          value: imprint,\n          nonce: await this.merkle.nonce([...groupPath, groupIndex]),\n        });\n      }\n    }\n\n    const rootRecipe = recipes.find((f: any) => f['key'] === '');\n    if (rootRecipe) {\n      return rootRecipe.nodes.find((n: any) => n.index === 0).hash;\n    } else {\n      return this.getEmptyImprint();\n    }\n  }\n\n  /**\n   * Returns an index of a property based on the schema object definition.\n   * @param path Property path.\n   */\n  protected getPathIndexes(keys: PropPath): number[] {\n    const indexes = [];\n    let schema = this.schema;\n\n    for (const key of keys) {\n      if (schema.type === 'array') {\n        indexes.push(key);\n        schema = schema.items;\n      } else if (schema.type === 'object') {\n        indexes.push(\n          Object.keys(schema.properties).sort().indexOf(key as string),\n        );\n        schema = schema.properties[key];\n      } else {\n        indexes.push(undefined);\n      }\n    }\n\n    return indexes;\n  }\n\n  /**\n   * Returns a hash of an empty value.\n   */\n  protected async getEmptyImprint(): Promise<any> {\n    return this.merkle.notarize([]).then((e: any) => e.nodes[0].hash);\n  }\n\n  /**\n   * Returns a hash of groups where the key represents group name and the value\n   * represents group path.\n   * @param props List of properties.\n   */\n  protected buildPropGroups(props): any {\n    const groups = {};\n\n    props.map((p: any) => {\n      const path = [];\n      return p.path.map((v: any) => {\n        path.push(v);\n        return [...path];\n      });\n    }).reduce((a, b) => a.concat(b), []).forEach((p: any) => {\n      return groups[p.slice(0, -1).join('.')] = p.slice(0, -1);\n    });\n\n    return groups;\n  }\n\n  /**\n   * Returns sorted schema object.\n   * @param obj Schema object.\n   */\n  protected sortSchema(obj) {\n    return Object.keys(obj).sort().reduce((acc, key) => {\n      if (Array.isArray(obj[key])) { // support arrays\n        acc[key] = obj[key].sort();\n      } else if (typeof obj[key] === 'object') { // sort object keys\n        acc[key] = this.sortSchema(obj[key]);\n      } else { // attach value\n        acc[key] = obj[key];\n      }\n      return acc;\n    }, {});\n  }\n\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"73e64143a13699f3f48b922b5f2720ba906d1709","contentHash":"3b89f5f94768418f9234199b934e53abb4f415b31ac461b363f90ac94966c2ea"},"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-cert/src/utils/data.ts":{"path":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-cert/src/utils/data.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":4,"column":4},"end":{"line":9,"column":5}},"2":{"start":{"line":5,"column":8},"end":{"line":5,"column":74}},"3":{"start":{"line":8,"column":8},"end":{"line":8,"column":18}},"4":{"start":{"line":11,"column":0},"end":{"line":11,"column":28}},"5":{"start":{"line":13,"column":4},"end":{"line":13,"column":43}},"6":{"start":{"line":15,"column":0},"end":{"line":15,"column":34}},"7":{"start":{"line":17,"column":18},"end":{"line":17,"column":28}},"8":{"start":{"line":18,"column":4},"end":{"line":24,"column":7}},"9":{"start":{"line":19,"column":24},"end":{"line":19,"column":26}},"10":{"start":{"line":20,"column":8},"end":{"line":23,"column":11}},"11":{"start":{"line":21,"column":12},"end":{"line":21,"column":31}},"12":{"start":{"line":22,"column":12},"end":{"line":22,"column":52}},"13":{"start":{"line":25,"column":4},"end":{"line":27,"column":7}},"14":{"start":{"line":26,"column":8},"end":{"line":26,"column":26}},"15":{"start":{"line":29,"column":0},"end":{"line":29,"column":30}},"16":{"start":{"line":31,"column":4},"end":{"line":44,"column":5}},"17":{"start":{"line":32,"column":8},"end":{"line":40,"column":9}},"18":{"start":{"line":33,"column":12},"end":{"line":33,"column":29}},"19":{"start":{"line":35,"column":13},"end":{"line":40,"column":9}},"20":{"start":{"line":36,"column":12},"end":{"line":36,"column":24}},"21":{"start":{"line":39,"column":12},"end":{"line":39,"column":58}},"22":{"start":{"line":43,"column":8},"end":{"line":43,"column":25}},"23":{"start":{"line":46,"column":0},"end":{"line":46,"column":28}},"24":{"start":{"line":48,"column":4},"end":{"line":48,"column":22}},"25":{"start":{"line":49,"column":14},"end":{"line":49,"column":18}},"26":{"start":{"line":50,"column":4},"end":{"line":65,"column":5}},"27":{"start":{"line":50,"column":17},"end":{"line":50,"column":18}},"28":{"start":{"line":51,"column":20},"end":{"line":51,"column":27}},"29":{"start":{"line":52,"column":24},"end":{"line":52,"column":35}},"30":{"start":{"line":53,"column":8},"end":{"line":64,"column":9}},"31":{"start":{"line":54,"column":12},"end":{"line":54,"column":29}},"32":{"start":{"line":57,"column":12},"end":{"line":62,"column":13}},"33":{"start":{"line":58,"column":16},"end":{"line":58,"column":30}},"34":{"start":{"line":60,"column":17},"end":{"line":62,"column":13}},"35":{"start":{"line":61,"column":16},"end":{"line":61,"column":30}},"36":{"start":{"line":63,"column":12},"end":{"line":63,"column":27}},"37":{"start":{"line":66,"column":4},"end":{"line":66,"column":44}},"38":{"start":{"line":68,"column":0},"end":{"line":68,"column":30}}},"fnMap":{"0":{"name":"toString","decl":{"start":{"line":3,"column":9},"end":{"line":3,"column":17}},"loc":{"start":{"line":3,"column":23},"end":{"line":10,"column":1}},"line":3},"1":{"name":"cloneObject","decl":{"start":{"line":12,"column":9},"end":{"line":12,"column":20}},"loc":{"start":{"line":12,"column":26},"end":{"line":14,"column":1}},"line":12},"2":{"name":"stepPaths","decl":{"start":{"line":16,"column":9},"end":{"line":16,"column":18}},"loc":{"start":{"line":16,"column":26},"end":{"line":28,"column":1}},"line":16},"3":{"name":"(anonymous_3)","decl":{"start":{"line":18,"column":18},"end":{"line":18,"column":19}},"loc":{"start":{"line":18,"column":28},"end":{"line":24,"column":5}},"line":18},"4":{"name":"(anonymous_4)","decl":{"start":{"line":20,"column":21},"end":{"line":20,"column":22}},"loc":{"start":{"line":20,"column":31},"end":{"line":23,"column":9}},"line":20},"5":{"name":"(anonymous_5)","decl":{"start":{"line":25,"column":41},"end":{"line":25,"column":42}},"loc":{"start":{"line":25,"column":50},"end":{"line":27,"column":5}},"line":25},"6":{"name":"readPath","decl":{"start":{"line":30,"column":9},"end":{"line":30,"column":17}},"loc":{"start":{"line":30,"column":30},"end":{"line":45,"column":1}},"line":30},"7":{"name":"writePath","decl":{"start":{"line":47,"column":9},"end":{"line":47,"column":18}},"loc":{"start":{"line":47,"column":43},"end":{"line":67,"column":1}},"line":47}},"branchMap":{"0":{"loc":{"start":{"line":5,"column":15},"end":{"line":5,"column":73}},"type":"cond-expr","locations":[{"start":{"line":5,"column":60},"end":{"line":5,"column":62}},{"start":{"line":5,"column":65},"end":{"line":5,"column":73}}],"line":5},"1":{"loc":{"start":{"line":5,"column":15},"end":{"line":5,"column":57}},"type":"binary-expr","locations":[{"start":{"line":5,"column":15},"end":{"line":5,"column":41}},{"start":{"line":5,"column":45},"end":{"line":5,"column":57}}],"line":5},"2":{"loc":{"start":{"line":32,"column":8},"end":{"line":40,"column":9}},"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":40,"column":9}},{"start":{"line":32,"column":8},"end":{"line":40,"column":9}}],"line":32},"3":{"loc":{"start":{"line":35,"column":13},"end":{"line":40,"column":9}},"type":"if","locations":[{"start":{"line":35,"column":13},"end":{"line":40,"column":9}},{"start":{"line":35,"column":13},"end":{"line":40,"column":9}}],"line":35},"4":{"loc":{"start":{"line":47,"column":32},"end":{"line":47,"column":41}},"type":"default-arg","locations":[{"start":{"line":47,"column":39},"end":{"line":47,"column":41}}],"line":47},"5":{"loc":{"start":{"line":48,"column":11},"end":{"line":48,"column":21}},"type":"binary-expr","locations":[{"start":{"line":48,"column":11},"end":{"line":48,"column":15}},{"start":{"line":48,"column":19},"end":{"line":48,"column":21}}],"line":48},"6":{"loc":{"start":{"line":53,"column":8},"end":{"line":64,"column":9}},"type":"if","locations":[{"start":{"line":53,"column":8},"end":{"line":64,"column":9}},{"start":{"line":53,"column":8},"end":{"line":64,"column":9}}],"line":53},"7":{"loc":{"start":{"line":57,"column":12},"end":{"line":62,"column":13}},"type":"if","locations":[{"start":{"line":57,"column":12},"end":{"line":62,"column":13}},{"start":{"line":57,"column":12},"end":{"line":62,"column":13}}],"line":57},"8":{"loc":{"start":{"line":57,"column":16},"end":{"line":57,"column":78}},"type":"binary-expr","locations":[{"start":{"line":57,"column":16},"end":{"line":57,"column":43}},{"start":{"line":57,"column":47},"end":{"line":57,"column":78}}],"line":57},"9":{"loc":{"start":{"line":60,"column":17},"end":{"line":62,"column":13}},"type":"if","locations":[{"start":{"line":60,"column":17},"end":{"line":62,"column":13}},{"start":{"line":60,"column":17},"end":{"line":62,"column":13}}],"line":60}},"s":{"0":1,"1":1079,"2":1079,"3":0,"4":1,"5":11,"6":1,"7":8,"8":8,"9":12,"10":12,"11":23,"12":23,"13":8,"14":28,"15":1,"16":135,"17":135,"18":0,"19":135,"20":39,"21":96,"22":12,"23":1,"24":9,"25":9,"26":9,"27":9,"28":18,"29":18,"30":18,"31":9,"32":9,"33":4,"34":5,"35":4,"36":9,"37":9,"38":1},"f":{"0":1079,"1":11,"2":8,"3":12,"4":23,"5":28,"6":135,"7":9},"b":{"0":[17,1062],"1":[1079,1063],"2":[0,135],"3":[39,96],"4":[0],"5":[9,0],"6":[9,9],"7":[4,5],"8":[9,5],"9":[4,1]},"inputSourceMap":{"version":3,"file":"/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-cert/src/utils/data.ts","sources":["/Users/xpepermint/Work/0xcert/repositories/framework/packages/0xcert-cert/src/utils/data.ts"],"names":[],"mappings":";;AAKA,SAAgB,QAAQ,CAAC,GAAQ;IAC/B,IAAI;QACF,OAAO,OAAO,GAAG,KAAK,WAAW,IAAI,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC;KACnE;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,EAAE,CAAC;KACX;AACH,CAAC;AAND,4BAMC;AAMD,SAAgB,WAAW,CAAC,GAAQ;IAClC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;AACzC,CAAC;AAFD,kCAEC;AAMD,SAAgB,SAAS,CAAC,KAA8B;IACtD,MAAM,KAAK,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAEzB,KAAK,CAAC,OAAO,CAAC,CAAC,IAAS,EAAE,EAAE;QAC1B,MAAM,OAAO,GAAG,EAAE,CAAC;QAEnB,IAAI,CAAC,OAAO,CAAC,CAAC,IAAS,EAAE,EAAE;YACzB,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACnB,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,EAAE;QAChD,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC;IACpB,CAAC,CAAC,CAAC;AACL,CAAC;AAfD,8BAeC;AAOD,SAAgB,QAAQ,CAAC,IAAS,EAAE,IAAS;IAC3C,IAAI;QACF,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACxB,OAAO,SAAS,CAAC;SAClB;aAAM,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YAC5B,OAAO,IAAI,CAAC;SACb;aAAM;YACL,OAAO,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/C;KACF;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,SAAS,CAAC;KAClB;AACH,CAAC;AAZD,4BAYC;AAQD,SAAgB,SAAS,CAAC,IAAS,EAAE,KAAU,EAAE,OAAY,EAAE;IAC7D,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IAElB,IAAI,GAAG,GAAG,IAAI,CAAC;IAEf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACpC,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACpB,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAE5B,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;YAClC,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;SAClB;aAAM;YACL,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,GAAG,CAAC,GAAG,CAAC,KAAK,WAAW,EAAE;gBAClE,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;aACf;iBAAM,IAAI,OAAO,GAAG,CAAC,GAAG,CAAC,KAAK,WAAW,EAAE;gBAC1C,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;aACf;YACD,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;SAChB;KACF;IAED,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;AAC1C,CAAC;AAtBD,8BAsBC","sourcesContent":["/**\n * Converts any value to string following the procedure in ES6 7.1.12.\n * https://www.ecma-international.org/ecma-262/6.0/#sec-tostring\n * @param val Arbitrary value.\n */\nexport function toString(val: any): string {\n  try {\n    return typeof val === 'undefined' || val === null ? '' : `${val}`;\n  } catch (e) {\n    return '';\n  }\n}\n\n/**\n * Returns cloned object.\n * @param obj Arbitrary object.\n */\nexport function cloneObject(obj: any): any {\n  return JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Updates the list of paths with connecting paths (e.g. for [a, b, c] arrays\n * [a, b] and [a] will also be added).\n */\nexport function stepPaths(paths: ((string | number)[])[]): any[] {\n  const items = { '': [] };\n\n  paths.forEach((path: any) => {\n    const variant = [];\n\n    path.forEach((item: any) => {\n      variant.push(item);\n      items[variant.join('.')] = [...variant];\n    });\n  });\n\n  return Object.keys(items).sort().map((key: any) => {\n    return items[key];\n  });\n}\n\n/**\n * Returns object value at path.\n * @param path Property path.\n * @param json Arbitrary data object.\n */\nexport function readPath(path: any, json: any): any {\n  try {\n    if (!Array.isArray(path)) {\n      return undefined;\n    } else if (path.length === 0) {\n      return json;\n    } else {\n      return readPath(path.slice(1), json[path[0]]);\n    }\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/**\n * Sets value at path for the provided json object and returns the updated json.\n * @param path Property path.\n * @param value Property value.\n * @param json Arbitrary data object.\n */\nexport function writePath(path: any, value: any, json: any = {}) {\n  json = json || {};\n\n  let obj = json;\n\n  for (let i = 0; i < path.length; i++) {\n    const key = path[i];\n    const nextKey = path[i + 1];\n\n    if (typeof nextKey === 'undefined') {\n      obj[key] = value;\n    } else {\n      if (typeof nextKey === 'number' && typeof obj[key] === 'undefined') {\n        obj[key] = [];\n      } else if (typeof obj[key] === 'undefined') {\n        obj[key] = {};\n      }\n      obj = obj[key];\n    }\n  }\n\n  return JSON.parse(JSON.stringify(json));\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"dee9092077841b80c69ab67cf26a36fd9ab289b8","contentHash":"e905781b60c5ef743bcb67a223a2dc2207d336957783e42a4e0be877fd363374"}}