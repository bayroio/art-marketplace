"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function toString(val) {
    try {
        return typeof val === 'undefined' || val === null ? '' : `${val}`;
    }
    catch (e) {
        return '';
    }
}
exports.toString = toString;
function cloneObject(obj) {
    return JSON.parse(JSON.stringify(obj));
}
exports.cloneObject = cloneObject;
function stepPaths(paths) {
    const items = { '': [] };
    paths.forEach((path) => {
        const variant = [];
        path.forEach((item) => {
            variant.push(item);
            items[variant.join('.')] = [...variant];
        });
    });
    return Object.keys(items).sort().map((key) => {
        return items[key];
    });
}
exports.stepPaths = stepPaths;
function readPath(path, json) {
    try {
        if (!Array.isArray(path)) {
            return undefined;
        }
        else if (path.length === 0) {
            return json;
        }
        else {
            return readPath(path.slice(1), json[path[0]]);
        }
    }
    catch (e) {
        return undefined;
    }
}
exports.readPath = readPath;
function writePath(path, value, json = {}) {
    json = json || {};
    let obj = json;
    for (let i = 0; i < path.length; i++) {
        const key = path[i];
        const nextKey = path[i + 1];
        if (typeof nextKey === 'undefined') {
            obj[key] = value;
        }
        else {
            if (typeof nextKey === 'number' && typeof obj[key] === 'undefined') {
                obj[key] = [];
            }
            else if (typeof obj[key] === 'undefined') {
                obj[key] = {};
            }
            obj = obj[key];
        }
    }
    return JSON.parse(JSON.stringify(json));
}
exports.writePath = writePath;
//# sourceMappingURL=data.js.map