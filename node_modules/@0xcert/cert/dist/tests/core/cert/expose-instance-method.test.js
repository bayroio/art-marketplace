"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const spec_1 = require("@hayspec/spec");
const cert_1 = require("../../../core/cert");
const schemas_1 = require("../helpers/schemas");
const spec = new spec_1.Spec();
spec.test('returns truncated data object with name', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const cert = new cert_1.Cert({
        schema: {},
    });
    const metadata = cert.expose(schemas_1.defaultData, [
        ['name'],
    ]);
    ctx.deepEqual(metadata, {
        name: 'B',
    });
}));
spec.test('returns truncated data object with event.organizer.name and email', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const cert = new cert_1.Cert({
        schema: {},
    });
    const metadata = cert.expose(schemas_1.defaultData, [
        ['event', 'organizer', 'name'],
        ['email'],
    ]);
    ctx.deepEqual(metadata, {
        event: {
            organizer: {
                name: 'B',
            },
        },
        email: 'A',
    });
}));
spec.test('returns truncated data object with tags.1', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const cert = new cert_1.Cert({
        schema: {},
    });
    const metadata = cert.expose(schemas_1.defaultData, [
        ['tags', 1],
    ]);
    ctx.deepEqual(metadata, {
        tags: [null, 2],
    });
}));
exports.default = spec;
//# sourceMappingURL=expose-instance-method.test.js.map