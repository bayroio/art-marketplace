"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const spec_1 = require("@hayspec/spec");
const cert_1 = require("../../../core/cert");
const spec = new spec_1.Spec();
spec.test('calculates schema ID', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const cert0 = new cert_1.Cert({
        schema: {
            type: 'object',
            required: ['name', '$schema', 'tags', 'age'],
            name: 'foo',
            properties: {
                name: {
                    type: 'string',
                    description: '',
                },
                tags: {
                    type: 'array',
                    items: {
                        type: 'string',
                        title: 'foo',
                    },
                },
            },
        },
    });
    const cert1 = new cert_1.Cert({
        schema: {
            name: 'foo',
            required: ['name', '$schema', 'tags', 'age'],
            properties: {
                name: {
                    description: '',
                    type: 'string',
                },
                tags: {
                    items: {
                        title: 'foo',
                        type: 'string',
                    },
                    type: 'array',
                },
            },
            type: 'object',
        },
    });
    ctx.is(yield cert0.identify(), '4310b2be8bba387708e80b34d8cb922e03cf0459c8c0d38a74f95d751b242570');
    ctx.is(yield cert1.identify(), '4310b2be8bba387708e80b34d8cb922e03cf0459c8c0d38a74f95d751b242570');
}));
exports.default = spec;
//# sourceMappingURL=identify-instance-method.test.js.map