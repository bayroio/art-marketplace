"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const spec_1 = require("@hayspec/spec");
const cert_1 = require("../../../core/cert");
const schemas_1 = require("../helpers/schemas");
const spec = new spec_1.Spec();
spec.test('imprints complete data object', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const cert = new cert_1.Cert({
        schema: schemas_1.defaultSchema,
    });
    const recipes = yield cert.notarize(schemas_1.defaultData);
    const imprint = yield cert.calculate(schemas_1.defaultData, recipes);
    ctx.is(imprint, '048c8f3384d5600792a4c8279d2c933fa43c26b81f2cab63462b72dd7488baad');
}));
spec.test('validates selected paths', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const cert = new cert_1.Cert({
        schema: schemas_1.defaultSchema,
    });
    const recipes = yield cert.disclose(schemas_1.defaultData, [
        ['name'],
    ]);
    const data = { name: 'B' };
    const imprint = yield cert.calculate(data, recipes);
    ctx.is(imprint, '048c8f3384d5600792a4c8279d2c933fa43c26b81f2cab63462b72dd7488baad');
}));
spec.test('validates selected nested paths', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const cert = new cert_1.Cert({
        schema: schemas_1.defaultSchema,
    });
    const recipes = yield cert.disclose(schemas_1.defaultData, [
        ['name'],
        ['books', 1, 'title'],
    ]);
    const data = {
        name: 'B',
        books: [{}, { title: 'B1' }],
    };
    const imprint = yield cert.calculate(data, recipes);
    ctx.is(imprint, '048c8f3384d5600792a4c8279d2c933fa43c26b81f2cab63462b72dd7488baad');
}));
spec.test('fails when data includes more data then exposed', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const cert = new cert_1.Cert({
        schema: schemas_1.defaultSchema,
    });
    const recipes = yield cert.disclose(schemas_1.defaultData, [
        ['name'],
        ['books', 1, 'title'],
    ]);
    const data = {
        name: 'B',
        books: [{ title: 'B0' }, { title: 'B1' }],
    };
    const imprint = yield cert.calculate(data, recipes);
    ctx.is(imprint, null);
}));
spec.test('pass on custom properties not defined by schema', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const cert = new cert_1.Cert({
        schema: schemas_1.defaultSchema,
    });
    const recipes = yield cert.disclose(schemas_1.defaultData, [
        ['name'],
    ]);
    const data = {
        name: 'B',
        custom: [{ title: 'B0' }],
    };
    const imprint = yield cert.calculate(data, recipes);
    ctx.is(imprint, '048c8f3384d5600792a4c8279d2c933fa43c26b81f2cab63462b72dd7488baad');
}));
spec.test('pass on preliminary array and following object empty fields', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const cert = new cert_1.Cert({
        schema: schemas_1.defaultSchema,
    });
    const data = {
        email: 'foo',
    };
    const recipes = yield cert.notarize(data);
    const imprint = yield cert.calculate(data, recipes);
    ctx.is(imprint, 'f5414c1036e8764d0ded2f3b33dd85bc511f080752a1d27eec17d647bdf7b62f');
}));
exports.default = spec;
//# sourceMappingURL=calculate-instance-method.test.js.map