import { Schema87 } from '@0xcert/conventions';
import { Merkle, MerkleHasher, MerkleNoncer } from '@0xcert/merkle';
import { PropPath, PropRecipe } from './prop';
export interface CertConfig {
    schema: any;
    hasher?: MerkleHasher;
    noncer?: MerkleNoncer;
}
export declare class Cert {
    protected schema: any;
    protected merkle: Merkle;
    static getInstance(config: CertConfig): Cert;
    constructor(config: CertConfig);
    identify(normalize?: boolean): Promise<string>;
    notarize(data: any): Promise<Schema87>;
    expose(data: any, paths: PropPath[]): any;
    disclose(data: any, paths: PropPath[]): Promise<Schema87>;
    calculate(data: any, evidence: Schema87): Promise<string>;
    imprint(data: any): Promise<string>;
    protected buildSchemaProps(data: any, schema?: any, prepend?: any[]): any;
    protected buildCompoundProps(props: any): Promise<any>;
    protected buildRecipes(props: any, paths?: any): Promise<PropRecipe[]>;
    protected checkDataInclusion(data: any, recipes: PropRecipe[]): boolean;
    protected imprintRecipes(recipes: PropRecipe[]): Promise<string>;
    protected getPathIndexes(keys: PropPath): number[];
    protected getEmptyImprint(): Promise<any>;
    protected buildPropGroups(props: any): any;
    protected sortSchema(obj: any): {};
}
