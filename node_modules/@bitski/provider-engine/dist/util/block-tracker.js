"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var eth_block_tracker_1 = __importDefault(require("eth-block-tracker"));
var events_1 = require("events");
var block_tracker_error_1 = require("../errors/block-tracker-error");
var create_payload_1 = require("./create-payload");
var eth_util_1 = require("./eth-util");
// Class responsible for tracking new blocks as they are mined,
// loading them, parsing them, and alerting subscribers via events.
var BlockTracker = /** @class */ (function (_super) {
    __extends(BlockTracker, _super);
    function BlockTracker(opts) {
        var _this = _super.call(this) || this;
        // Number of milliseconds to wait before retrying
        _this.blockTimeout = 300;
        // Maximum attempts to load a block
        _this.maxBlockRetries = 3;
        _this.provider = opts.provider;
        _this._blockTracker = opts.blockTracker || new eth_block_tracker_1.default(__assign({}, opts, { setSkipCacheFlag: true }));
        return _this;
    }
    BlockTracker.prototype.start = function () {
        this.createSubscriptions();
    };
    BlockTracker.prototype.stop = function () {
        this.destroySubscriptions();
    };
    BlockTracker.prototype.fetchLatest = function () {
        var _this = this;
        return this._blockTracker.checkForLatestBlock().catch(function (error) {
            _this.emit('error', error);
        });
    };
    BlockTracker.prototype.createSubscriptions = function () {
        // on new block, request block body and emit as events
        this._blockTracker.on('latest', this.onLatest.bind(this));
        // forward other events
        this._blockTracker.on('sync', this.emit.bind(this, 'sync'));
        this._blockTracker.on('error', this.emit.bind(this, 'error'));
    };
    BlockTracker.prototype.destroySubscriptions = function () {
        // stop block polling by removing event listeners
        this._blockTracker.removeAllListeners();
    };
    BlockTracker.prototype.onLatest = function (blockNumber) {
        this.currentBlockNumber = blockNumber;
        this.loadBlock(blockNumber);
    };
    // Tries to get the block payload recursively
    BlockTracker.prototype.loadBlock = function (blockNumber, callCount) {
        var _this = this;
        if (callCount === void 0) { callCount = 0; }
        this._getBlockByNumber(blockNumber).then(function (blockResponse) {
            // Result can be null if the block hasn't fully propagated to the nodes
            if (blockResponse.result) {
                _this.updateBlock(blockResponse.result);
            }
            else if (callCount < _this.maxBlockRetries && blockNumber === _this.currentBlockNumber) {
                // Only call recursively if the current block number is still the same
                // and if we are under the retry limit.
                setTimeout(function () {
                    _this.loadBlock(blockNumber, callCount + 1);
                }, _this.blockTimeout);
            }
            else {
                throw block_tracker_error_1.BlockTrackerError.BlockNotFound(blockNumber);
            }
        }).catch(function (err) {
            // Don't retry for errors (provider should have already retried)
            _this.emit('error', err);
        });
    };
    BlockTracker.prototype._getBlockByNumber = function (blockNumber) {
        var _this = this;
        var req = create_payload_1.createPayload({ method: 'eth_getBlockByNumber', params: [blockNumber, false], skipCache: true });
        return new Promise(function (fulfill, reject) {
            _this.provider.sendAsync(req, function (err, result) {
                if (err) {
                    return reject(err);
                }
                fulfill(result);
            });
        });
    };
    // Parse the block into a buffer representation and update subscribers.
    BlockTracker.prototype.updateBlock = function (block) {
        var bufferBlock = toBufferBlock(block);
        // set current + emit "block" event
        this._setCurrentBlock(bufferBlock);
        // emit other events
        this.emit('rawBlock', block);
        this.emit('latest', block);
    };
    BlockTracker.prototype._setCurrentBlock = function (bufferBlock) {
        this.currentBlock = bufferBlock;
        this.emit('block', bufferBlock);
    };
    return BlockTracker;
}(events_1.EventEmitter));
exports.default = BlockTracker;
// util
function toBufferBlock(jsonBlock) {
    return {
        number: eth_util_1.toBuffer(jsonBlock.number),
        hash: eth_util_1.toBuffer(jsonBlock.hash),
        parentHash: eth_util_1.toBuffer(jsonBlock.parentHash),
        nonce: eth_util_1.toBuffer(jsonBlock.nonce),
        mixHash: eth_util_1.toBuffer(jsonBlock.mixHash),
        sha3Uncles: eth_util_1.toBuffer(jsonBlock.sha3Uncles),
        logsBloom: eth_util_1.toBuffer(jsonBlock.logsBloom),
        transactionsRoot: eth_util_1.toBuffer(jsonBlock.transactionsRoot),
        stateRoot: eth_util_1.toBuffer(jsonBlock.stateRoot),
        receiptsRoot: eth_util_1.toBuffer(jsonBlock.receiptsRoot),
        miner: eth_util_1.toBuffer(jsonBlock.miner),
        difficulty: eth_util_1.toBuffer(jsonBlock.difficulty),
        totalDifficulty: eth_util_1.toBuffer(jsonBlock.totalDifficulty),
        size: eth_util_1.toBuffer(jsonBlock.size),
        extraData: eth_util_1.toBuffer(jsonBlock.extraData),
        gasLimit: eth_util_1.toBuffer(jsonBlock.gasLimit),
        gasUsed: eth_util_1.toBuffer(jsonBlock.gasUsed),
        timestamp: eth_util_1.toBuffer(jsonBlock.timestamp),
        transactions: jsonBlock.transactions,
    };
}
