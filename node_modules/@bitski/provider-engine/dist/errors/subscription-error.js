"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SubscriptionErrorCode;
(function (SubscriptionErrorCode) {
    SubscriptionErrorCode[SubscriptionErrorCode["UnsupportedType"] = 2000] = "UnsupportedType";
    SubscriptionErrorCode[SubscriptionErrorCode["NotFound"] = 2001] = "NotFound";
})(SubscriptionErrorCode = exports.SubscriptionErrorCode || (exports.SubscriptionErrorCode = {}));
/**
 * Represents an error that occurs in the subscriptions subprovider
 */
var SubscriptionError = /** @class */ (function (_super) {
    __extends(SubscriptionError, _super);
    function SubscriptionError(message, code) {
        var _this = _super.call(this, message) || this;
        // Maintains proper stack trace for where our error was thrown (only available on V8)
        if (Error.captureStackTrace) {
            Error.captureStackTrace(_this, SubscriptionError);
        }
        _this.code = code;
        return _this;
    }
    SubscriptionError.UnsupportedType = function (type) {
        return new SubscriptionError("Unsupported subscription type: " + type, SubscriptionErrorCode.UnsupportedType);
    };
    SubscriptionError.NotFound = function (subscriptionId) {
        return new SubscriptionError("Subscription with id " + subscriptionId + " not found", SubscriptionErrorCode.NotFound);
    };
    return SubscriptionError;
}(Error));
exports.SubscriptionError = SubscriptionError;
