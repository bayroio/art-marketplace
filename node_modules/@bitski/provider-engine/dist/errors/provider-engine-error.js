"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ProviderEngineErrorCode;
(function (ProviderEngineErrorCode) {
    ProviderEngineErrorCode[ProviderEngineErrorCode["UnhandledRequest"] = 1000] = "UnhandledRequest";
    ProviderEngineErrorCode[ProviderEngineErrorCode["MissingImplementation"] = 1001] = "MissingImplementation";
    ProviderEngineErrorCode[ProviderEngineErrorCode["UnsupportedFeature"] = 1002] = "UnsupportedFeature";
})(ProviderEngineErrorCode = exports.ProviderEngineErrorCode || (exports.ProviderEngineErrorCode = {}));
/**
 * Represents errors specific to ProviderEngine
 */
var ProviderEngineError = /** @class */ (function (_super) {
    __extends(ProviderEngineError, _super);
    function ProviderEngineError(message, code) {
        var _this = _super.call(this, message) || this;
        // Maintains proper stack trace for where our error was thrown (only available on V8)
        if (Error.captureStackTrace) {
            Error.captureStackTrace(_this, ProviderEngineError);
        }
        _this.code = code;
        return _this;
    }
    return ProviderEngineError;
}(Error));
exports.ProviderEngineError = ProviderEngineError;
