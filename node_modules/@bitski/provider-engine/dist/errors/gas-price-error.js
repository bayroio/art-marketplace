"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var GasPriceErrorCode;
(function (GasPriceErrorCode) {
    GasPriceErrorCode[GasPriceErrorCode["BlockNotFound"] = 4000] = "BlockNotFound";
})(GasPriceErrorCode = exports.GasPriceErrorCode || (exports.GasPriceErrorCode = {}));
/**
 * Represents errors that occur in the gas price subprovider
 */
var GasPriceError = /** @class */ (function (_super) {
    __extends(GasPriceError, _super);
    function GasPriceError(message, code) {
        var _this = _super.call(this, message) || this;
        // Maintains proper stack trace for where our error was thrown (only available on V8)
        if (Error.captureStackTrace) {
            Error.captureStackTrace(_this, GasPriceError);
        }
        _this.code = code;
        return _this;
    }
    GasPriceError.BlockNotFound = function (blockNumber) {
        var msg = "Could not calculate gas. Block " + blockNumber + " was not found";
        return new GasPriceError(msg, GasPriceErrorCode.BlockNotFound);
    };
    return GasPriceError;
}(Error));
exports.GasPriceError = GasPriceError;
