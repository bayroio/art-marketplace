"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var provider_engine_error_1 = require("./errors/provider-engine-error");
var create_payload_1 = require("./util/create-payload");
// The base class which ProviderEngine will extend from that provides the basic Web3 Provider interface
var BaseProvider = /** @class */ (function (_super) {
    __extends(BaseProvider, _super);
    function BaseProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    // Modern send method
    BaseProvider.prototype.send = function (method, params) {
        var payload = create_payload_1.createPayload({ method: method, params: params });
        return this.sendPayload(payload).then(function (response) {
            return response.result;
        });
    };
    // Legacy sendAsync method
    BaseProvider.prototype.sendAsync = function (payload, cb) {
        this.sendPayload(payload).then(function (response) {
            cb(null, response);
        }).catch(function (error) {
            cb(error, null);
        });
    };
    // Whether or not this provider supports subscriptions
    BaseProvider.prototype.supportsSubscriptions = function () {
        // Override this in your subclass if you support subscriptions
        return false;
    };
    // Method to subscribe to a given subscription type
    BaseProvider.prototype.subscribe = function (subscribeMethod, subscriptionMethod, parameters) {
        // Override this with subscription implementation
        return Promise.reject(new provider_engine_error_1.ProviderEngineError('Subscriptions are not supported', provider_engine_error_1.ProviderEngineErrorCode.UnsupportedFeature));
    };
    // Method to unsubscribe
    BaseProvider.prototype.unsubscribe = function (subscriptionId, unsubscribeMethod) {
        // Override this with unsubscribe implementation
        return Promise.reject(new provider_engine_error_1.ProviderEngineError('Subscriptions are not supported', provider_engine_error_1.ProviderEngineErrorCode.UnsupportedFeature));
    };
    return BaseProvider;
}(events_1.EventEmitter));
exports.default = BaseProvider;
