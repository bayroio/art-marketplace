(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ProviderErrorCode;
    (function (ProviderErrorCode) {
        // Thrown when accessing subscription features when they are disabled.
        ProviderErrorCode[ProviderErrorCode["SubscriptionsUnavailable"] = 4000] = "SubscriptionsUnavailable";
        // Thrown when request is missing required params or data
        ProviderErrorCode[ProviderErrorCode["InvalidRequest"] = 4001] = "InvalidRequest";
    })(ProviderErrorCode = exports.ProviderErrorCode || (exports.ProviderErrorCode = {}));
    class ProviderError extends Error {
        constructor(message, code) {
            super(message);
            this.name = 'ProviderError';
            // Maintains proper stack trace for where our error was thrown (only available on V8)
            if (Error.captureStackTrace) {
                Error.captureStackTrace(this, ProviderError);
            }
            this.code = code;
        }
        static SubscriptionsUnavailable() {
            return new ProviderError('Subscriptions are disabled. Enable block polling to use this feature.', ProviderErrorCode.SubscriptionsUnavailable);
        }
        static InvalidRequest(reason) {
            return new ProviderError(`Invalid request: ${reason}`, ProviderErrorCode.InvalidRequest);
        }
    }
    exports.ProviderError = ProviderError;
});
//# sourceMappingURL=provider-error.js.map