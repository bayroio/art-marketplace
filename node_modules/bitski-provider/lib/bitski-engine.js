var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@bitski/provider-engine", "./errors/provider-error", "./subproviders/nonce-tracker", "./subproviders/transaction-validator", "./subproviders/typed-data"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const provider_engine_1 = __importStar(require("@bitski/provider-engine"));
    const provider_error_1 = require("./errors/provider-error");
    const nonce_tracker_1 = require("./subproviders/nonce-tracker");
    const transaction_validator_1 = require("./subproviders/transaction-validator");
    const typed_data_1 = require("./subproviders/typed-data");
    class BitskiEngine extends provider_engine_1.default {
        constructor(options) {
            super(options);
            options = options || {};
            // Handles static responses
            this.addProvider(new provider_engine_1.DefaultFixtureSubprovider());
            // Monitors requests to eth_getTransactionCount and eth_sendTransaction to track
            // pending transactions
            this.addProvider(new nonce_tracker_1.NonceTrackerSubprovider());
            // Sanitizes transaction params, removing anything invalid
            this.addProvider(new provider_engine_1.SanitizerSubprovider());
            const enableValidator = !(options && options.disableValidation === true);
            if (enableValidator) {
                // Ensures that transactions are well formed (nonce, gas, gasPrice, from) before they are sent to Bitski
                this.addProvider(new transaction_validator_1.TransactionValidatorSubprovider(options.minGasPrice));
                this.addProvider(new typed_data_1.TypedDataSanitizerSubprovider());
            }
            const enableCache = !(options && options.disableCaching === true);
            if (enableCache) {
                // Block Cache - caches certain requests by their block number
                this.addProvider(new provider_engine_1.BlockCacheSubprovider());
            }
            // Handles subscriptions and filters
            const filterAndSubsSubprovider = new provider_engine_1.SubscriptionSubprovider();
            // Watch for updates from subscriptions
            filterAndSubsSubprovider.on('data', (_, notification) => {
                this.onMessage(notification);
            });
            this.addProvider(filterAndSubsSubprovider);
            if (enableCache) {
                // Debounces duplicate requests that occur at the same time
                this.addProvider(new provider_engine_1.InflightCacheSubprovider());
            }
        }
        supportsSubscriptions() {
            return this._pollForBlocks;
        }
        subscribe(subscribeMethod = 'eth_subscribe', subscriptionMethod, parameters) {
            if (!this._pollForBlocks) {
                return Promise.reject(provider_error_1.ProviderError.SubscriptionsUnavailable());
            }
            parameters.unshift(subscriptionMethod);
            return this.send(subscribeMethod, parameters);
        }
        unsubscribe(subscriptionId, unsubscribeMethod = 'eth_unsubscribe') {
            if (!this._pollForBlocks) {
                return Promise.reject(provider_error_1.ProviderError.SubscriptionsUnavailable());
            }
            return this.send(unsubscribeMethod, [subscriptionId]).then((response) => {
                if (response) {
                    this.removeAllListeners(subscriptionId);
                }
                return response;
            });
        }
        onMessage(notification) {
            // Re-emit (previous behavior ~ web3 1.0.0-beta.37)
            this.emit('data', null, notification);
            if (notification && notification.params && notification.params.subscription) {
                // Current web3 behavior - emit subscription id
                this.emit(notification.params.subscription, notification.params);
            }
        }
    }
    exports.BitskiEngine = BitskiEngine;
});
//# sourceMappingURL=bitski-engine.js.map