(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // JSON-RPC methods that require Authorization header
    exports.AUTHENTICATED_METHODS = [
        'eth_accounts',
        'eth_sendTransaction',
        'eth_signTransaction',
        'eth_signTypedData',
        'personal_sign',
        'eth_sign',
    ];
    // Error messages that are usually transient and should be retried
    exports.RETRIABLE_ERRORS = [
        // ignore server overload errors
        'Gateway timeout',
        'ETIMEDOUT',
        'ENOTFOUND',
        // ignore server sent html error pages
        // or truncated json responses
        'SyntaxError',
        'ECONNRESET',
        'EHOSTUNREACH',
        'Timeout out while waiting for response',
    ];
    // Errors that indicate the access token is not valid
    exports.UNAUTHORIZED_ERRORS = [
        'Missing auth',
        'Invalid client id',
        'Not Authorized',
    ];
});
//# sourceMappingURL=constants.js.map